
Control_Unit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000308  00800100  000019bc  00001a50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800408  00800408  00001d58  2**0
                  ALLOC
  3 .stab         000025e0  00000000  00000000  00001d58  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008fe  00000000  00000000  00004338  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  00004c38  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021ae  00000000  00000000  00004e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d7e  00000000  00000000  00007026  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001446  00000000  00000000  00007da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000594  00000000  00000000  000091ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ca  00000000  00000000  00009780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bdc  00000000  00000000  00009e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000aa26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	14 e0       	ldi	r17, 0x04	; 4
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec eb       	ldi	r30, 0xBC	; 188
      7c:	f9 e1       	ldi	r31, 0x19	; 25
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 30       	cpi	r26, 0x08	; 8
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	14 e0       	ldi	r17, 0x04	; 4
      8c:	a8 e0       	ldi	r26, 0x08	; 8
      8e:	b4 e0       	ldi	r27, 0x04	; 4
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 31       	cpi	r26, 0x19	; 25
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "serial.h"
#include "protocolhandeler.h"

int main (void)
{
	init_dist();
      a6:	0e 94 8c 00 	call	0x118	; 0x118 <init_dist>
	init_shutter();
      aa:	0e 94 cb 00 	call	0x196	; 0x196 <init_shutter>
	init_serial();
      ae:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <init_serial>
	
	while(1)
	{
		init_leds();
      b2:	0e 94 47 01 	call	0x28e	; 0x28e <init_leds>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      b6:	8f ef       	ldi	r24, 0xFF	; 255
      b8:	93 ed       	ldi	r25, 0xD3	; 211
      ba:	a0 e3       	ldi	r26, 0x30	; 48
      bc:	81 50       	subi	r24, 0x01	; 1
      be:	90 40       	sbci	r25, 0x00	; 0
      c0:	a0 40       	sbci	r26, 0x00	; 0
      c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x16>
      c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x20>
      c6:	00 00       	nop
      c8:	f4 cf       	rjmp	.-24     	; 0xb2 <main+0xc>

000000ca <init_ports>:
const uint8_t strobe = 2;

void init_ports(void)
{
	//Set PORTB on output for display
	DDRB = 0xff;
      ca:	8f ef       	ldi	r24, 0xFF	; 255
      cc:	84 b9       	out	0x04, r24	; 4
	//Set PD2 (Trigger) to output and PD3 (Echo) to input
	DDRD = 0b00000100;
      ce:	84 e0       	ldi	r24, 0x04	; 4
      d0:	8a b9       	out	0x0a, r24	; 10
}
      d2:	08 95       	ret

000000d4 <init_timer>:

void init_timer(void)
// prescaling : max time = 2^16/16E6 = 4.1 ms, 4.1 >> 2.3, so no prescaling required
// normal mode, no prescale, stop timer
{
	TCCR1A = 0;
      d4:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = _BV(CS10);
      d8:	81 e0       	ldi	r24, 0x01	; 1
      da:	80 93 81 00 	sts	0x0081, r24
}
      de:	08 95       	ret

000000e0 <stop_timer>:

void stop_timer()
{
	//Stop timer and reset value
	TCCR1B = 0;
      e0:	10 92 81 00 	sts	0x0081, r1
	TCNT1 = 0;
      e4:	10 92 85 00 	sts	0x0085, r1
      e8:	10 92 84 00 	sts	0x0084, r1
}
      ec:	08 95       	ret

000000ee <init_ext_int>:

void init_ext_int(void)
{
	// any change triggers ext interrupt 1
	EICRA = (1 << ISC10);
      ee:	84 e0       	ldi	r24, 0x04	; 4
      f0:	80 93 69 00 	sts	0x0069, r24
	EIMSK = (1 << INT1);
      f4:	82 e0       	ldi	r24, 0x02	; 2
      f6:	8d bb       	out	0x1d, r24	; 29
}
      f8:	08 95       	ret

000000fa <calc_cm>:

uint16_t calc_cm(uint16_t counter)
{
	/* First set cycles to uS and divide by 58 to get cm */
	return counter / 16 / 58;
      fa:	60 ea       	ldi	r22, 0xA0	; 160
      fc:	73 e0       	ldi	r23, 0x03	; 3
      fe:	0e 94 8c 09 	call	0x1318	; 0x1318 <__udivmodhi4>
     102:	86 2f       	mov	r24, r22
     104:	97 2f       	mov	r25, r23
}
     106:	08 95       	ret

00000108 <sendPulse>:

void sendPulse()
{
	PORTD = 4;
     108:	84 e0       	ldi	r24, 0x04	; 4
     10a:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     10c:	85 e3       	ldi	r24, 0x35	; 53
     10e:	8a 95       	dec	r24
     110:	f1 f7       	brne	.-4      	; 0x10e <sendPulse+0x6>
     112:	00 00       	nop
	_delay_us(10);
	PORTD = (0<<PORTD0);
     114:	1b b8       	out	0x0b, r1	; 11
}
     116:	08 95       	ret

00000118 <init_dist>:

void init_dist()
{
	init_ports();
     118:	0e 94 65 00 	call	0xca	; 0xca <init_ports>
	init_ext_int();
     11c:	0e 94 77 00 	call	0xee	; 0xee <init_ext_int>
	sei();
     120:	78 94       	sei
}
     122:	08 95       	ret

00000124 <read_sensor_dist>:

int read_sensor_dist(void)
{
	sendPulse();
     124:	0e 94 84 00 	call	0x108	; 0x108 <sendPulse>
	stop_timer();
     128:	0e 94 70 00 	call	0xe0	; 0xe0 <stop_timer>
	uint16_t dist = calc_cm(gv_counter);
     12c:	80 91 09 04 	lds	r24, 0x0409
     130:	90 91 0a 04 	lds	r25, 0x040A
     134:	0e 94 7d 00 	call	0xfa	; 0xfa <calc_cm>
	return dist;
}
     138:	08 95       	ret

0000013a <__vector_2>:

ISR (INT1_vect)
{	
     13a:	1f 92       	push	r1
     13c:	0f 92       	push	r0
     13e:	0f b6       	in	r0, 0x3f	; 63
     140:	0f 92       	push	r0
     142:	11 24       	eor	r1, r1
     144:	2f 93       	push	r18
     146:	3f 93       	push	r19
     148:	4f 93       	push	r20
     14a:	5f 93       	push	r21
     14c:	6f 93       	push	r22
     14e:	7f 93       	push	r23
     150:	8f 93       	push	r24
     152:	9f 93       	push	r25
     154:	af 93       	push	r26
     156:	bf 93       	push	r27
     158:	ef 93       	push	r30
     15a:	ff 93       	push	r31
	init_timer();
     15c:	0e 94 6a 00 	call	0xd4	; 0xd4 <init_timer>
	while (bit_is_set(PIND, PD3))
     160:	4b 99       	sbic	0x09, 3	; 9
     162:	fe cf       	rjmp	.-4      	; 0x160 <__vector_2+0x26>
	{
		//Wait for PIND to go back down, hence echo is finished
	}
	gv_counter = TCNT1;	
     164:	80 91 84 00 	lds	r24, 0x0084
     168:	90 91 85 00 	lds	r25, 0x0085
     16c:	90 93 0a 04 	sts	0x040A, r25
     170:	80 93 09 04 	sts	0x0409, r24
     174:	ff 91       	pop	r31
     176:	ef 91       	pop	r30
     178:	bf 91       	pop	r27
     17a:	af 91       	pop	r26
     17c:	9f 91       	pop	r25
     17e:	8f 91       	pop	r24
     180:	7f 91       	pop	r23
     182:	6f 91       	pop	r22
     184:	5f 91       	pop	r21
     186:	4f 91       	pop	r20
     188:	3f 91       	pop	r19
     18a:	2f 91       	pop	r18
     18c:	0f 90       	pop	r0
     18e:	0f be       	out	0x3f, r0	; 63
     190:	0f 90       	pop	r0
     192:	1f 90       	pop	r1
     194:	18 95       	reti

00000196 <init_shutter>:
uint8_t sensor_dist; //read_dist

void init_shutter()
{
	//set DDRB. PD 0 - PD 2 = output (leds).
	set_ths_dist(30);
     196:	8e e1       	ldi	r24, 0x1E	; 30
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 9a 01 	call	0x334	; 0x334 <set_ths_dist>
	set_ths_light(150);
     19e:	86 e9       	ldi	r24, 0x96	; 150
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 94 94 01 	call	0x328	; 0x328 <set_ths_light>
	set_ths_temp(26);
     1a6:	8a e1       	ldi	r24, 0x1A	; 26
     1a8:	90 e0       	ldi	r25, 0x00	; 0
     1aa:	0e 94 8e 01 	call	0x31c	; 0x31c <set_ths_temp>
	set_shutter_mode(1);
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	0e 94 82 01 	call	0x304	; 0x304 <set_shutter_mode>
	set_shutter_state(0);
     1b6:	80 e0       	ldi	r24, 0x00	; 0
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	0e 94 88 01 	call	0x310	; 0x310 <set_shutter_state>
	uint8_t arduino_name[20] = {'A','r','d','u','i','n','o'};
}
     1be:	08 95       	ret

000001c0 <moving>:


uint8_t moving()
{
	uint8_t opening_closing;
	if(ths_dist > sensor_dist & sensor_dist > ths_dist_min)
     1c0:	90 91 0d 04 	lds	r25, 0x040D
     1c4:	21 e0       	ldi	r18, 0x01	; 1
     1c6:	80 91 0c 04 	lds	r24, 0x040C
     1ca:	98 17       	cp	r25, r24
     1cc:	08 f0       	brcs	.+2      	; 0x1d0 <moving+0x10>
     1ce:	20 e0       	ldi	r18, 0x00	; 0
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	30 91 03 01 	lds	r19, 0x0103
     1d6:	39 17       	cp	r19, r25
     1d8:	08 f0       	brcs	.+2      	; 0x1dc <moving+0x1c>
     1da:	80 e0       	ldi	r24, 0x00	; 0
	{
		opening_closing = 0;
		//stopped
	}
	return opening_closing;
}
     1dc:	82 23       	and	r24, r18
     1de:	08 95       	ret

000001e0 <auto_regulator>:
void auto_regulator()
{
	static uint8_t light_set = 1;
	static uint8_t temp_set = 1;
	
	ths_temp = get_ths_temp(); //get_ths_temp()
     1e0:	0e 94 c9 01 	call	0x392	; 0x392 <get_ths_temp>
     1e4:	90 93 11 04 	sts	0x0411, r25
     1e8:	80 93 10 04 	sts	0x0410, r24
	ths_light = get_ths_light(); //get_ths_light
     1ec:	0e 94 cf 01 	call	0x39e	; 0x39e <get_ths_light>
     1f0:	80 93 0b 04 	sts	0x040B, r24
	ths_dist = get_ths_dist(); //get_ths_dist
     1f4:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <get_ths_dist>
     1f8:	80 93 0c 04 	sts	0x040C, r24
	
	// if moving is 0, check if readings are above or below the thresh holds. 
	if (moving() == 0)
     1fc:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <moving>
     200:	88 23       	and	r24, r24
     202:	09 f0       	breq	.+2      	; 0x206 <auto_regulator+0x26>
     204:	3f c0       	rjmp	.+126    	; 0x284 <auto_regulator+0xa4>
	{
		if (sensor_light > ths_light)
     206:	20 91 12 04 	lds	r18, 0x0412
     20a:	40 91 0b 04 	lds	r20, 0x040B
     20e:	42 17       	cp	r20, r18
     210:	10 f4       	brcc	.+4      	; 0x216 <auto_regulator+0x36>
		{
			light_set = 0;
     212:	10 92 04 01 	sts	0x0104, r1
		}
		if(sensor_light < (ths_light-25) & ~light_set)
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	50 e0       	ldi	r21, 0x00	; 0
     21a:	49 51       	subi	r20, 0x19	; 25
     21c:	50 40       	sbci	r21, 0x00	; 0
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	24 17       	cp	r18, r20
     224:	35 07       	cpc	r19, r21
     226:	14 f0       	brlt	.+4      	; 0x22c <auto_regulator+0x4c>
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	20 91 04 01 	lds	r18, 0x0104
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	20 95       	com	r18
     234:	30 95       	com	r19
     236:	82 23       	and	r24, r18
     238:	93 23       	and	r25, r19
     23a:	00 97       	sbiw	r24, 0x00	; 0
     23c:	19 f0       	breq	.+6      	; 0x244 <auto_regulator+0x64>
		{
			light_set = 1;
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	80 93 04 01 	sts	0x0104, r24
		}
		if (celsius > ths_temp);
		{
			temp_set = 0;
     244:	10 92 05 01 	sts	0x0105, r1
		}
		if (celsius < (ths_temp - 2) & ~temp_set)
     248:	20 91 10 04 	lds	r18, 0x0410
     24c:	30 91 11 04 	lds	r19, 0x0411
     250:	22 50       	subi	r18, 0x02	; 2
     252:	30 40       	sbci	r19, 0x00	; 0
     254:	80 91 0e 04 	lds	r24, 0x040E
     258:	90 91 0f 04 	lds	r25, 0x040F
     25c:	82 17       	cp	r24, r18
     25e:	93 07       	cpc	r25, r19
     260:	1c f4       	brge	.+6      	; 0x268 <auto_regulator+0x88>
		{
			temp_set = 1;
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	80 93 05 01 	sts	0x0105, r24
		
		/*
		if light sensor is higher than ths_light and celsius is higher than ths_temp.
		turn on red light = open
		*/
		if (light_set && temp_set)
     268:	80 91 04 01 	lds	r24, 0x0104
     26c:	88 23       	and	r24, r24
     26e:	39 f0       	breq	.+14     	; 0x27e <auto_regulator+0x9e>
     270:	80 91 05 01 	lds	r24, 0x0105
     274:	88 23       	and	r24, r24
     276:	19 f0       	breq	.+6      	; 0x27e <auto_regulator+0x9e>
		{
			PORTB = 4; //opgerold
     278:	84 e0       	ldi	r24, 0x04	; 4
     27a:	85 b9       	out	0x05, r24	; 5
     27c:	08 95       	ret
		}
		
		else
		{
			PORTB = 1; //uitgerold
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	85 b9       	out	0x05, r24	; 5
     282:	08 95       	ret
		}
	}
	else
	{
		PORTB ^= 2;
     284:	95 b1       	in	r25, 0x05	; 5
     286:	82 e0       	ldi	r24, 0x02	; 2
     288:	89 27       	eor	r24, r25
     28a:	85 b9       	out	0x05, r24	; 5
     28c:	08 95       	ret

0000028e <init_leds>:
// 					
// }

void init_leds()
{
	DDRB = 0xFF;
     28e:	8f ef       	ldi	r24, 0xFF	; 255
     290:	84 b9       	out	0x04, r24	; 4
	int mode;
	mode = get_shutter_mode(); //get_shutter_mode
     292:	0e 94 c4 01 	call	0x388	; 0x388 <get_shutter_mode>
	
	if (mode == 1)
     296:	81 30       	cpi	r24, 0x01	; 1
     298:	91 05       	cpc	r25, r1
     29a:	89 f4       	brne	.+34     	; 0x2be <init_leds+0x30>
	{
		celsius = read_sensor_temp(); //read_celsuis
     29c:	0e 94 c4 07 	call	0xf88	; 0xf88 <read_sensor_temp>
     2a0:	90 93 0f 04 	sts	0x040F, r25
     2a4:	80 93 0e 04 	sts	0x040E, r24
		sensor_dist = read_sensor_dist(); //read_dist
     2a8:	0e 94 92 00 	call	0x124	; 0x124 <read_sensor_dist>
     2ac:	80 93 0d 04 	sts	0x040D, r24
		sensor_light = read_sensor_light(); //read_light
     2b0:	0e 94 78 01 	call	0x2f0	; 0x2f0 <read_sensor_light>
     2b4:	80 93 12 04 	sts	0x0412, r24
		auto_regulator();
     2b8:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <auto_regulator>
     2bc:	08 95       	ret
	}
	else if (mode == 0)
     2be:	00 97       	sbiw	r24, 0x00	; 0
     2c0:	21 f4       	brne	.+8      	; 0x2ca <init_leds+0x3c>
	{
		sensor_dist = read_sensor_dist();
     2c2:	0e 94 92 00 	call	0x124	; 0x124 <read_sensor_dist>
     2c6:	80 93 0d 04 	sts	0x040D, r24
     2ca:	08 95       	ret

000002cc <init_adc_light>:

void init_adc_light()
{
	// ref=Vcc, left adjust the result (8 bit resolution),
	// select channel 0 (PC1 = input)
	ADMUX = (1<<REFS0)|(1<<ADLAR)|(1<<0);
     2cc:	81 e6       	ldi	r24, 0x61	; 97
     2ce:	80 93 7c 00 	sts	0x007C, r24
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     2d2:	87 e8       	ldi	r24, 0x87	; 135
     2d4:	80 93 7a 00 	sts	0x007A, r24
}
     2d8:	08 95       	ret

000002da <get_adc_value_light>:

uint8_t get_adc_value_light()
{
	ADCSRA |= (1<<ADSC); // start conversion
     2da:	ea e7       	ldi	r30, 0x7A	; 122
     2dc:	f0 e0       	ldi	r31, 0x00	; 0
     2de:	80 81       	ld	r24, Z
     2e0:	80 64       	ori	r24, 0x40	; 64
     2e2:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     2e4:	80 81       	ld	r24, Z
     2e6:	86 fd       	sbrc	r24, 6
     2e8:	fd cf       	rjmp	.-6      	; 0x2e4 <get_adc_value_light+0xa>
	return ADCH; // ms 8 bits
     2ea:	80 91 79 00 	lds	r24, 0x0079
}
     2ee:	08 95       	ret

000002f0 <read_sensor_light>:

int8_t read_sensor_light()
{
	int sensor_light;
	init_adc_light();
     2f0:	0e 94 66 01 	call	0x2cc	; 0x2cc <init_adc_light>
	sensor_light = get_adc_value_light();
     2f4:	0e 94 6d 01 	call	0x2da	; 0x2da <get_adc_value_light>
	return sensor_light;
	

     2f8:	08 95       	ret

000002fa <get_shutter_state>:
	return eeprom_read_byte((uint8_t*)shutter_mode_adr);
}

uint8_t get_shutter_state()
{
	return eeprom_read_byte((uint8_t*)shutter_state_adr);
     2fa:	81 e0       	ldi	r24, 0x01	; 1
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__eerd_byte_m328p>
}
     302:	08 95       	ret

00000304 <set_shutter_mode>:
#include "serial.h"
#include "protocolhandeler.h"

/*Setters*/
void set_shutter_mode(uint8_t shutter_mode)
{
     304:	68 2f       	mov	r22, r24
	eeprom_update_byte((uint8_t*)shutter_mode_adr, shutter_mode);
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__eeupd_byte_m328p>
}
     30e:	08 95       	ret

00000310 <set_shutter_state>:

void set_shutter_state(uint8_t shutter_state)
{
     310:	68 2f       	mov	r22, r24
	eeprom_update_byte((uint8_t*)shutter_state_adr, shutter_state);
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__eeupd_byte_m328p>
}
     31a:	08 95       	ret

0000031c <set_ths_temp>:

void set_ths_temp(int16_t ths_temp)
{
     31c:	68 2f       	mov	r22, r24
	eeprom_update_byte((int16_t*)ths_temp_adr, ths_temp);
     31e:	82 e0       	ldi	r24, 0x02	; 2
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__eeupd_byte_m328p>
}
     326:	08 95       	ret

00000328 <set_ths_light>:

void set_ths_light(uint8_t ths_light)
{
     328:	68 2f       	mov	r22, r24
	eeprom_update_byte((uint8_t*)ths_light_adr, ths_light);
     32a:	83 e0       	ldi	r24, 0x03	; 3
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__eeupd_byte_m328p>
}
     332:	08 95       	ret

00000334 <set_ths_dist>:

void set_ths_dist(uint8_t ths_dist)
{
     334:	68 2f       	mov	r22, r24
	eeprom_update_byte((uint8_t*)ths_dist_adr, ths_dist);
     336:	84 e0       	ldi	r24, 0x04	; 4
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__eeupd_byte_m328p>
}
     33e:	08 95       	ret

00000340 <set_arduino_name>:

set_arduino_name(char* str)
{
     340:	0f 93       	push	r16
     342:	1f 93       	push	r17
     344:	cf 93       	push	r28
     346:	8c 01       	movw	r16, r24
	uint8_t i = 0;
     348:	c0 e0       	ldi	r28, 0x00	; 0
	while(strlen(str)>i)
     34a:	08 c0       	rjmp	.+16     	; 0x35c <set_arduino_name+0x1c>
	{
		eeprom_update_byte((char*)name_start_adr+i, str[i]);
     34c:	f8 01       	movw	r30, r16
     34e:	e8 0f       	add	r30, r24
     350:	f9 1f       	adc	r31, r25
     352:	05 96       	adiw	r24, 0x05	; 5
     354:	60 81       	ld	r22, Z
     356:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__eeupd_byte_m328p>
		i++;
     35a:	cf 5f       	subi	r28, 0xFF	; 255
}

set_arduino_name(char* str)
{
	uint8_t i = 0;
	while(strlen(str)>i)
     35c:	e0 2f       	mov	r30, r16
     35e:	f1 2f       	mov	r31, r17
     360:	df 01       	movw	r26, r30
     362:	0d 90       	ld	r0, X+
     364:	00 20       	and	r0, r0
     366:	e9 f7       	brne	.-6      	; 0x362 <set_arduino_name+0x22>
     368:	11 97       	sbiw	r26, 0x01	; 1
     36a:	ae 1b       	sub	r26, r30
     36c:	bf 0b       	sbc	r27, r31
     36e:	8c 2f       	mov	r24, r28
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	8a 17       	cp	r24, r26
     374:	9b 07       	cpc	r25, r27
     376:	50 f3       	brcs	.-44     	; 0x34c <set_arduino_name+0xc>
	{
		eeprom_update_byte((char*)name_start_adr+i, str[i]);
		i++;
	}
	eeprom_update_byte((char*)name_start_adr+i, '\0');
     378:	05 96       	adiw	r24, 0x05	; 5
     37a:	60 e0       	ldi	r22, 0x00	; 0
     37c:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__eeupd_byte_m328p>
}
     380:	cf 91       	pop	r28
     382:	1f 91       	pop	r17
     384:	0f 91       	pop	r16
     386:	08 95       	ret

00000388 <get_shutter_mode>:

/*Getters*/
uint8_t get_shutter_mode()
{
	return eeprom_read_byte((uint8_t*)shutter_mode_adr);
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__eerd_byte_m328p>
}
     390:	08 95       	ret

00000392 <get_ths_temp>:
	return eeprom_read_byte((uint8_t*)shutter_state_adr);
}

int16_t get_ths_temp()
{
	return eeprom_read_byte((uint16_t*)ths_temp_adr);
     392:	82 e0       	ldi	r24, 0x02	; 2
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__eerd_byte_m328p>
}
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	08 95       	ret

0000039e <get_ths_light>:

uint8_t get_ths_light()
{
	return eeprom_read_byte((uint8_t*)ths_light_adr);
     39e:	83 e0       	ldi	r24, 0x03	; 3
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__eerd_byte_m328p>
}
     3a6:	08 95       	ret

000003a8 <get_ths_dist>:

uint8_t get_ths_dist()
{
	return eeprom_read_byte((uint8_t*)ths_dist_adr);
     3a8:	84 e0       	ldi	r24, 0x04	; 4
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__eerd_byte_m328p>
}
     3b0:	08 95       	ret

000003b2 <get_arduino_name>:

char* get_arduino_name()
{
     3b2:	ff 92       	push	r15
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
     3c0:	64 97       	sbiw	r28, 0x14	; 20
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	de bf       	out	0x3e, r29	; 62
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0;
     3cc:	ff 24       	eor	r15, r15
	uint8_t str[20];
	do
	{
		str[i] = eeprom_read_byte((char*)name_start_adr+i);
     3ce:	0f 2d       	mov	r16, r15
     3d0:	10 e0       	ldi	r17, 0x00	; 0
     3d2:	c8 01       	movw	r24, r16
     3d4:	05 96       	adiw	r24, 0x05	; 5
     3d6:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <__eerd_byte_m328p>
     3da:	e1 e0       	ldi	r30, 0x01	; 1
     3dc:	f0 e0       	ldi	r31, 0x00	; 0
     3de:	ec 0f       	add	r30, r28
     3e0:	fd 1f       	adc	r31, r29
     3e2:	e0 0f       	add	r30, r16
     3e4:	f1 1f       	adc	r31, r17
     3e6:	80 83       	st	Z, r24
		i++;
     3e8:	f3 94       	inc	r15
	}while(str[i-1] != '\0');
     3ea:	fe 01       	movw	r30, r28
     3ec:	ef 0d       	add	r30, r15
     3ee:	f1 1d       	adc	r31, r1
     3f0:	80 81       	ld	r24, Z
     3f2:	88 23       	and	r24, r24
     3f4:	61 f7       	brne	.-40     	; 0x3ce <get_arduino_name+0x1c>
	return str;
}
     3f6:	ce 01       	movw	r24, r28
     3f8:	01 96       	adiw	r24, 0x01	; 1
     3fa:	64 96       	adiw	r28, 0x14	; 20
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	de bf       	out	0x3e, r29	; 62
     402:	0f be       	out	0x3f, r0	; 63
     404:	cd bf       	out	0x3d, r28	; 61
     406:	df 91       	pop	r29
     408:	cf 91       	pop	r28
     40a:	1f 91       	pop	r17
     40c:	0f 91       	pop	r16
     40e:	ff 90       	pop	r15
     410:	08 95       	ret

00000412 <open_screen>:

int open_screen()
{
	if (get_shutter_state() != OPEN)
     412:	0e 94 7d 01 	call	0x2fa	; 0x2fa <get_shutter_state>
     416:	81 30       	cpi	r24, 0x01	; 1
     418:	31 f0       	breq	.+12     	; 0x426 <open_screen+0x14>
	{
		set_shutter_state(1);
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	0e 94 88 01 	call	0x310	; 0x310 <set_shutter_state>
		return 1;
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	08 95       	ret
	}
	return 0;
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
}
     42a:	08 95       	ret

0000042c <close_screen>:

int close_screen()
{
	if (get_shutter_state() != CLOSED)
     42c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <get_shutter_state>
     430:	88 23       	and	r24, r24
     432:	31 f0       	breq	.+12     	; 0x440 <close_screen+0x14>
	{
		set_shutter_state(0);
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	0e 94 88 01 	call	0x310	; 0x310 <set_shutter_state>
		return 1;
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	08 95       	ret
	}
	return 0;
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	90 e0       	ldi	r25, 0x00	; 0
}
     444:	08 95       	ret

00000446 <numbers_only>:
{
	while (*s) {
		if (isdigit(*s++) == 0) return 0;
	}

	return 1;
     446:	e8 2f       	mov	r30, r24
     448:	f9 2f       	mov	r31, r25
}

//Source: https://stackoverflow.com/questions/14422775/how-to-check-a-given-string-contains-only-number-or-not-in-c
int numbers_only(const char *s)
{
	while (*s) {
     44a:	05 c0       	rjmp	.+10     	; 0x456 <numbers_only+0x10>
		if (isdigit(*s++) == 0) return 0;
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	c0 97       	sbiw	r24, 0x30	; 48
     450:	8a 30       	cpi	r24, 0x0A	; 10
     452:	91 05       	cpc	r25, r1
     454:	30 f4       	brcc	.+12     	; 0x462 <numbers_only+0x1c>
}

//Source: https://stackoverflow.com/questions/14422775/how-to-check-a-given-string-contains-only-number-or-not-in-c
int numbers_only(const char *s)
{
	while (*s) {
     456:	81 91       	ld	r24, Z+
     458:	88 23       	and	r24, r24
     45a:	c1 f7       	brne	.-16     	; 0x44c <numbers_only+0x6>
		if (isdigit(*s++) == 0) return 0;
	}

	return 1;
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	08 95       	ret

//Source: https://stackoverflow.com/questions/14422775/how-to-check-a-given-string-contains-only-number-or-not-in-c
int numbers_only(const char *s)
{
	while (*s) {
		if (isdigit(*s++) == 0) return 0;
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	90 e0       	ldi	r25, 0x00	; 0
	}

	return 1;
}
     466:	08 95       	ret

00000468 <read_command>:

void read_command()
{
     468:	af 92       	push	r10
     46a:	bf 92       	push	r11
     46c:	cf 92       	push	r12
     46e:	df 92       	push	r13
     470:	ef 92       	push	r14
     472:	ff 92       	push	r15
     474:	0f 93       	push	r16
     476:	1f 93       	push	r17
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	cd b7       	in	r28, 0x3d	; 61
     47e:	de b7       	in	r29, 0x3e	; 62
     480:	c4 5b       	subi	r28, 0xB4	; 180
     482:	d0 40       	sbci	r29, 0x00	; 0
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
	char arg[20];
	char inputbuffer[30];
	char response[100];

	//Reading command
	read_ser(inputbuffer, sizeof(inputbuffer));
     48e:	ce 01       	movw	r24, r28
     490:	c3 96       	adiw	r24, 0x33	; 51
     492:	6e e1       	ldi	r22, 0x1E	; 30
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	0e 94 8a 07 	call	0xf14	; 0xf14 <read_ser>
	
	if (inputbuffer[0] == '\0')
     49a:	2b a9       	sts	0x4b, r18
     49c:	22 23       	and	r18, r18
     49e:	09 f4       	brne	.+2      	; 0x4a2 <read_command+0x3a>
     4a0:	f7 c4       	rjmp	.+2542   	; 0xe90 <__stack+0x591>
	{
		return;
	}
	
	int i = 0;
	while (inputbuffer[i] != ' ' && inputbuffer[i] != '\0')
     4a2:	20 32       	cpi	r18, 0x20	; 32
     4a4:	71 f0       	breq	.+28     	; 0x4c2 <read_command+0x5a>
     4a6:	de 01       	movw	r26, r28
     4a8:	11 96       	adiw	r26, 0x01	; 1
     4aa:	fe 01       	movw	r30, r28
     4ac:	f4 96       	adiw	r30, 0x34	; 52
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	90 e0       	ldi	r25, 0x00	; 0
	{
		commando[i] = inputbuffer[i];
     4b2:	2d 93       	st	X+, r18
		i++;
     4b4:	01 96       	adiw	r24, 0x01	; 1
	{
		return;
	}
	
	int i = 0;
	while (inputbuffer[i] != ' ' && inputbuffer[i] != '\0')
     4b6:	21 91       	ld	r18, Z+
     4b8:	20 32       	cpi	r18, 0x20	; 32
     4ba:	29 f0       	breq	.+10     	; 0x4c6 <read_command+0x5e>
     4bc:	22 23       	and	r18, r18
     4be:	c9 f7       	brne	.-14     	; 0x4b2 <read_command+0x4a>
     4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <read_command+0x5e>
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	90 e0       	ldi	r25, 0x00	; 0
	{
		commando[i] = inputbuffer[i];
		i++;
	}
	commando[i] = '\0';
     4c6:	fe 01       	movw	r30, r28
     4c8:	e8 0f       	add	r30, r24
     4ca:	f9 1f       	adc	r31, r25
     4cc:	11 82       	std	Z+1, r1	; 0x01

	i++; //Spatie skippen
	int j = 0;

	while (inputbuffer[i] != ' ' && inputbuffer[i] != '\0')
     4ce:	fe 01       	movw	r30, r28
     4d0:	e8 0f       	add	r30, r24
     4d2:	f9 1f       	adc	r31, r25
     4d4:	44 a9       	sts	0x44, r20
     4d6:	40 32       	cpi	r20, 0x20	; 32
     4d8:	99 f0       	breq	.+38     	; 0x500 <read_command+0x98>
     4da:	44 23       	and	r20, r20
     4dc:	a1 f0       	breq	.+40     	; 0x506 <read_command+0x9e>
     4de:	fe 01       	movw	r30, r28
     4e0:	7f 96       	adiw	r30, 0x1f	; 31
     4e2:	8c 0f       	add	r24, r28
     4e4:	9d 1f       	adc	r25, r29
	}

	return 1;
}

void read_command()
     4e6:	dc 01       	movw	r26, r24
     4e8:	d5 96       	adiw	r26, 0x35	; 53
		i++;
	}
	commando[i] = '\0';

	i++; //Spatie skippen
	int j = 0;
     4ea:	20 e0       	ldi	r18, 0x00	; 0
     4ec:	30 e0       	ldi	r19, 0x00	; 0

	while (inputbuffer[i] != ' ' && inputbuffer[i] != '\0')
	{
		arg[j] = inputbuffer[i];
     4ee:	41 93       	st	Z+, r20
		i++;
		j++;
     4f0:	2f 5f       	subi	r18, 0xFF	; 255
     4f2:	3f 4f       	sbci	r19, 0xFF	; 255
	commando[i] = '\0';

	i++; //Spatie skippen
	int j = 0;

	while (inputbuffer[i] != ' ' && inputbuffer[i] != '\0')
     4f4:	4d 91       	ld	r20, X+
     4f6:	40 32       	cpi	r20, 0x20	; 32
     4f8:	41 f0       	breq	.+16     	; 0x50a <read_command+0xa2>
     4fa:	44 23       	and	r20, r20
     4fc:	c1 f7       	brne	.-16     	; 0x4ee <read_command+0x86>
     4fe:	05 c0       	rjmp	.+10     	; 0x50a <read_command+0xa2>
		i++;
	}
	commando[i] = '\0';

	i++; //Spatie skippen
	int j = 0;
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	02 c0       	rjmp	.+4      	; 0x50a <read_command+0xa2>
     506:	20 e0       	ldi	r18, 0x00	; 0
     508:	30 e0       	ldi	r19, 0x00	; 0
		arg[j] = inputbuffer[i];
		i++;
		j++;
	}

	arg[j] = '\0';
     50a:	2c 0f       	add	r18, r28
     50c:	3d 1f       	adc	r19, r29
     50e:	d9 01       	movw	r26, r18
     510:	5f 96       	adiw	r26, 0x1f	; 31
     512:	1c 92       	st	X, r1

	//Handshake to verify we are indeed Groot
	if (strcmp(commando, "WHO_ARE_YOU") == 0)
     514:	ce 01       	movw	r24, r28
     516:	01 96       	adiw	r24, 0x01	; 1
     518:	66 e0       	ldi	r22, 0x06	; 6
     51a:	71 e0       	ldi	r23, 0x01	; 1
     51c:	0e 94 be 09 	call	0x137c	; 0x137c <strcmp>
     520:	28 2f       	mov	r18, r24
     522:	39 2f       	mov	r19, r25
     524:	21 15       	cp	r18, r1
     526:	31 05       	cpc	r19, r1
     528:	21 f4       	brne	.+8      	; 0x532 <read_command+0xca>
	{
		write_ser("I AM GROOT");
     52a:	82 e1       	ldi	r24, 0x12	; 18
     52c:	91 e0       	ldi	r25, 0x01	; 1
     52e:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
	}

	//Provide controller with all default settings
	if (strcmp(commando, "GET_SETTINGS")==0)
     532:	ce 01       	movw	r24, r28
     534:	01 96       	adiw	r24, 0x01	; 1
     536:	6d e1       	ldi	r22, 0x1D	; 29
     538:	71 e0       	ldi	r23, 0x01	; 1
     53a:	0e 94 be 09 	call	0x137c	; 0x137c <strcmp>
     53e:	28 2f       	mov	r18, r24
     540:	39 2f       	mov	r19, r25
     542:	21 15       	cp	r18, r1
     544:	31 05       	cpc	r19, r1
     546:	d9 f5       	brne	.+118    	; 0x5be <read_command+0x156>
	{
		sprintf(response, "%s %i %i %i %i", get_arduino_name(), get_shutter_mode(), get_shutter_state(), get_ths_temp(), get_ths_dist());
     548:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <get_arduino_name>
     54c:	6c 01       	movw	r12, r24
     54e:	0e 94 c4 01 	call	0x388	; 0x388 <get_shutter_mode>
     552:	f8 2e       	mov	r15, r24
     554:	0e 94 7d 01 	call	0x2fa	; 0x2fa <get_shutter_state>
     558:	e8 2e       	mov	r14, r24
     55a:	0e 94 c9 01 	call	0x392	; 0x392 <get_ths_temp>
     55e:	5c 01       	movw	r10, r24
     560:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <get_ths_dist>
     564:	ed b7       	in	r30, 0x3d	; 61
     566:	fe b7       	in	r31, 0x3e	; 62
     568:	3e 97       	sbiw	r30, 0x0e	; 14
     56a:	0f b6       	in	r0, 0x3f	; 63
     56c:	f8 94       	cli
     56e:	fe bf       	out	0x3e, r31	; 62
     570:	0f be       	out	0x3f, r0	; 63
     572:	ed bf       	out	0x3d, r30	; 61
     574:	31 96       	adiw	r30, 0x01	; 1
     576:	8e 01       	movw	r16, r28
     578:	0f 5a       	subi	r16, 0xAF	; 175
     57a:	1f 4f       	sbci	r17, 0xFF	; 255
     57c:	ad b7       	in	r26, 0x3d	; 61
     57e:	be b7       	in	r27, 0x3e	; 62
     580:	12 96       	adiw	r26, 0x02	; 2
     582:	1c 93       	st	X, r17
     584:	0e 93       	st	-X, r16
     586:	11 97       	sbiw	r26, 0x01	; 1
     588:	2a e2       	ldi	r18, 0x2A	; 42
     58a:	31 e0       	ldi	r19, 0x01	; 1
     58c:	33 83       	std	Z+3, r19	; 0x03
     58e:	22 83       	std	Z+2, r18	; 0x02
     590:	d5 82       	std	Z+5, r13	; 0x05
     592:	c4 82       	std	Z+4, r12	; 0x04
     594:	f6 82       	std	Z+6, r15	; 0x06
     596:	17 82       	std	Z+7, r1	; 0x07
     598:	e0 86       	std	Z+8, r14	; 0x08
     59a:	11 86       	std	Z+9, r1	; 0x09
     59c:	b3 86       	std	Z+11, r11	; 0x0b
     59e:	a2 86       	std	Z+10, r10	; 0x0a
     5a0:	84 87       	std	Z+12, r24	; 0x0c
     5a2:	15 86       	std	Z+13, r1	; 0x0d
     5a4:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <sprintf>
		write_ser(response);
     5a8:	ed b7       	in	r30, 0x3d	; 61
     5aa:	fe b7       	in	r31, 0x3e	; 62
     5ac:	3e 96       	adiw	r30, 0x0e	; 14
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	f8 94       	cli
     5b2:	fe bf       	out	0x3e, r31	; 62
     5b4:	0f be       	out	0x3f, r0	; 63
     5b6:	ed bf       	out	0x3d, r30	; 61
     5b8:	c8 01       	movw	r24, r16
     5ba:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
	}

	//If tree to handle all GETTERS
	if (strcmp(commando, "get_adruino_name") == 0)
     5be:	ce 01       	movw	r24, r28
     5c0:	01 96       	adiw	r24, 0x01	; 1
     5c2:	69 e3       	ldi	r22, 0x39	; 57
     5c4:	71 e0       	ldi	r23, 0x01	; 1
     5c6:	0e 94 be 09 	call	0x137c	; 0x137c <strcmp>
     5ca:	28 2f       	mov	r18, r24
     5cc:	39 2f       	mov	r19, r25
     5ce:	21 15       	cp	r18, r1
     5d0:	31 05       	cpc	r19, r1
     5d2:	59 f5       	brne	.+86     	; 0x62a <read_command+0x1c2>
	{
		if (get_arduino_name() !=NULL)
     5d4:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <get_arduino_name>
     5d8:	00 97       	sbiw	r24, 0x00	; 0
     5da:	19 f1       	breq	.+70     	; 0x622 <read_command+0x1ba>
		{
			sprintf(response, "OK %s", get_arduino_name());
     5dc:	00 d0       	rcall	.+0      	; 0x5de <read_command+0x176>
     5de:	00 d0       	rcall	.+0      	; 0x5e0 <read_command+0x178>
     5e0:	00 d0       	rcall	.+0      	; 0x5e2 <read_command+0x17a>
     5e2:	ed b7       	in	r30, 0x3d	; 61
     5e4:	fe b7       	in	r31, 0x3e	; 62
     5e6:	31 96       	adiw	r30, 0x01	; 1
     5e8:	8e 01       	movw	r16, r28
     5ea:	0f 5a       	subi	r16, 0xAF	; 175
     5ec:	1f 4f       	sbci	r17, 0xFF	; 255
     5ee:	ad b7       	in	r26, 0x3d	; 61
     5f0:	be b7       	in	r27, 0x3e	; 62
     5f2:	12 96       	adiw	r26, 0x02	; 2
     5f4:	1c 93       	st	X, r17
     5f6:	0e 93       	st	-X, r16
     5f8:	11 97       	sbiw	r26, 0x01	; 1
     5fa:	2a e4       	ldi	r18, 0x4A	; 74
     5fc:	31 e0       	ldi	r19, 0x01	; 1
     5fe:	33 83       	std	Z+3, r19	; 0x03
     600:	22 83       	std	Z+2, r18	; 0x02
     602:	95 83       	std	Z+5, r25	; 0x05
     604:	84 83       	std	Z+4, r24	; 0x04
     606:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <sprintf>
			write_ser(response);
     60a:	ed b7       	in	r30, 0x3d	; 61
     60c:	fe b7       	in	r31, 0x3e	; 62
     60e:	36 96       	adiw	r30, 0x06	; 6
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	fe bf       	out	0x3e, r31	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	ed bf       	out	0x3d, r30	; 61
     61a:	c8 01       	movw	r24, r16
     61c:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
     620:	04 c0       	rjmp	.+8      	; 0x62a <read_command+0x1c2>
		}
		else
		{
			write_ser("ERROR 601: Name is not set");
     622:	80 e5       	ldi	r24, 0x50	; 80
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
		}
	}

	if (strcmp(commando, "GET_STATE") == 0)
     62a:	ce 01       	movw	r24, r28
     62c:	01 96       	adiw	r24, 0x01	; 1
     62e:	6b e6       	ldi	r22, 0x6B	; 107
     630:	71 e0       	ldi	r23, 0x01	; 1
     632:	0e 94 be 09 	call	0x137c	; 0x137c <strcmp>
     636:	28 2f       	mov	r18, r24
     638:	39 2f       	mov	r19, r25
     63a:	21 15       	cp	r18, r1
     63c:	31 05       	cpc	r19, r1
     63e:	09 f0       	breq	.+2      	; 0x642 <read_command+0x1da>
     640:	49 c0       	rjmp	.+146    	; 0x6d4 <read_command+0x26c>
	{
		if (get_shutter_state() == OPEN || get_shutter_state == CLOSED)
     642:	0e 94 7d 01 	call	0x2fa	; 0x2fa <get_shutter_state>
     646:	81 30       	cpi	r24, 0x01	; 1
     648:	19 f5       	brne	.+70     	; 0x690 <read_command+0x228>
		{
			sprintf(response, "OK %i", get_shutter_state());
     64a:	00 d0       	rcall	.+0      	; 0x64c <read_command+0x1e4>
     64c:	00 d0       	rcall	.+0      	; 0x64e <read_command+0x1e6>
     64e:	00 d0       	rcall	.+0      	; 0x650 <read_command+0x1e8>
     650:	ed b7       	in	r30, 0x3d	; 61
     652:	fe b7       	in	r31, 0x3e	; 62
     654:	31 96       	adiw	r30, 0x01	; 1
     656:	8e 01       	movw	r16, r28
     658:	0f 5a       	subi	r16, 0xAF	; 175
     65a:	1f 4f       	sbci	r17, 0xFF	; 255
     65c:	ad b7       	in	r26, 0x3d	; 61
     65e:	be b7       	in	r27, 0x3e	; 62
     660:	12 96       	adiw	r26, 0x02	; 2
     662:	1c 93       	st	X, r17
     664:	0e 93       	st	-X, r16
     666:	11 97       	sbiw	r26, 0x01	; 1
     668:	25 e7       	ldi	r18, 0x75	; 117
     66a:	31 e0       	ldi	r19, 0x01	; 1
     66c:	33 83       	std	Z+3, r19	; 0x03
     66e:	22 83       	std	Z+2, r18	; 0x02
     670:	84 83       	std	Z+4, r24	; 0x04
     672:	15 82       	std	Z+5, r1	; 0x05
     674:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <sprintf>
			write_ser(response);
     678:	ed b7       	in	r30, 0x3d	; 61
     67a:	fe b7       	in	r31, 0x3e	; 62
     67c:	36 96       	adiw	r30, 0x06	; 6
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	f8 94       	cli
     682:	fe bf       	out	0x3e, r31	; 62
     684:	0f be       	out	0x3f, r0	; 63
     686:	ed bf       	out	0x3d, r30	; 61
     688:	c8 01       	movw	r24, r16
     68a:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
	}

	if (strcmp(commando, "GET_STATE") == 0)
	{
		if (get_shutter_state() == OPEN || get_shutter_state == CLOSED)
		{
     68e:	22 c0       	rjmp	.+68     	; 0x6d4 <read_command+0x26c>
			sprintf(response, "OK %i", get_shutter_state());
			write_ser(response);
		}
		else
		{
			sprintf(response, "ERROR 601: Unrecognized screenstate %i", get_shutter_state());
     690:	00 d0       	rcall	.+0      	; 0x692 <read_command+0x22a>
     692:	00 d0       	rcall	.+0      	; 0x694 <read_command+0x22c>
     694:	00 d0       	rcall	.+0      	; 0x696 <read_command+0x22e>
     696:	ed b7       	in	r30, 0x3d	; 61
     698:	fe b7       	in	r31, 0x3e	; 62
     69a:	31 96       	adiw	r30, 0x01	; 1
     69c:	8e 01       	movw	r16, r28
     69e:	0f 5a       	subi	r16, 0xAF	; 175
     6a0:	1f 4f       	sbci	r17, 0xFF	; 255
     6a2:	ad b7       	in	r26, 0x3d	; 61
     6a4:	be b7       	in	r27, 0x3e	; 62
     6a6:	12 96       	adiw	r26, 0x02	; 2
     6a8:	1c 93       	st	X, r17
     6aa:	0e 93       	st	-X, r16
     6ac:	11 97       	sbiw	r26, 0x01	; 1
     6ae:	2b e7       	ldi	r18, 0x7B	; 123
     6b0:	31 e0       	ldi	r19, 0x01	; 1
     6b2:	33 83       	std	Z+3, r19	; 0x03
     6b4:	22 83       	std	Z+2, r18	; 0x02
     6b6:	84 83       	std	Z+4, r24	; 0x04
     6b8:	15 82       	std	Z+5, r1	; 0x05
     6ba:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <sprintf>
			write_ser(response);
     6be:	ed b7       	in	r30, 0x3d	; 61
     6c0:	fe b7       	in	r31, 0x3e	; 62
     6c2:	36 96       	adiw	r30, 0x06	; 6
     6c4:	0f b6       	in	r0, 0x3f	; 63
     6c6:	f8 94       	cli
     6c8:	fe bf       	out	0x3e, r31	; 62
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	ed bf       	out	0x3d, r30	; 61
     6ce:	c8 01       	movw	r24, r16
     6d0:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
		}
	}

	if (strcmp(commando, "GET_MODE") == 0)
     6d4:	ce 01       	movw	r24, r28
     6d6:	01 96       	adiw	r24, 0x01	; 1
     6d8:	62 ea       	ldi	r22, 0xA2	; 162
     6da:	71 e0       	ldi	r23, 0x01	; 1
     6dc:	0e 94 be 09 	call	0x137c	; 0x137c <strcmp>
     6e0:	28 2f       	mov	r18, r24
     6e2:	39 2f       	mov	r19, r25
     6e4:	21 15       	cp	r18, r1
     6e6:	31 05       	cpc	r19, r1
     6e8:	09 f0       	breq	.+2      	; 0x6ec <read_command+0x284>
     6ea:	4b c0       	rjmp	.+150    	; 0x782 <read_command+0x31a>
	{
		if (get_shutter_mode()==MANUAL || get_shutter_mode() == AUTO)
     6ec:	0e 94 c4 01 	call	0x388	; 0x388 <get_shutter_mode>
     6f0:	88 23       	and	r24, r24
     6f2:	11 f0       	breq	.+4      	; 0x6f8 <read_command+0x290>
     6f4:	81 30       	cpi	r24, 0x01	; 1
     6f6:	19 f5       	brne	.+70     	; 0x73e <read_command+0x2d6>
		{
			sprintf(response, "OK %i", get_shutter_mode());
     6f8:	00 d0       	rcall	.+0      	; 0x6fa <read_command+0x292>
     6fa:	00 d0       	rcall	.+0      	; 0x6fc <read_command+0x294>
     6fc:	00 d0       	rcall	.+0      	; 0x6fe <read_command+0x296>
     6fe:	ed b7       	in	r30, 0x3d	; 61
     700:	fe b7       	in	r31, 0x3e	; 62
     702:	31 96       	adiw	r30, 0x01	; 1
     704:	8e 01       	movw	r16, r28
     706:	0f 5a       	subi	r16, 0xAF	; 175
     708:	1f 4f       	sbci	r17, 0xFF	; 255
     70a:	ad b7       	in	r26, 0x3d	; 61
     70c:	be b7       	in	r27, 0x3e	; 62
     70e:	12 96       	adiw	r26, 0x02	; 2
     710:	1c 93       	st	X, r17
     712:	0e 93       	st	-X, r16
     714:	11 97       	sbiw	r26, 0x01	; 1
     716:	25 e7       	ldi	r18, 0x75	; 117
     718:	31 e0       	ldi	r19, 0x01	; 1
     71a:	33 83       	std	Z+3, r19	; 0x03
     71c:	22 83       	std	Z+2, r18	; 0x02
     71e:	84 83       	std	Z+4, r24	; 0x04
     720:	15 82       	std	Z+5, r1	; 0x05
     722:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <sprintf>
			write_ser(response);
     726:	ed b7       	in	r30, 0x3d	; 61
     728:	fe b7       	in	r31, 0x3e	; 62
     72a:	36 96       	adiw	r30, 0x06	; 6
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	fe bf       	out	0x3e, r31	; 62
     732:	0f be       	out	0x3f, r0	; 63
     734:	ed bf       	out	0x3d, r30	; 61
     736:	c8 01       	movw	r24, r16
     738:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
	}

	if (strcmp(commando, "GET_MODE") == 0)
	{
		if (get_shutter_mode()==MANUAL || get_shutter_mode() == AUTO)
		{
     73c:	22 c0       	rjmp	.+68     	; 0x782 <read_command+0x31a>
			sprintf(response, "OK %i", get_shutter_mode());
			write_ser(response);
		}
		else
		{
			sprintf(response, "ERROR 601: Unrecognized mode %i", get_shutter_mode());
     73e:	00 d0       	rcall	.+0      	; 0x740 <read_command+0x2d8>
     740:	00 d0       	rcall	.+0      	; 0x742 <read_command+0x2da>
     742:	00 d0       	rcall	.+0      	; 0x744 <read_command+0x2dc>
     744:	ed b7       	in	r30, 0x3d	; 61
     746:	fe b7       	in	r31, 0x3e	; 62
     748:	31 96       	adiw	r30, 0x01	; 1
     74a:	8e 01       	movw	r16, r28
     74c:	0f 5a       	subi	r16, 0xAF	; 175
     74e:	1f 4f       	sbci	r17, 0xFF	; 255
     750:	ad b7       	in	r26, 0x3d	; 61
     752:	be b7       	in	r27, 0x3e	; 62
     754:	12 96       	adiw	r26, 0x02	; 2
     756:	1c 93       	st	X, r17
     758:	0e 93       	st	-X, r16
     75a:	11 97       	sbiw	r26, 0x01	; 1
     75c:	2b ea       	ldi	r18, 0xAB	; 171
     75e:	31 e0       	ldi	r19, 0x01	; 1
     760:	33 83       	std	Z+3, r19	; 0x03
     762:	22 83       	std	Z+2, r18	; 0x02
     764:	84 83       	std	Z+4, r24	; 0x04
     766:	15 82       	std	Z+5, r1	; 0x05
     768:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <sprintf>
			write_ser(response);
     76c:	ed b7       	in	r30, 0x3d	; 61
     76e:	fe b7       	in	r31, 0x3e	; 62
     770:	36 96       	adiw	r30, 0x06	; 6
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	f8 94       	cli
     776:	fe bf       	out	0x3e, r31	; 62
     778:	0f be       	out	0x3f, r0	; 63
     77a:	ed bf       	out	0x3d, r30	; 61
     77c:	c8 01       	movw	r24, r16
     77e:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
		}
	}

	if (strcmp(commando, "GET_THS_TEMP") == 0)
     782:	ce 01       	movw	r24, r28
     784:	01 96       	adiw	r24, 0x01	; 1
     786:	6b ec       	ldi	r22, 0xCB	; 203
     788:	71 e0       	ldi	r23, 0x01	; 1
     78a:	0e 94 be 09 	call	0x137c	; 0x137c <strcmp>
     78e:	28 2f       	mov	r18, r24
     790:	39 2f       	mov	r19, r25
     792:	21 15       	cp	r18, r1
     794:	31 05       	cpc	r19, r1
     796:	b1 f5       	brne	.+108    	; 0x804 <read_command+0x39c>
	{
		if (get_ths_temp()!=NULL)
     798:	0e 94 c9 01 	call	0x392	; 0x392 <get_ths_temp>
     79c:	00 97       	sbiw	r24, 0x00	; 0
     79e:	19 f1       	breq	.+70     	; 0x7e6 <read_command+0x37e>
		{
			sprintf(response, "OK %i", get_ths_temp());
     7a0:	00 d0       	rcall	.+0      	; 0x7a2 <read_command+0x33a>
     7a2:	00 d0       	rcall	.+0      	; 0x7a4 <read_command+0x33c>
     7a4:	00 d0       	rcall	.+0      	; 0x7a6 <read_command+0x33e>
     7a6:	ed b7       	in	r30, 0x3d	; 61
     7a8:	fe b7       	in	r31, 0x3e	; 62
     7aa:	31 96       	adiw	r30, 0x01	; 1
     7ac:	8e 01       	movw	r16, r28
     7ae:	0f 5a       	subi	r16, 0xAF	; 175
     7b0:	1f 4f       	sbci	r17, 0xFF	; 255
     7b2:	ad b7       	in	r26, 0x3d	; 61
     7b4:	be b7       	in	r27, 0x3e	; 62
     7b6:	12 96       	adiw	r26, 0x02	; 2
     7b8:	1c 93       	st	X, r17
     7ba:	0e 93       	st	-X, r16
     7bc:	11 97       	sbiw	r26, 0x01	; 1
     7be:	25 e7       	ldi	r18, 0x75	; 117
     7c0:	31 e0       	ldi	r19, 0x01	; 1
     7c2:	33 83       	std	Z+3, r19	; 0x03
     7c4:	22 83       	std	Z+2, r18	; 0x02
     7c6:	95 83       	std	Z+5, r25	; 0x05
     7c8:	84 83       	std	Z+4, r24	; 0x04
     7ca:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <sprintf>
			write_ser(response);
     7ce:	ed b7       	in	r30, 0x3d	; 61
     7d0:	fe b7       	in	r31, 0x3e	; 62
     7d2:	36 96       	adiw	r30, 0x06	; 6
     7d4:	0f b6       	in	r0, 0x3f	; 63
     7d6:	f8 94       	cli
     7d8:	fe bf       	out	0x3e, r31	; 62
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	ed bf       	out	0x3d, r30	; 61
     7de:	c8 01       	movw	r24, r16
     7e0:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
     7e4:	0f c0       	rjmp	.+30     	; 0x804 <read_command+0x39c>
		}
		else
		{
			sprintf(response, "ERROR 442: Could not read value");
     7e6:	de 01       	movw	r26, r28
     7e8:	af 5a       	subi	r26, 0xAF	; 175
     7ea:	bf 4f       	sbci	r27, 0xFF	; 255
     7ec:	e8 ed       	ldi	r30, 0xD8	; 216
     7ee:	f1 e0       	ldi	r31, 0x01	; 1
     7f0:	80 e2       	ldi	r24, 0x20	; 32
     7f2:	01 90       	ld	r0, Z+
     7f4:	0d 92       	st	X+, r0
     7f6:	81 50       	subi	r24, 0x01	; 1
     7f8:	e1 f7       	brne	.-8      	; 0x7f2 <read_command+0x38a>
			write_ser(response);
     7fa:	ce 01       	movw	r24, r28
     7fc:	8f 5a       	subi	r24, 0xAF	; 175
     7fe:	9f 4f       	sbci	r25, 0xFF	; 255
     800:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
		}
	}

	if (strcmp(commando, "GET_THS_DIST") == 0)
     804:	ce 01       	movw	r24, r28
     806:	01 96       	adiw	r24, 0x01	; 1
     808:	68 ef       	ldi	r22, 0xF8	; 248
     80a:	71 e0       	ldi	r23, 0x01	; 1
     80c:	0e 94 be 09 	call	0x137c	; 0x137c <strcmp>
     810:	28 2f       	mov	r18, r24
     812:	39 2f       	mov	r19, r25
     814:	21 15       	cp	r18, r1
     816:	31 05       	cpc	r19, r1
     818:	b9 f5       	brne	.+110    	; 0x888 <read_command+0x420>
	{
		if (get_ths_dist()!=NULL)
     81a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <get_ths_dist>
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	00 97       	sbiw	r24, 0x00	; 0
     822:	19 f1       	breq	.+70     	; 0x86a <read_command+0x402>
		{
			sprintf(response, "OK %i", get_ths_dist());
     824:	00 d0       	rcall	.+0      	; 0x826 <read_command+0x3be>
     826:	00 d0       	rcall	.+0      	; 0x828 <read_command+0x3c0>
     828:	00 d0       	rcall	.+0      	; 0x82a <read_command+0x3c2>
     82a:	ed b7       	in	r30, 0x3d	; 61
     82c:	fe b7       	in	r31, 0x3e	; 62
     82e:	31 96       	adiw	r30, 0x01	; 1
     830:	8e 01       	movw	r16, r28
     832:	0f 5a       	subi	r16, 0xAF	; 175
     834:	1f 4f       	sbci	r17, 0xFF	; 255
     836:	ad b7       	in	r26, 0x3d	; 61
     838:	be b7       	in	r27, 0x3e	; 62
     83a:	12 96       	adiw	r26, 0x02	; 2
     83c:	1c 93       	st	X, r17
     83e:	0e 93       	st	-X, r16
     840:	11 97       	sbiw	r26, 0x01	; 1
     842:	25 e7       	ldi	r18, 0x75	; 117
     844:	31 e0       	ldi	r19, 0x01	; 1
     846:	33 83       	std	Z+3, r19	; 0x03
     848:	22 83       	std	Z+2, r18	; 0x02
     84a:	95 83       	std	Z+5, r25	; 0x05
     84c:	84 83       	std	Z+4, r24	; 0x04
     84e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <sprintf>
			write_ser(response);
     852:	ed b7       	in	r30, 0x3d	; 61
     854:	fe b7       	in	r31, 0x3e	; 62
     856:	36 96       	adiw	r30, 0x06	; 6
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	f8 94       	cli
     85c:	fe bf       	out	0x3e, r31	; 62
     85e:	0f be       	out	0x3f, r0	; 63
     860:	ed bf       	out	0x3d, r30	; 61
     862:	c8 01       	movw	r24, r16
     864:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
     868:	0f c0       	rjmp	.+30     	; 0x888 <read_command+0x420>
		}
		else
		{
			sprintf(response, "ERROR 444: Could not read value");
     86a:	de 01       	movw	r26, r28
     86c:	af 5a       	subi	r26, 0xAF	; 175
     86e:	bf 4f       	sbci	r27, 0xFF	; 255
     870:	e5 e0       	ldi	r30, 0x05	; 5
     872:	f2 e0       	ldi	r31, 0x02	; 2
     874:	80 e2       	ldi	r24, 0x20	; 32
     876:	01 90       	ld	r0, Z+
     878:	0d 92       	st	X+, r0
     87a:	81 50       	subi	r24, 0x01	; 1
     87c:	e1 f7       	brne	.-8      	; 0x876 <read_command+0x40e>
			write_ser(response);
     87e:	ce 01       	movw	r24, r28
     880:	8f 5a       	subi	r24, 0xAF	; 175
     882:	9f 4f       	sbci	r25, 0xFF	; 255
     884:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
		}
	}

	if (strcmp(commando, "GET_SENSOR_TEMP") == 0)
     888:	ce 01       	movw	r24, r28
     88a:	01 96       	adiw	r24, 0x01	; 1
     88c:	65 e2       	ldi	r22, 0x25	; 37
     88e:	72 e0       	ldi	r23, 0x02	; 2
     890:	0e 94 be 09 	call	0x137c	; 0x137c <strcmp>
     894:	28 2f       	mov	r18, r24
     896:	39 2f       	mov	r19, r25
     898:	21 15       	cp	r18, r1
     89a:	31 05       	cpc	r19, r1
     89c:	09 f0       	breq	.+2      	; 0x8a0 <read_command+0x438>
     89e:	52 c0       	rjmp	.+164    	; 0x944 <__stack+0x45>
	{
		if (read_sensor_temp()!=NULL && read_sensor_temp() <= 50)
     8a0:	0e 94 c4 07 	call	0xf88	; 0xf88 <read_sensor_temp>
     8a4:	00 97       	sbiw	r24, 0x00	; 0
     8a6:	51 f1       	breq	.+84     	; 0x8fc <read_command+0x494>
     8a8:	0e 94 c4 07 	call	0xf88	; 0xf88 <read_sensor_temp>
     8ac:	83 33       	cpi	r24, 0x33	; 51
     8ae:	91 05       	cpc	r25, r1
     8b0:	2c f5       	brge	.+74     	; 0x8fc <read_command+0x494>
		{
			sprintf(response, "OK %i", read_sensor_temp());
     8b2:	0e 94 c4 07 	call	0xf88	; 0xf88 <read_sensor_temp>
     8b6:	00 d0       	rcall	.+0      	; 0x8b8 <read_command+0x450>
     8b8:	00 d0       	rcall	.+0      	; 0x8ba <read_command+0x452>
     8ba:	00 d0       	rcall	.+0      	; 0x8bc <read_command+0x454>
     8bc:	ed b7       	in	r30, 0x3d	; 61
     8be:	fe b7       	in	r31, 0x3e	; 62
     8c0:	31 96       	adiw	r30, 0x01	; 1
     8c2:	8e 01       	movw	r16, r28
     8c4:	0f 5a       	subi	r16, 0xAF	; 175
     8c6:	1f 4f       	sbci	r17, 0xFF	; 255
     8c8:	ad b7       	in	r26, 0x3d	; 61
     8ca:	be b7       	in	r27, 0x3e	; 62
     8cc:	12 96       	adiw	r26, 0x02	; 2
     8ce:	1c 93       	st	X, r17
     8d0:	0e 93       	st	-X, r16
     8d2:	11 97       	sbiw	r26, 0x01	; 1
     8d4:	25 e7       	ldi	r18, 0x75	; 117
     8d6:	31 e0       	ldi	r19, 0x01	; 1
     8d8:	33 83       	std	Z+3, r19	; 0x03
     8da:	22 83       	std	Z+2, r18	; 0x02
     8dc:	95 83       	std	Z+5, r25	; 0x05
     8de:	84 83       	std	Z+4, r24	; 0x04
     8e0:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <sprintf>
			write_ser(response);
     8e4:	ed b7       	in	r30, 0x3d	; 61
     8e6:	fe b7       	in	r31, 0x3e	; 62
     8e8:	36 96       	adiw	r30, 0x06	; 6
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	f8 94       	cli
     8ee:	fe bf       	out	0x3e, r31	; 62
     8f0:	0f be       	out	0x3f, r0	; 63
     8f2:	ed bf       	out	0x3d, r30	; 61
     8f4:	c8 01       	movw	r24, r16
     8f6:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
	}

	if (strcmp(commando, "GET_SENSOR_TEMP") == 0)
	{
		if (read_sensor_temp()!=NULL && read_sensor_temp() <= 50)
		{
     8fa:	24 c0       	rjmp	.+72     	; 0x944 <__stack+0x45>
			sprintf(response, "OK %i", read_sensor_temp());
			write_ser(response);
		}
		else
		{
			sprintf(response, "ERROR 442: Unrealistic value %i. Sensor might be defect", read_sensor_temp());
     8fc:	0e 94 c4 07 	call	0xf88	; 0xf88 <read_sensor_temp>
     900:	00 d0       	rcall	.+0      	; 0x902 <__stack+0x3>
     902:	00 d0       	rcall	.+0      	; 0x904 <__stack+0x5>
     904:	00 d0       	rcall	.+0      	; 0x906 <__stack+0x7>
     906:	ed b7       	in	r30, 0x3d	; 61
     908:	fe b7       	in	r31, 0x3e	; 62
     90a:	31 96       	adiw	r30, 0x01	; 1
     90c:	8e 01       	movw	r16, r28
     90e:	0f 5a       	subi	r16, 0xAF	; 175
     910:	1f 4f       	sbci	r17, 0xFF	; 255
     912:	ad b7       	in	r26, 0x3d	; 61
     914:	be b7       	in	r27, 0x3e	; 62
     916:	12 96       	adiw	r26, 0x02	; 2
     918:	1c 93       	st	X, r17
     91a:	0e 93       	st	-X, r16
     91c:	11 97       	sbiw	r26, 0x01	; 1
     91e:	25 e3       	ldi	r18, 0x35	; 53
     920:	32 e0       	ldi	r19, 0x02	; 2
     922:	33 83       	std	Z+3, r19	; 0x03
     924:	22 83       	std	Z+2, r18	; 0x02
     926:	95 83       	std	Z+5, r25	; 0x05
     928:	84 83       	std	Z+4, r24	; 0x04
     92a:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <sprintf>
			write_ser(response);
     92e:	ed b7       	in	r30, 0x3d	; 61
     930:	fe b7       	in	r31, 0x3e	; 62
     932:	36 96       	adiw	r30, 0x06	; 6
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	f8 94       	cli
     938:	fe bf       	out	0x3e, r31	; 62
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	ed bf       	out	0x3d, r30	; 61
     93e:	c8 01       	movw	r24, r16
     940:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
		}
	}

	if (strcmp(commando, "GET_SENSOR_LIGHT") == 0)
     944:	ce 01       	movw	r24, r28
     946:	01 96       	adiw	r24, 0x01	; 1
     948:	6d e6       	ldi	r22, 0x6D	; 109
     94a:	72 e0       	ldi	r23, 0x02	; 2
     94c:	0e 94 be 09 	call	0x137c	; 0x137c <strcmp>
     950:	28 2f       	mov	r18, r24
     952:	39 2f       	mov	r19, r25
     954:	21 15       	cp	r18, r1
     956:	31 05       	cpc	r19, r1
     958:	09 f0       	breq	.+2      	; 0x95c <__stack+0x5d>
     95a:	53 c0       	rjmp	.+166    	; 0xa02 <__stack+0x103>
	{
		if (read_sensor_light()!=NULL && read_sensor_light() <= 255)
     95c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <read_sensor_light>
     960:	00 97       	sbiw	r24, 0x00	; 0
     962:	59 f1       	breq	.+86     	; 0x9ba <__stack+0xbb>
     964:	0e 94 78 01 	call	0x2f0	; 0x2f0 <read_sensor_light>
     968:	8f 3f       	cpi	r24, 0xFF	; 255
     96a:	91 05       	cpc	r25, r1
     96c:	09 f0       	breq	.+2      	; 0x970 <__stack+0x71>
     96e:	2c f5       	brge	.+74     	; 0x9ba <__stack+0xbb>
		{
			sprintf(response, "OK %i", read_sensor_light());
     970:	0e 94 78 01 	call	0x2f0	; 0x2f0 <read_sensor_light>
     974:	00 d0       	rcall	.+0      	; 0x976 <__stack+0x77>
     976:	00 d0       	rcall	.+0      	; 0x978 <__stack+0x79>
     978:	00 d0       	rcall	.+0      	; 0x97a <__stack+0x7b>
     97a:	ed b7       	in	r30, 0x3d	; 61
     97c:	fe b7       	in	r31, 0x3e	; 62
     97e:	31 96       	adiw	r30, 0x01	; 1
     980:	8e 01       	movw	r16, r28
     982:	0f 5a       	subi	r16, 0xAF	; 175
     984:	1f 4f       	sbci	r17, 0xFF	; 255
     986:	ad b7       	in	r26, 0x3d	; 61
     988:	be b7       	in	r27, 0x3e	; 62
     98a:	12 96       	adiw	r26, 0x02	; 2
     98c:	1c 93       	st	X, r17
     98e:	0e 93       	st	-X, r16
     990:	11 97       	sbiw	r26, 0x01	; 1
     992:	25 e7       	ldi	r18, 0x75	; 117
     994:	31 e0       	ldi	r19, 0x01	; 1
     996:	33 83       	std	Z+3, r19	; 0x03
     998:	22 83       	std	Z+2, r18	; 0x02
     99a:	95 83       	std	Z+5, r25	; 0x05
     99c:	84 83       	std	Z+4, r24	; 0x04
     99e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <sprintf>
			write_ser(response);
     9a2:	ed b7       	in	r30, 0x3d	; 61
     9a4:	fe b7       	in	r31, 0x3e	; 62
     9a6:	36 96       	adiw	r30, 0x06	; 6
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	f8 94       	cli
     9ac:	fe bf       	out	0x3e, r31	; 62
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	ed bf       	out	0x3d, r30	; 61
     9b2:	c8 01       	movw	r24, r16
     9b4:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
	}

	if (strcmp(commando, "GET_SENSOR_LIGHT") == 0)
	{
		if (read_sensor_light()!=NULL && read_sensor_light() <= 255)
		{
     9b8:	24 c0       	rjmp	.+72     	; 0xa02 <__stack+0x103>
			sprintf(response, "OK %i", read_sensor_light());
			write_ser(response);
		}
		else
		{
			sprintf(response, "ERROR 443: Unrealistic value %i. Sensor might be defect", read_sensor_light());
     9ba:	0e 94 78 01 	call	0x2f0	; 0x2f0 <read_sensor_light>
     9be:	00 d0       	rcall	.+0      	; 0x9c0 <__stack+0xc1>
     9c0:	00 d0       	rcall	.+0      	; 0x9c2 <__stack+0xc3>
     9c2:	00 d0       	rcall	.+0      	; 0x9c4 <__stack+0xc5>
     9c4:	ed b7       	in	r30, 0x3d	; 61
     9c6:	fe b7       	in	r31, 0x3e	; 62
     9c8:	31 96       	adiw	r30, 0x01	; 1
     9ca:	8e 01       	movw	r16, r28
     9cc:	0f 5a       	subi	r16, 0xAF	; 175
     9ce:	1f 4f       	sbci	r17, 0xFF	; 255
     9d0:	ad b7       	in	r26, 0x3d	; 61
     9d2:	be b7       	in	r27, 0x3e	; 62
     9d4:	12 96       	adiw	r26, 0x02	; 2
     9d6:	1c 93       	st	X, r17
     9d8:	0e 93       	st	-X, r16
     9da:	11 97       	sbiw	r26, 0x01	; 1
     9dc:	2e e7       	ldi	r18, 0x7E	; 126
     9de:	32 e0       	ldi	r19, 0x02	; 2
     9e0:	33 83       	std	Z+3, r19	; 0x03
     9e2:	22 83       	std	Z+2, r18	; 0x02
     9e4:	95 83       	std	Z+5, r25	; 0x05
     9e6:	84 83       	std	Z+4, r24	; 0x04
     9e8:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <sprintf>
			write_ser(response);
     9ec:	ed b7       	in	r30, 0x3d	; 61
     9ee:	fe b7       	in	r31, 0x3e	; 62
     9f0:	36 96       	adiw	r30, 0x06	; 6
     9f2:	0f b6       	in	r0, 0x3f	; 63
     9f4:	f8 94       	cli
     9f6:	fe bf       	out	0x3e, r31	; 62
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	ed bf       	out	0x3d, r30	; 61
     9fc:	c8 01       	movw	r24, r16
     9fe:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
		}
	}

	//If tree to handle all SETTERS
	if (strcmp(commando, "SET_NAME") == 0)
     a02:	ce 01       	movw	r24, r28
     a04:	01 96       	adiw	r24, 0x01	; 1
     a06:	66 eb       	ldi	r22, 0xB6	; 182
     a08:	72 e0       	ldi	r23, 0x02	; 2
     a0a:	0e 94 be 09 	call	0x137c	; 0x137c <strcmp>
     a0e:	28 2f       	mov	r18, r24
     a10:	39 2f       	mov	r19, r25
     a12:	21 15       	cp	r18, r1
     a14:	31 05       	cpc	r19, r1
     a16:	09 f0       	breq	.+2      	; 0xa1a <__stack+0x11b>
     a18:	5b c0       	rjmp	.+182    	; 0xad0 <__stack+0x1d1>
	{
		if (strlen(arg) > 0 && strlen(arg) <= 20)
     a1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a1c:	88 23       	and	r24, r24
     a1e:	a1 f1       	breq	.+104    	; 0xa88 <__stack+0x189>
     a20:	de 01       	movw	r26, r28
     a22:	5f 96       	adiw	r26, 0x1f	; 31
     a24:	fd 01       	movw	r30, r26
     a26:	01 90       	ld	r0, Z+
     a28:	00 20       	and	r0, r0
     a2a:	e9 f7       	brne	.-6      	; 0xa26 <__stack+0x127>
     a2c:	31 97       	sbiw	r30, 0x01	; 1
     a2e:	ea 1b       	sub	r30, r26
     a30:	fb 0b       	sbc	r31, r27
     a32:	e5 31       	cpi	r30, 0x15	; 21
     a34:	f1 05       	cpc	r31, r1
     a36:	40 f5       	brcc	.+80     	; 0xa88 <__stack+0x189>
		{
			set_arduino_name(arg);
     a38:	cd 01       	movw	r24, r26
     a3a:	0e 94 a0 01 	call	0x340	; 0x340 <set_arduino_name>
			sprintf(response, "OK %s", get_arduino_name());
     a3e:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <get_arduino_name>
     a42:	00 d0       	rcall	.+0      	; 0xa44 <__stack+0x145>
     a44:	00 d0       	rcall	.+0      	; 0xa46 <__stack+0x147>
     a46:	00 d0       	rcall	.+0      	; 0xa48 <__stack+0x149>
     a48:	ed b7       	in	r30, 0x3d	; 61
     a4a:	fe b7       	in	r31, 0x3e	; 62
     a4c:	31 96       	adiw	r30, 0x01	; 1
     a4e:	8e 01       	movw	r16, r28
     a50:	0f 5a       	subi	r16, 0xAF	; 175
     a52:	1f 4f       	sbci	r17, 0xFF	; 255
     a54:	ad b7       	in	r26, 0x3d	; 61
     a56:	be b7       	in	r27, 0x3e	; 62
     a58:	12 96       	adiw	r26, 0x02	; 2
     a5a:	1c 93       	st	X, r17
     a5c:	0e 93       	st	-X, r16
     a5e:	11 97       	sbiw	r26, 0x01	; 1
     a60:	2a e4       	ldi	r18, 0x4A	; 74
     a62:	31 e0       	ldi	r19, 0x01	; 1
     a64:	33 83       	std	Z+3, r19	; 0x03
     a66:	22 83       	std	Z+2, r18	; 0x02
     a68:	95 83       	std	Z+5, r25	; 0x05
     a6a:	84 83       	std	Z+4, r24	; 0x04
     a6c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <sprintf>
			write_ser(response);
     a70:	ed b7       	in	r30, 0x3d	; 61
     a72:	fe b7       	in	r31, 0x3e	; 62
     a74:	36 96       	adiw	r30, 0x06	; 6
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	f8 94       	cli
     a7a:	fe bf       	out	0x3e, r31	; 62
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	ed bf       	out	0x3d, r30	; 61
     a80:	c8 01       	movw	r24, r16
     a82:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>

	//If tree to handle all SETTERS
	if (strcmp(commando, "SET_NAME") == 0)
	{
		if (strlen(arg) > 0 && strlen(arg) <= 20)
		{
     a86:	24 c0       	rjmp	.+72     	; 0xad0 <__stack+0x1d1>
			sprintf(response, "OK %s", get_arduino_name());
			write_ser(response);
		}
		else
		{
			sprintf(response, "ERROR 605: Value %s not within limit 0-20", arg);
     a88:	00 d0       	rcall	.+0      	; 0xa8a <__stack+0x18b>
     a8a:	00 d0       	rcall	.+0      	; 0xa8c <__stack+0x18d>
     a8c:	00 d0       	rcall	.+0      	; 0xa8e <__stack+0x18f>
     a8e:	ed b7       	in	r30, 0x3d	; 61
     a90:	fe b7       	in	r31, 0x3e	; 62
     a92:	31 96       	adiw	r30, 0x01	; 1
     a94:	8e 01       	movw	r16, r28
     a96:	0f 5a       	subi	r16, 0xAF	; 175
     a98:	1f 4f       	sbci	r17, 0xFF	; 255
     a9a:	ad b7       	in	r26, 0x3d	; 61
     a9c:	be b7       	in	r27, 0x3e	; 62
     a9e:	12 96       	adiw	r26, 0x02	; 2
     aa0:	1c 93       	st	X, r17
     aa2:	0e 93       	st	-X, r16
     aa4:	11 97       	sbiw	r26, 0x01	; 1
     aa6:	8f eb       	ldi	r24, 0xBF	; 191
     aa8:	92 e0       	ldi	r25, 0x02	; 2
     aaa:	93 83       	std	Z+3, r25	; 0x03
     aac:	82 83       	std	Z+2, r24	; 0x02
     aae:	ce 01       	movw	r24, r28
     ab0:	4f 96       	adiw	r24, 0x1f	; 31
     ab2:	95 83       	std	Z+5, r25	; 0x05
     ab4:	84 83       	std	Z+4, r24	; 0x04
     ab6:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <sprintf>
			write_ser(response);
     aba:	ed b7       	in	r30, 0x3d	; 61
     abc:	fe b7       	in	r31, 0x3e	; 62
     abe:	36 96       	adiw	r30, 0x06	; 6
     ac0:	0f b6       	in	r0, 0x3f	; 63
     ac2:	f8 94       	cli
     ac4:	fe bf       	out	0x3e, r31	; 62
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	ed bf       	out	0x3d, r30	; 61
     aca:	c8 01       	movw	r24, r16
     acc:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
		}
	}

	if (strcmp(commando, "SET_THS_TEMP") == 0)
     ad0:	ce 01       	movw	r24, r28
     ad2:	01 96       	adiw	r24, 0x01	; 1
     ad4:	69 ee       	ldi	r22, 0xE9	; 233
     ad6:	72 e0       	ldi	r23, 0x02	; 2
     ad8:	0e 94 be 09 	call	0x137c	; 0x137c <strcmp>
     adc:	28 2f       	mov	r18, r24
     ade:	39 2f       	mov	r19, r25
     ae0:	21 15       	cp	r18, r1
     ae2:	31 05       	cpc	r19, r1
     ae4:	09 f0       	breq	.+2      	; 0xae8 <__stack+0x1e9>
     ae6:	5a c0       	rjmp	.+180    	; 0xb9c <__stack+0x29d>
	{
		if(numbers_only(arg)==1 && atoi(arg) <= 50)
     ae8:	ce 01       	movw	r24, r28
     aea:	4f 96       	adiw	r24, 0x1f	; 31
     aec:	0e 94 23 02 	call	0x446	; 0x446 <numbers_only>
     af0:	81 30       	cpi	r24, 0x01	; 1
     af2:	91 05       	cpc	r25, r1
     af4:	79 f5       	brne	.+94     	; 0xb54 <__stack+0x255>
     af6:	ce 01       	movw	r24, r28
     af8:	4f 96       	adiw	r24, 0x1f	; 31
     afa:	0e 94 a0 09 	call	0x1340	; 0x1340 <atoi>
     afe:	83 33       	cpi	r24, 0x33	; 51
     b00:	91 05       	cpc	r25, r1
     b02:	44 f5       	brge	.+80     	; 0xb54 <__stack+0x255>
		{
			uint8_t val = atoi(arg);
			set_ths_temp(val);
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 8e 01 	call	0x31c	; 0x31c <set_ths_temp>
			sprintf(response, "OK %i", get_ths_temp());
     b0a:	0e 94 c9 01 	call	0x392	; 0x392 <get_ths_temp>
     b0e:	00 d0       	rcall	.+0      	; 0xb10 <__stack+0x211>
     b10:	00 d0       	rcall	.+0      	; 0xb12 <__stack+0x213>
     b12:	00 d0       	rcall	.+0      	; 0xb14 <__stack+0x215>
     b14:	ed b7       	in	r30, 0x3d	; 61
     b16:	fe b7       	in	r31, 0x3e	; 62
     b18:	31 96       	adiw	r30, 0x01	; 1
     b1a:	8e 01       	movw	r16, r28
     b1c:	0f 5a       	subi	r16, 0xAF	; 175
     b1e:	1f 4f       	sbci	r17, 0xFF	; 255
     b20:	ad b7       	in	r26, 0x3d	; 61
     b22:	be b7       	in	r27, 0x3e	; 62
     b24:	12 96       	adiw	r26, 0x02	; 2
     b26:	1c 93       	st	X, r17
     b28:	0e 93       	st	-X, r16
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	25 e7       	ldi	r18, 0x75	; 117
     b2e:	31 e0       	ldi	r19, 0x01	; 1
     b30:	33 83       	std	Z+3, r19	; 0x03
     b32:	22 83       	std	Z+2, r18	; 0x02
     b34:	95 83       	std	Z+5, r25	; 0x05
     b36:	84 83       	std	Z+4, r24	; 0x04
     b38:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <sprintf>
			write_ser(response);
     b3c:	ed b7       	in	r30, 0x3d	; 61
     b3e:	fe b7       	in	r31, 0x3e	; 62
     b40:	36 96       	adiw	r30, 0x06	; 6
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	f8 94       	cli
     b46:	fe bf       	out	0x3e, r31	; 62
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	ed bf       	out	0x3d, r30	; 61
     b4c:	c8 01       	movw	r24, r16
     b4e:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
	}

	if (strcmp(commando, "SET_THS_TEMP") == 0)
	{
		if(numbers_only(arg)==1 && atoi(arg) <= 50)
		{
     b52:	24 c0       	rjmp	.+72     	; 0xb9c <__stack+0x29d>
			sprintf(response, "OK %i", get_ths_temp());
			write_ser(response);
		}
		else
		{
			sprintf(response, "ERROR 106: Invalid value %s", arg);
     b54:	00 d0       	rcall	.+0      	; 0xb56 <__stack+0x257>
     b56:	00 d0       	rcall	.+0      	; 0xb58 <__stack+0x259>
     b58:	00 d0       	rcall	.+0      	; 0xb5a <__stack+0x25b>
     b5a:	ed b7       	in	r30, 0x3d	; 61
     b5c:	fe b7       	in	r31, 0x3e	; 62
     b5e:	31 96       	adiw	r30, 0x01	; 1
     b60:	8e 01       	movw	r16, r28
     b62:	0f 5a       	subi	r16, 0xAF	; 175
     b64:	1f 4f       	sbci	r17, 0xFF	; 255
     b66:	ad b7       	in	r26, 0x3d	; 61
     b68:	be b7       	in	r27, 0x3e	; 62
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	1c 93       	st	X, r17
     b6e:	0e 93       	st	-X, r16
     b70:	11 97       	sbiw	r26, 0x01	; 1
     b72:	86 ef       	ldi	r24, 0xF6	; 246
     b74:	92 e0       	ldi	r25, 0x02	; 2
     b76:	93 83       	std	Z+3, r25	; 0x03
     b78:	82 83       	std	Z+2, r24	; 0x02
     b7a:	ce 01       	movw	r24, r28
     b7c:	4f 96       	adiw	r24, 0x1f	; 31
     b7e:	95 83       	std	Z+5, r25	; 0x05
     b80:	84 83       	std	Z+4, r24	; 0x04
     b82:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <sprintf>
			write_ser(response);
     b86:	ed b7       	in	r30, 0x3d	; 61
     b88:	fe b7       	in	r31, 0x3e	; 62
     b8a:	36 96       	adiw	r30, 0x06	; 6
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	f8 94       	cli
     b90:	fe bf       	out	0x3e, r31	; 62
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	ed bf       	out	0x3d, r30	; 61
     b96:	c8 01       	movw	r24, r16
     b98:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
		}
	}

	if (strcmp(commando, "SET_THS_DIST") == 0)
     b9c:	ce 01       	movw	r24, r28
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	62 e1       	ldi	r22, 0x12	; 18
     ba2:	73 e0       	ldi	r23, 0x03	; 3
     ba4:	0e 94 be 09 	call	0x137c	; 0x137c <strcmp>
     ba8:	28 2f       	mov	r18, r24
     baa:	39 2f       	mov	r19, r25
     bac:	21 15       	cp	r18, r1
     bae:	31 05       	cpc	r19, r1
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <__stack+0x2b5>
     bb2:	5c c0       	rjmp	.+184    	; 0xc6c <__stack+0x36d>
	{
		if(numbers_only(arg)==1 && atoi(arg) >= 3 && atoi(arg) <= 30)
     bb4:	ce 01       	movw	r24, r28
     bb6:	4f 96       	adiw	r24, 0x1f	; 31
     bb8:	0e 94 23 02 	call	0x446	; 0x446 <numbers_only>
     bbc:	81 30       	cpi	r24, 0x01	; 1
     bbe:	91 05       	cpc	r25, r1
     bc0:	89 f5       	brne	.+98     	; 0xc24 <__stack+0x325>
     bc2:	ce 01       	movw	r24, r28
     bc4:	4f 96       	adiw	r24, 0x1f	; 31
     bc6:	0e 94 a0 09 	call	0x1340	; 0x1340 <atoi>
     bca:	83 30       	cpi	r24, 0x03	; 3
     bcc:	91 05       	cpc	r25, r1
     bce:	54 f1       	brlt	.+84     	; 0xc24 <__stack+0x325>
     bd0:	8f 31       	cpi	r24, 0x1F	; 31
     bd2:	91 05       	cpc	r25, r1
     bd4:	3c f5       	brge	.+78     	; 0xc24 <__stack+0x325>
		{
			uint8_t val = atoi(arg);
			set_ths_dist(val);
     bd6:	0e 94 9a 01 	call	0x334	; 0x334 <set_ths_dist>
			sprintf(response, "OK %i", get_ths_dist());
     bda:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <get_ths_dist>
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <__stack+0x2e1>
     be0:	00 d0       	rcall	.+0      	; 0xbe2 <__stack+0x2e3>
     be2:	00 d0       	rcall	.+0      	; 0xbe4 <__stack+0x2e5>
     be4:	ed b7       	in	r30, 0x3d	; 61
     be6:	fe b7       	in	r31, 0x3e	; 62
     be8:	31 96       	adiw	r30, 0x01	; 1
     bea:	8e 01       	movw	r16, r28
     bec:	0f 5a       	subi	r16, 0xAF	; 175
     bee:	1f 4f       	sbci	r17, 0xFF	; 255
     bf0:	ad b7       	in	r26, 0x3d	; 61
     bf2:	be b7       	in	r27, 0x3e	; 62
     bf4:	12 96       	adiw	r26, 0x02	; 2
     bf6:	1c 93       	st	X, r17
     bf8:	0e 93       	st	-X, r16
     bfa:	11 97       	sbiw	r26, 0x01	; 1
     bfc:	25 e7       	ldi	r18, 0x75	; 117
     bfe:	31 e0       	ldi	r19, 0x01	; 1
     c00:	33 83       	std	Z+3, r19	; 0x03
     c02:	22 83       	std	Z+2, r18	; 0x02
     c04:	84 83       	std	Z+4, r24	; 0x04
     c06:	15 82       	std	Z+5, r1	; 0x05
     c08:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <sprintf>
			write_ser(response);
     c0c:	ed b7       	in	r30, 0x3d	; 61
     c0e:	fe b7       	in	r31, 0x3e	; 62
     c10:	36 96       	adiw	r30, 0x06	; 6
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	fe bf       	out	0x3e, r31	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	ed bf       	out	0x3d, r30	; 61
     c1c:	c8 01       	movw	r24, r16
     c1e:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
	}

	if (strcmp(commando, "SET_THS_DIST") == 0)
	{
		if(numbers_only(arg)==1 && atoi(arg) >= 3 && atoi(arg) <= 30)
		{
     c22:	24 c0       	rjmp	.+72     	; 0xc6c <__stack+0x36d>
			sprintf(response, "OK %i", get_ths_dist());
			write_ser(response);
		}
		else
		{
			sprintf(response, "ERROR 107: Invalid value %s", arg);
     c24:	00 d0       	rcall	.+0      	; 0xc26 <__stack+0x327>
     c26:	00 d0       	rcall	.+0      	; 0xc28 <__stack+0x329>
     c28:	00 d0       	rcall	.+0      	; 0xc2a <__stack+0x32b>
     c2a:	ed b7       	in	r30, 0x3d	; 61
     c2c:	fe b7       	in	r31, 0x3e	; 62
     c2e:	31 96       	adiw	r30, 0x01	; 1
     c30:	8e 01       	movw	r16, r28
     c32:	0f 5a       	subi	r16, 0xAF	; 175
     c34:	1f 4f       	sbci	r17, 0xFF	; 255
     c36:	ad b7       	in	r26, 0x3d	; 61
     c38:	be b7       	in	r27, 0x3e	; 62
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	1c 93       	st	X, r17
     c3e:	0e 93       	st	-X, r16
     c40:	11 97       	sbiw	r26, 0x01	; 1
     c42:	8f e1       	ldi	r24, 0x1F	; 31
     c44:	93 e0       	ldi	r25, 0x03	; 3
     c46:	93 83       	std	Z+3, r25	; 0x03
     c48:	82 83       	std	Z+2, r24	; 0x02
     c4a:	ce 01       	movw	r24, r28
     c4c:	4f 96       	adiw	r24, 0x1f	; 31
     c4e:	95 83       	std	Z+5, r25	; 0x05
     c50:	84 83       	std	Z+4, r24	; 0x04
     c52:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <sprintf>
			write_ser(response);
     c56:	ed b7       	in	r30, 0x3d	; 61
     c58:	fe b7       	in	r31, 0x3e	; 62
     c5a:	36 96       	adiw	r30, 0x06	; 6
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	fe bf       	out	0x3e, r31	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	ed bf       	out	0x3d, r30	; 61
     c66:	c8 01       	movw	r24, r16
     c68:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
		}
	}

	if (strcmp(commando, "SET_STATE") == 0)
     c6c:	ce 01       	movw	r24, r28
     c6e:	01 96       	adiw	r24, 0x01	; 1
     c70:	6b e3       	ldi	r22, 0x3B	; 59
     c72:	73 e0       	ldi	r23, 0x03	; 3
     c74:	0e 94 be 09 	call	0x137c	; 0x137c <strcmp>
     c78:	28 2f       	mov	r18, r24
     c7a:	39 2f       	mov	r19, r25
     c7c:	21 15       	cp	r18, r1
     c7e:	31 05       	cpc	r19, r1
     c80:	09 f0       	breq	.+2      	; 0xc84 <__stack+0x385>
     c82:	6e c0       	rjmp	.+220    	; 0xd60 <__stack+0x461>
	{
		if (strcmp(arg, "OPEN") == 0)
     c84:	ce 01       	movw	r24, r28
     c86:	4f 96       	adiw	r24, 0x1f	; 31
     c88:	65 e4       	ldi	r22, 0x45	; 69
     c8a:	73 e0       	ldi	r23, 0x03	; 3
     c8c:	0e 94 be 09 	call	0x137c	; 0x137c <strcmp>
     c90:	28 2f       	mov	r18, r24
     c92:	39 2f       	mov	r19, r25
     c94:	21 15       	cp	r18, r1
     c96:	31 05       	cpc	r19, r1
     c98:	61 f5       	brne	.+88     	; 0xcf2 <__stack+0x3f3>
		{
			if (get_shutter_state()!=OPEN && open_screen() == 1)
     c9a:	0e 94 7d 01 	call	0x2fa	; 0x2fa <get_shutter_state>
     c9e:	81 30       	cpi	r24, 0x01	; 1
     ca0:	a9 f0       	breq	.+42     	; 0xccc <__stack+0x3cd>
     ca2:	0e 94 09 02 	call	0x412	; 0x412 <open_screen>
     ca6:	81 30       	cpi	r24, 0x01	; 1
     ca8:	91 05       	cpc	r25, r1
     caa:	81 f4       	brne	.+32     	; 0xccc <__stack+0x3cd>
			{
				sprintf(response, "OK OPENING");
     cac:	de 01       	movw	r26, r28
     cae:	af 5a       	subi	r26, 0xAF	; 175
     cb0:	bf 4f       	sbci	r27, 0xFF	; 255
     cb2:	ea e4       	ldi	r30, 0x4A	; 74
     cb4:	f3 e0       	ldi	r31, 0x03	; 3
     cb6:	8b e0       	ldi	r24, 0x0B	; 11
     cb8:	01 90       	ld	r0, Z+
     cba:	0d 92       	st	X+, r0
     cbc:	81 50       	subi	r24, 0x01	; 1
     cbe:	e1 f7       	brne	.-8      	; 0xcb8 <__stack+0x3b9>
				write_ser(response);
     cc0:	ce 01       	movw	r24, r28
     cc2:	8f 5a       	subi	r24, 0xAF	; 175
     cc4:	9f 4f       	sbci	r25, 0xFF	; 255
     cc6:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
	if (strcmp(commando, "SET_STATE") == 0)
	{
		if (strcmp(arg, "OPEN") == 0)
		{
			if (get_shutter_state()!=OPEN && open_screen() == 1)
			{
     cca:	13 c0       	rjmp	.+38     	; 0xcf2 <__stack+0x3f3>
				sprintf(response, "OK OPENING");
				write_ser(response);
			}
			else if (open_screen() == 0)
     ccc:	0e 94 09 02 	call	0x412	; 0x412 <open_screen>
     cd0:	00 97       	sbiw	r24, 0x00	; 0
     cd2:	79 f4       	brne	.+30     	; 0xcf2 <__stack+0x3f3>
			{
				sprintf(response, "ERROR 105: Could not open screen");
     cd4:	de 01       	movw	r26, r28
     cd6:	af 5a       	subi	r26, 0xAF	; 175
     cd8:	bf 4f       	sbci	r27, 0xFF	; 255
     cda:	e5 e5       	ldi	r30, 0x55	; 85
     cdc:	f3 e0       	ldi	r31, 0x03	; 3
     cde:	81 e2       	ldi	r24, 0x21	; 33
     ce0:	01 90       	ld	r0, Z+
     ce2:	0d 92       	st	X+, r0
     ce4:	81 50       	subi	r24, 0x01	; 1
     ce6:	e1 f7       	brne	.-8      	; 0xce0 <__stack+0x3e1>
				write_ser(response);
     ce8:	ce 01       	movw	r24, r28
     cea:	8f 5a       	subi	r24, 0xAF	; 175
     cec:	9f 4f       	sbci	r25, 0xFF	; 255
     cee:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
			}
		}

		if (strcmp(arg, "CLOSED") == 0)
     cf2:	ce 01       	movw	r24, r28
     cf4:	4f 96       	adiw	r24, 0x1f	; 31
     cf6:	66 e7       	ldi	r22, 0x76	; 118
     cf8:	73 e0       	ldi	r23, 0x03	; 3
     cfa:	0e 94 be 09 	call	0x137c	; 0x137c <strcmp>
     cfe:	28 2f       	mov	r18, r24
     d00:	39 2f       	mov	r19, r25
     d02:	21 15       	cp	r18, r1
     d04:	31 05       	cpc	r19, r1
     d06:	61 f5       	brne	.+88     	; 0xd60 <__stack+0x461>
		{
			if (get_shutter_state()!=CLOSED && close_screen() == 1)
     d08:	0e 94 7d 01 	call	0x2fa	; 0x2fa <get_shutter_state>
     d0c:	88 23       	and	r24, r24
     d0e:	a9 f0       	breq	.+42     	; 0xd3a <__stack+0x43b>
     d10:	0e 94 16 02 	call	0x42c	; 0x42c <close_screen>
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	91 05       	cpc	r25, r1
     d18:	81 f4       	brne	.+32     	; 0xd3a <__stack+0x43b>
			{
				sprintf(response, "OK CLOSING");
     d1a:	de 01       	movw	r26, r28
     d1c:	af 5a       	subi	r26, 0xAF	; 175
     d1e:	bf 4f       	sbci	r27, 0xFF	; 255
     d20:	ed e7       	ldi	r30, 0x7D	; 125
     d22:	f3 e0       	ldi	r31, 0x03	; 3
     d24:	8b e0       	ldi	r24, 0x0B	; 11
     d26:	01 90       	ld	r0, Z+
     d28:	0d 92       	st	X+, r0
     d2a:	81 50       	subi	r24, 0x01	; 1
     d2c:	e1 f7       	brne	.-8      	; 0xd26 <__stack+0x427>
				write_ser(response);
     d2e:	ce 01       	movw	r24, r28
     d30:	8f 5a       	subi	r24, 0xAF	; 175
     d32:	9f 4f       	sbci	r25, 0xFF	; 255
     d34:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
		}

		if (strcmp(arg, "CLOSED") == 0)
		{
			if (get_shutter_state()!=CLOSED && close_screen() == 1)
			{
     d38:	13 c0       	rjmp	.+38     	; 0xd60 <__stack+0x461>
				sprintf(response, "OK CLOSING");
				write_ser(response);
			}
			else if (close_screen() == 0)
     d3a:	0e 94 16 02 	call	0x42c	; 0x42c <close_screen>
     d3e:	00 97       	sbiw	r24, 0x00	; 0
     d40:	79 f4       	brne	.+30     	; 0xd60 <__stack+0x461>
			{
				sprintf(response, "ERROR 105: Could not close screen");
     d42:	de 01       	movw	r26, r28
     d44:	af 5a       	subi	r26, 0xAF	; 175
     d46:	bf 4f       	sbci	r27, 0xFF	; 255
     d48:	e8 e8       	ldi	r30, 0x88	; 136
     d4a:	f3 e0       	ldi	r31, 0x03	; 3
     d4c:	82 e2       	ldi	r24, 0x22	; 34
     d4e:	01 90       	ld	r0, Z+
     d50:	0d 92       	st	X+, r0
     d52:	81 50       	subi	r24, 0x01	; 1
     d54:	e1 f7       	brne	.-8      	; 0xd4e <__stack+0x44f>
				write_ser(response);
     d56:	ce 01       	movw	r24, r28
     d58:	8f 5a       	subi	r24, 0xAF	; 175
     d5a:	9f 4f       	sbci	r25, 0xFF	; 255
     d5c:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
			}
		}
	}

	if (strcmp(commando, "SET_MODE") == 0)
     d60:	ce 01       	movw	r24, r28
     d62:	01 96       	adiw	r24, 0x01	; 1
     d64:	6a ea       	ldi	r22, 0xAA	; 170
     d66:	73 e0       	ldi	r23, 0x03	; 3
     d68:	0e 94 be 09 	call	0x137c	; 0x137c <strcmp>
     d6c:	28 2f       	mov	r18, r24
     d6e:	39 2f       	mov	r19, r25
     d70:	21 15       	cp	r18, r1
     d72:	31 05       	cpc	r19, r1
     d74:	09 f0       	breq	.+2      	; 0xd78 <__stack+0x479>
     d76:	8c c0       	rjmp	.+280    	; 0xe90 <__stack+0x591>
	{
		if (strcmp(arg, "MANUAL") == 0)
     d78:	ce 01       	movw	r24, r28
     d7a:	4f 96       	adiw	r24, 0x1f	; 31
     d7c:	63 eb       	ldi	r22, 0xB3	; 179
     d7e:	73 e0       	ldi	r23, 0x03	; 3
     d80:	0e 94 be 09 	call	0x137c	; 0x137c <strcmp>
     d84:	28 2f       	mov	r18, r24
     d86:	39 2f       	mov	r19, r25
     d88:	21 15       	cp	r18, r1
     d8a:	31 05       	cpc	r19, r1
     d8c:	d9 f5       	brne	.+118    	; 0xe04 <__stack+0x505>
		{
			if (get_shutter_mode()!=MANUAL)
     d8e:	0e 94 c4 01 	call	0x388	; 0x388 <get_shutter_mode>
     d92:	88 23       	and	r24, r24
     d94:	99 f0       	breq	.+38     	; 0xdbc <__stack+0x4bd>
			{
				set_shutter_mode(MANUAL);
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	0e 94 82 01 	call	0x304	; 0x304 <set_shutter_mode>
				sprintf(response, "OK MODE MANUAL");
     d9c:	de 01       	movw	r26, r28
     d9e:	af 5a       	subi	r26, 0xAF	; 175
     da0:	bf 4f       	sbci	r27, 0xFF	; 255
     da2:	ea eb       	ldi	r30, 0xBA	; 186
     da4:	f3 e0       	ldi	r31, 0x03	; 3
     da6:	8f e0       	ldi	r24, 0x0F	; 15
     da8:	01 90       	ld	r0, Z+
     daa:	0d 92       	st	X+, r0
     dac:	81 50       	subi	r24, 0x01	; 1
     dae:	e1 f7       	brne	.-8      	; 0xda8 <__stack+0x4a9>
				write_ser(response);
     db0:	ce 01       	movw	r24, r28
     db2:	8f 5a       	subi	r24, 0xAF	; 175
     db4:	9f 4f       	sbci	r25, 0xFF	; 255
     db6:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
     dba:	24 c0       	rjmp	.+72     	; 0xe04 <__stack+0x505>
			}
			else
			{
				sprintf(response, "ERROR 441: Could not set modus %s", arg);
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <__stack+0x4bf>
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <__stack+0x4c1>
     dc0:	00 d0       	rcall	.+0      	; 0xdc2 <__stack+0x4c3>
     dc2:	ed b7       	in	r30, 0x3d	; 61
     dc4:	fe b7       	in	r31, 0x3e	; 62
     dc6:	31 96       	adiw	r30, 0x01	; 1
     dc8:	8e 01       	movw	r16, r28
     dca:	0f 5a       	subi	r16, 0xAF	; 175
     dcc:	1f 4f       	sbci	r17, 0xFF	; 255
     dce:	ad b7       	in	r26, 0x3d	; 61
     dd0:	be b7       	in	r27, 0x3e	; 62
     dd2:	12 96       	adiw	r26, 0x02	; 2
     dd4:	1c 93       	st	X, r17
     dd6:	0e 93       	st	-X, r16
     dd8:	11 97       	sbiw	r26, 0x01	; 1
     dda:	89 ec       	ldi	r24, 0xC9	; 201
     ddc:	93 e0       	ldi	r25, 0x03	; 3
     dde:	93 83       	std	Z+3, r25	; 0x03
     de0:	82 83       	std	Z+2, r24	; 0x02
     de2:	ce 01       	movw	r24, r28
     de4:	4f 96       	adiw	r24, 0x1f	; 31
     de6:	95 83       	std	Z+5, r25	; 0x05
     de8:	84 83       	std	Z+4, r24	; 0x04
     dea:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <sprintf>
				write_ser(response);
     dee:	ed b7       	in	r30, 0x3d	; 61
     df0:	fe b7       	in	r31, 0x3e	; 62
     df2:	36 96       	adiw	r30, 0x06	; 6
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	fe bf       	out	0x3e, r31	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	ed bf       	out	0x3d, r30	; 61
     dfe:	c8 01       	movw	r24, r16
     e00:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
			}
		}

		if (strcmp(arg, "AUTO") == 0)
     e04:	ce 01       	movw	r24, r28
     e06:	4f 96       	adiw	r24, 0x1f	; 31
     e08:	6b ee       	ldi	r22, 0xEB	; 235
     e0a:	73 e0       	ldi	r23, 0x03	; 3
     e0c:	0e 94 be 09 	call	0x137c	; 0x137c <strcmp>
     e10:	28 2f       	mov	r18, r24
     e12:	39 2f       	mov	r19, r25
     e14:	21 15       	cp	r18, r1
     e16:	31 05       	cpc	r19, r1
     e18:	d9 f5       	brne	.+118    	; 0xe90 <__stack+0x591>
		{
			if (get_shutter_mode()!=AUTO)
     e1a:	0e 94 c4 01 	call	0x388	; 0x388 <get_shutter_mode>
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	99 f0       	breq	.+38     	; 0xe48 <__stack+0x549>
			{
				set_shutter_mode(AUTO);
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	0e 94 82 01 	call	0x304	; 0x304 <set_shutter_mode>
				sprintf(response, "OK MODE AUTO");
     e28:	de 01       	movw	r26, r28
     e2a:	af 5a       	subi	r26, 0xAF	; 175
     e2c:	bf 4f       	sbci	r27, 0xFF	; 255
     e2e:	e0 ef       	ldi	r30, 0xF0	; 240
     e30:	f3 e0       	ldi	r31, 0x03	; 3
     e32:	8d e0       	ldi	r24, 0x0D	; 13
     e34:	01 90       	ld	r0, Z+
     e36:	0d 92       	st	X+, r0
     e38:	81 50       	subi	r24, 0x01	; 1
     e3a:	e1 f7       	brne	.-8      	; 0xe34 <__stack+0x535>
				write_ser(response);
     e3c:	ce 01       	movw	r24, r28
     e3e:	8f 5a       	subi	r24, 0xAF	; 175
     e40:	9f 4f       	sbci	r25, 0xFF	; 255
     e42:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
     e46:	24 c0       	rjmp	.+72     	; 0xe90 <__stack+0x591>
			}
			else
			{
				sprintf(response, "ERROR 441: Could not set modus %s", arg);
     e48:	00 d0       	rcall	.+0      	; 0xe4a <__stack+0x54b>
     e4a:	00 d0       	rcall	.+0      	; 0xe4c <__stack+0x54d>
     e4c:	00 d0       	rcall	.+0      	; 0xe4e <__stack+0x54f>
     e4e:	ed b7       	in	r30, 0x3d	; 61
     e50:	fe b7       	in	r31, 0x3e	; 62
     e52:	31 96       	adiw	r30, 0x01	; 1
     e54:	8e 01       	movw	r16, r28
     e56:	0f 5a       	subi	r16, 0xAF	; 175
     e58:	1f 4f       	sbci	r17, 0xFF	; 255
     e5a:	ad b7       	in	r26, 0x3d	; 61
     e5c:	be b7       	in	r27, 0x3e	; 62
     e5e:	12 96       	adiw	r26, 0x02	; 2
     e60:	1c 93       	st	X, r17
     e62:	0e 93       	st	-X, r16
     e64:	11 97       	sbiw	r26, 0x01	; 1
     e66:	89 ec       	ldi	r24, 0xC9	; 201
     e68:	93 e0       	ldi	r25, 0x03	; 3
     e6a:	93 83       	std	Z+3, r25	; 0x03
     e6c:	82 83       	std	Z+2, r24	; 0x02
     e6e:	ce 01       	movw	r24, r28
     e70:	4f 96       	adiw	r24, 0x1f	; 31
     e72:	95 83       	std	Z+5, r25	; 0x05
     e74:	84 83       	std	Z+4, r24	; 0x04
     e76:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <sprintf>
				write_ser(response);
     e7a:	ed b7       	in	r30, 0x3d	; 61
     e7c:	fe b7       	in	r31, 0x3e	; 62
     e7e:	36 96       	adiw	r30, 0x06	; 6
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	fe bf       	out	0x3e, r31	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	ed bf       	out	0x3d, r30	; 61
     e8a:	c8 01       	movw	r24, r16
     e8c:	0e 94 70 07 	call	0xee0	; 0xee0 <write_ser>
			}
		}
		inputbuffer[0] = '\0';
	}
     e90:	cc 54       	subi	r28, 0x4C	; 76
     e92:	df 4f       	sbci	r29, 0xFF	; 255
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	cd bf       	out	0x3d, r28	; 61
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	1f 91       	pop	r17
     ea4:	0f 91       	pop	r16
     ea6:	ff 90       	pop	r15
     ea8:	ef 90       	pop	r14
     eaa:	df 90       	pop	r13
     eac:	cf 90       	pop	r12
     eae:	bf 90       	pop	r11
     eb0:	af 90       	pop	r10
     eb2:	08 95       	ret

00000eb4 <init_serial>:

#include "serial.h"

void init_serial() {
	//Setting baudrate
	UBRR0H = 0;
     eb4:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 103;
     eb8:	87 e6       	ldi	r24, 0x67	; 103
     eba:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0A = 0;
     ebe:	10 92 c0 00 	sts	0x00C0, r1
	
	//Set bits for RX and TX
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
     ec2:	88 e1       	ldi	r24, 0x18	; 24
     ec4:	80 93 c1 00 	sts	0x00C1, r24
	
	//Set frame: 8 databits and use 1 stopbit
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
     ec8:	86 e0       	ldi	r24, 0x06	; 6
     eca:	80 93 c2 00 	sts	0x00C2, r24
}
     ece:	08 95       	ret

00000ed0 <transmit_data>:

void transmit_data(uint8_t data) {
	//Wait for transmit buffer to be empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
     ed0:	e0 ec       	ldi	r30, 0xC0	; 192
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	90 81       	ld	r25, Z
     ed6:	95 ff       	sbrs	r25, 5
     ed8:	fd cf       	rjmp	.-6      	; 0xed4 <transmit_data+0x4>
	
	//Load new data into transmit buffer
	UDR0 = data;
     eda:	80 93 c6 00 	sts	0x00C6, r24
}
     ede:	08 95       	ret

00000ee0 <write_ser>:

void write_ser(char *data) {
     ee0:	cf 93       	push	r28
     ee2:	df 93       	push	r29
     ee4:	ec 01       	movw	r28, r24
	int i=0;
	
	//Loop until endline character is reached
	while (data[i]!='\0') {
     ee6:	88 81       	ld	r24, Y
     ee8:	88 23       	and	r24, r24
     eea:	31 f0       	breq	.+12     	; 0xef8 <write_ser+0x18>
	
	//Load new data into transmit buffer
	UDR0 = data;
}

void write_ser(char *data) {
     eec:	21 96       	adiw	r28, 0x01	; 1
	int i=0;
	
	//Loop until endline character is reached
	while (data[i]!='\0') {
		//Transmit character and go to next (i++)
		transmit_data(data[i++]);
     eee:	0e 94 68 07 	call	0xed0	; 0xed0 <transmit_data>

void write_ser(char *data) {
	int i=0;
	
	//Loop until endline character is reached
	while (data[i]!='\0') {
     ef2:	89 91       	ld	r24, Y+
     ef4:	88 23       	and	r24, r24
     ef6:	d9 f7       	brne	.-10     	; 0xeee <write_ser+0xe>
		//Transmit character and go to next (i++)
		transmit_data(data[i++]);
	}
	//transmit endmark character
	transmit_data('\0');
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	0e 94 68 07 	call	0xed0	; 0xed0 <transmit_data>
}
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	08 95       	ret

00000f04 <receive_data>:
// 	
// 	if (i==160000)
// 	{
// 		return '\r';
// 	}
	loop_until_bit_is_set(UCSR0A, RXC0);
     f04:	e0 ec       	ldi	r30, 0xC0	; 192
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	88 23       	and	r24, r24
     f0c:	ec f7       	brge	.-6      	; 0xf08 <receive_data+0x4>
	return UDR0;
     f0e:	80 91 c6 00 	lds	r24, 0x00C6
}
     f12:	08 95       	ret

00000f14 <read_ser>:

//Copy from serial.c written by Simon van der Meer
void read_ser(char* buf, int maxlength) {
     f14:	cf 92       	push	r12
     f16:	df 92       	push	r13
     f18:	ef 92       	push	r14
     f1a:	ff 92       	push	r15
     f1c:	0f 93       	push	r16
     f1e:	1f 93       	push	r17
     f20:	cf 93       	push	r28
     f22:	df 93       	push	r29
     f24:	6c 01       	movw	r12, r24
	int i=0;
     f26:	7c 01       	movw	r14, r24
     f28:	00 e0       	ldi	r16, 0x00	; 0
     f2a:	10 e0       	ldi	r17, 0x00	; 0
		
		//Bij een \r (ENTER) karakter uit de while loop gaan en \0 invoeren (einde string)
		if (c=='\r') {
			break; 
		}
		if (i<maxlength-1) {
     f2c:	eb 01       	movw	r28, r22
     f2e:	21 97       	sbiw	r28, 0x01	; 1

//Copy from serial.c written by Simon van der Meer
void read_ser(char* buf, int maxlength) {
	int i=0;
	while(1) {
		uint8_t c = receive_data();
     f30:	0e 94 82 07 	call	0xf04	; 0xf04 <receive_data>
		
		//Bij een \r (ENTER) karakter uit de while loop gaan en \0 invoeren (einde string)
		if (c=='\r') {
     f34:	8d 30       	cpi	r24, 0x0D	; 13
     f36:	49 f0       	breq	.+18     	; 0xf4a <read_ser+0x36>
			break; 
		}
		if (i<maxlength-1) {
     f38:	0c 17       	cp	r16, r28
     f3a:	1d 07       	cpc	r17, r29
     f3c:	cc f7       	brge	.-14     	; 0xf30 <read_ser+0x1c>
			buf[i++]=c;
     f3e:	f7 01       	movw	r30, r14
     f40:	81 93       	st	Z+, r24
     f42:	7f 01       	movw	r14, r30
     f44:	0f 5f       	subi	r16, 0xFF	; 255
     f46:	1f 4f       	sbci	r17, 0xFF	; 255
     f48:	f3 cf       	rjmp	.-26     	; 0xf30 <read_ser+0x1c>
		}
	}
	buf[i]='\0';
     f4a:	0c 0d       	add	r16, r12
     f4c:	1d 1d       	adc	r17, r13
     f4e:	f8 01       	movw	r30, r16
     f50:	10 82       	st	Z, r1
}
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	1f 91       	pop	r17
     f58:	0f 91       	pop	r16
     f5a:	ff 90       	pop	r15
     f5c:	ef 90       	pop	r14
     f5e:	df 90       	pop	r13
     f60:	cf 90       	pop	r12
     f62:	08 95       	ret

00000f64 <init_adc_temp>:

void init_adc_temp()
{
	// ref=Vcc, left adjust the result (8 bit resolution),
	// select channel 0 (PC1 = input)
	ADMUX = (1<<REFS0)|(1<<ADLAR);
     f64:	80 e6       	ldi	r24, 0x60	; 96
     f66:	80 93 7c 00 	sts	0x007C, r24
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     f6a:	87 e8       	ldi	r24, 0x87	; 135
     f6c:	80 93 7a 00 	sts	0x007A, r24
}
     f70:	08 95       	ret

00000f72 <get_adc_value_temp>:

uint8_t get_adc_value_temp()
{
	ADCSRA |= (1<<ADSC); // start conversion
     f72:	ea e7       	ldi	r30, 0x7A	; 122
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	80 64       	ori	r24, 0x40	; 64
     f7a:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     f7c:	80 81       	ld	r24, Z
     f7e:	86 fd       	sbrc	r24, 6
     f80:	fd cf       	rjmp	.-6      	; 0xf7c <get_adc_value_temp+0xa>
	return ADCH; // ms 8 bits
     f82:	80 91 79 00 	lds	r24, 0x0079
}
     f86:	08 95       	ret

00000f88 <read_sensor_temp>:

int8_t read_sensor_temp()
{
     f88:	cf 93       	push	r28
	int sensor_temp;
	float voltage;
	int8_t celsius;
	
	init_adc_temp();
     f8a:	0e 94 b2 07 	call	0xf64	; 0xf64 <init_adc_temp>
	sensor_temp =  get_adc_value_temp();
     f8e:	0e 94 b9 07 	call	0xf72	; 0xf72 <get_adc_value_temp>
	voltage = ((sensor_temp / 256.0)*5.015);
     f92:	68 2f       	mov	r22, r24
     f94:	70 e0       	ldi	r23, 0x00	; 0
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 9d 08 	call	0x113a	; 0x113a <__floatsisf>
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	40 e8       	ldi	r20, 0x80	; 128
     fa4:	5b e3       	ldi	r21, 0x3B	; 59
     fa6:	0e 94 29 09 	call	0x1252	; 0x1252 <__mulsf3>
     faa:	21 ee       	ldi	r18, 0xE1	; 225
     fac:	3a e7       	ldi	r19, 0x7A	; 122
     fae:	40 ea       	ldi	r20, 0xA0	; 160
     fb0:	50 e4       	ldi	r21, 0x40	; 64
     fb2:	0e 94 29 09 	call	0x1252	; 0x1252 <__mulsf3>
	celsius = ((voltage - 0.5) * 100);
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	5f e3       	ldi	r21, 0x3F	; 63
     fbe:	0e 94 05 08 	call	0x100a	; 0x100a <__subsf3>
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	48 ec       	ldi	r20, 0xC8	; 200
     fc8:	52 e4       	ldi	r21, 0x42	; 66
     fca:	0e 94 29 09 	call	0x1252	; 0x1252 <__mulsf3>
     fce:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <__fixsfsi>
     fd2:	c6 2f       	mov	r28, r22
	
	printf("Temp = %i", celsius);
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <read_sensor_temp+0x4e>
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <read_sensor_temp+0x50>
     fd8:	8d ef       	ldi	r24, 0xFD	; 253
     fda:	93 e0       	ldi	r25, 0x03	; 3
     fdc:	ed b7       	in	r30, 0x3d	; 61
     fde:	fe b7       	in	r31, 0x3e	; 62
     fe0:	92 83       	std	Z+2, r25	; 0x02
     fe2:	81 83       	std	Z+1, r24	; 0x01
     fe4:	8c 2f       	mov	r24, r28
     fe6:	99 27       	eor	r25, r25
     fe8:	87 fd       	sbrc	r24, 7
     fea:	90 95       	com	r25
     fec:	94 83       	std	Z+4, r25	; 0x04
     fee:	83 83       	std	Z+3, r24	; 0x03
     ff0:	0e 94 cf 09 	call	0x139e	; 0x139e <printf>
	printf("\n");
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	8a e0       	ldi	r24, 0x0A	; 10
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <putchar>
	
	return celsius;
}
    1004:	8c 2f       	mov	r24, r28
    1006:	cf 91       	pop	r28
    1008:	08 95       	ret

0000100a <__subsf3>:
    100a:	50 58       	subi	r21, 0x80	; 128

0000100c <__addsf3>:
    100c:	bb 27       	eor	r27, r27
    100e:	aa 27       	eor	r26, r26
    1010:	0e d0       	rcall	.+28     	; 0x102e <__addsf3x>
    1012:	e5 c0       	rjmp	.+458    	; 0x11de <__fp_round>
    1014:	d6 d0       	rcall	.+428    	; 0x11c2 <__fp_pscA>
    1016:	30 f0       	brcs	.+12     	; 0x1024 <__addsf3+0x18>
    1018:	db d0       	rcall	.+438    	; 0x11d0 <__fp_pscB>
    101a:	20 f0       	brcs	.+8      	; 0x1024 <__addsf3+0x18>
    101c:	31 f4       	brne	.+12     	; 0x102a <__addsf3+0x1e>
    101e:	9f 3f       	cpi	r25, 0xFF	; 255
    1020:	11 f4       	brne	.+4      	; 0x1026 <__addsf3+0x1a>
    1022:	1e f4       	brtc	.+6      	; 0x102a <__addsf3+0x1e>
    1024:	cb c0       	rjmp	.+406    	; 0x11bc <__fp_nan>
    1026:	0e f4       	brtc	.+2      	; 0x102a <__addsf3+0x1e>
    1028:	e0 95       	com	r30
    102a:	e7 fb       	bst	r30, 7
    102c:	c1 c0       	rjmp	.+386    	; 0x11b0 <__fp_inf>

0000102e <__addsf3x>:
    102e:	e9 2f       	mov	r30, r25
    1030:	e7 d0       	rcall	.+462    	; 0x1200 <__fp_split3>
    1032:	80 f3       	brcs	.-32     	; 0x1014 <__addsf3+0x8>
    1034:	ba 17       	cp	r27, r26
    1036:	62 07       	cpc	r22, r18
    1038:	73 07       	cpc	r23, r19
    103a:	84 07       	cpc	r24, r20
    103c:	95 07       	cpc	r25, r21
    103e:	18 f0       	brcs	.+6      	; 0x1046 <__addsf3x+0x18>
    1040:	71 f4       	brne	.+28     	; 0x105e <__addsf3x+0x30>
    1042:	9e f5       	brtc	.+102    	; 0x10aa <__addsf3x+0x7c>
    1044:	ff c0       	rjmp	.+510    	; 0x1244 <__fp_zero>
    1046:	0e f4       	brtc	.+2      	; 0x104a <__addsf3x+0x1c>
    1048:	e0 95       	com	r30
    104a:	0b 2e       	mov	r0, r27
    104c:	ba 2f       	mov	r27, r26
    104e:	a0 2d       	mov	r26, r0
    1050:	0b 01       	movw	r0, r22
    1052:	b9 01       	movw	r22, r18
    1054:	90 01       	movw	r18, r0
    1056:	0c 01       	movw	r0, r24
    1058:	ca 01       	movw	r24, r20
    105a:	a0 01       	movw	r20, r0
    105c:	11 24       	eor	r1, r1
    105e:	ff 27       	eor	r31, r31
    1060:	59 1b       	sub	r21, r25
    1062:	99 f0       	breq	.+38     	; 0x108a <__addsf3x+0x5c>
    1064:	59 3f       	cpi	r21, 0xF9	; 249
    1066:	50 f4       	brcc	.+20     	; 0x107c <__addsf3x+0x4e>
    1068:	50 3e       	cpi	r21, 0xE0	; 224
    106a:	68 f1       	brcs	.+90     	; 0x10c6 <__addsf3x+0x98>
    106c:	1a 16       	cp	r1, r26
    106e:	f0 40       	sbci	r31, 0x00	; 0
    1070:	a2 2f       	mov	r26, r18
    1072:	23 2f       	mov	r18, r19
    1074:	34 2f       	mov	r19, r20
    1076:	44 27       	eor	r20, r20
    1078:	58 5f       	subi	r21, 0xF8	; 248
    107a:	f3 cf       	rjmp	.-26     	; 0x1062 <__addsf3x+0x34>
    107c:	46 95       	lsr	r20
    107e:	37 95       	ror	r19
    1080:	27 95       	ror	r18
    1082:	a7 95       	ror	r26
    1084:	f0 40       	sbci	r31, 0x00	; 0
    1086:	53 95       	inc	r21
    1088:	c9 f7       	brne	.-14     	; 0x107c <__addsf3x+0x4e>
    108a:	7e f4       	brtc	.+30     	; 0x10aa <__addsf3x+0x7c>
    108c:	1f 16       	cp	r1, r31
    108e:	ba 0b       	sbc	r27, r26
    1090:	62 0b       	sbc	r22, r18
    1092:	73 0b       	sbc	r23, r19
    1094:	84 0b       	sbc	r24, r20
    1096:	ba f0       	brmi	.+46     	; 0x10c6 <__addsf3x+0x98>
    1098:	91 50       	subi	r25, 0x01	; 1
    109a:	a1 f0       	breq	.+40     	; 0x10c4 <__addsf3x+0x96>
    109c:	ff 0f       	add	r31, r31
    109e:	bb 1f       	adc	r27, r27
    10a0:	66 1f       	adc	r22, r22
    10a2:	77 1f       	adc	r23, r23
    10a4:	88 1f       	adc	r24, r24
    10a6:	c2 f7       	brpl	.-16     	; 0x1098 <__addsf3x+0x6a>
    10a8:	0e c0       	rjmp	.+28     	; 0x10c6 <__addsf3x+0x98>
    10aa:	ba 0f       	add	r27, r26
    10ac:	62 1f       	adc	r22, r18
    10ae:	73 1f       	adc	r23, r19
    10b0:	84 1f       	adc	r24, r20
    10b2:	48 f4       	brcc	.+18     	; 0x10c6 <__addsf3x+0x98>
    10b4:	87 95       	ror	r24
    10b6:	77 95       	ror	r23
    10b8:	67 95       	ror	r22
    10ba:	b7 95       	ror	r27
    10bc:	f7 95       	ror	r31
    10be:	9e 3f       	cpi	r25, 0xFE	; 254
    10c0:	08 f0       	brcs	.+2      	; 0x10c4 <__addsf3x+0x96>
    10c2:	b3 cf       	rjmp	.-154    	; 0x102a <__addsf3+0x1e>
    10c4:	93 95       	inc	r25
    10c6:	88 0f       	add	r24, r24
    10c8:	08 f0       	brcs	.+2      	; 0x10cc <__addsf3x+0x9e>
    10ca:	99 27       	eor	r25, r25
    10cc:	ee 0f       	add	r30, r30
    10ce:	97 95       	ror	r25
    10d0:	87 95       	ror	r24
    10d2:	08 95       	ret

000010d4 <__fixsfsi>:
    10d4:	04 d0       	rcall	.+8      	; 0x10de <__fixunssfsi>
    10d6:	68 94       	set
    10d8:	b1 11       	cpse	r27, r1
    10da:	b5 c0       	rjmp	.+362    	; 0x1246 <__fp_szero>
    10dc:	08 95       	ret

000010de <__fixunssfsi>:
    10de:	98 d0       	rcall	.+304    	; 0x1210 <__fp_splitA>
    10e0:	88 f0       	brcs	.+34     	; 0x1104 <__fixunssfsi+0x26>
    10e2:	9f 57       	subi	r25, 0x7F	; 127
    10e4:	90 f0       	brcs	.+36     	; 0x110a <__fixunssfsi+0x2c>
    10e6:	b9 2f       	mov	r27, r25
    10e8:	99 27       	eor	r25, r25
    10ea:	b7 51       	subi	r27, 0x17	; 23
    10ec:	a0 f0       	brcs	.+40     	; 0x1116 <__fixunssfsi+0x38>
    10ee:	d1 f0       	breq	.+52     	; 0x1124 <__fixunssfsi+0x46>
    10f0:	66 0f       	add	r22, r22
    10f2:	77 1f       	adc	r23, r23
    10f4:	88 1f       	adc	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	1a f0       	brmi	.+6      	; 0x1100 <__fixunssfsi+0x22>
    10fa:	ba 95       	dec	r27
    10fc:	c9 f7       	brne	.-14     	; 0x10f0 <__fixunssfsi+0x12>
    10fe:	12 c0       	rjmp	.+36     	; 0x1124 <__fixunssfsi+0x46>
    1100:	b1 30       	cpi	r27, 0x01	; 1
    1102:	81 f0       	breq	.+32     	; 0x1124 <__fixunssfsi+0x46>
    1104:	9f d0       	rcall	.+318    	; 0x1244 <__fp_zero>
    1106:	b1 e0       	ldi	r27, 0x01	; 1
    1108:	08 95       	ret
    110a:	9c c0       	rjmp	.+312    	; 0x1244 <__fp_zero>
    110c:	67 2f       	mov	r22, r23
    110e:	78 2f       	mov	r23, r24
    1110:	88 27       	eor	r24, r24
    1112:	b8 5f       	subi	r27, 0xF8	; 248
    1114:	39 f0       	breq	.+14     	; 0x1124 <__fixunssfsi+0x46>
    1116:	b9 3f       	cpi	r27, 0xF9	; 249
    1118:	cc f3       	brlt	.-14     	; 0x110c <__fixunssfsi+0x2e>
    111a:	86 95       	lsr	r24
    111c:	77 95       	ror	r23
    111e:	67 95       	ror	r22
    1120:	b3 95       	inc	r27
    1122:	d9 f7       	brne	.-10     	; 0x111a <__fixunssfsi+0x3c>
    1124:	3e f4       	brtc	.+14     	; 0x1134 <__fixunssfsi+0x56>
    1126:	90 95       	com	r25
    1128:	80 95       	com	r24
    112a:	70 95       	com	r23
    112c:	61 95       	neg	r22
    112e:	7f 4f       	sbci	r23, 0xFF	; 255
    1130:	8f 4f       	sbci	r24, 0xFF	; 255
    1132:	9f 4f       	sbci	r25, 0xFF	; 255
    1134:	08 95       	ret

00001136 <__floatunsisf>:
    1136:	e8 94       	clt
    1138:	09 c0       	rjmp	.+18     	; 0x114c <__floatsisf+0x12>

0000113a <__floatsisf>:
    113a:	97 fb       	bst	r25, 7
    113c:	3e f4       	brtc	.+14     	; 0x114c <__floatsisf+0x12>
    113e:	90 95       	com	r25
    1140:	80 95       	com	r24
    1142:	70 95       	com	r23
    1144:	61 95       	neg	r22
    1146:	7f 4f       	sbci	r23, 0xFF	; 255
    1148:	8f 4f       	sbci	r24, 0xFF	; 255
    114a:	9f 4f       	sbci	r25, 0xFF	; 255
    114c:	99 23       	and	r25, r25
    114e:	a9 f0       	breq	.+42     	; 0x117a <__floatsisf+0x40>
    1150:	f9 2f       	mov	r31, r25
    1152:	96 e9       	ldi	r25, 0x96	; 150
    1154:	bb 27       	eor	r27, r27
    1156:	93 95       	inc	r25
    1158:	f6 95       	lsr	r31
    115a:	87 95       	ror	r24
    115c:	77 95       	ror	r23
    115e:	67 95       	ror	r22
    1160:	b7 95       	ror	r27
    1162:	f1 11       	cpse	r31, r1
    1164:	f8 cf       	rjmp	.-16     	; 0x1156 <__floatsisf+0x1c>
    1166:	fa f4       	brpl	.+62     	; 0x11a6 <__floatsisf+0x6c>
    1168:	bb 0f       	add	r27, r27
    116a:	11 f4       	brne	.+4      	; 0x1170 <__floatsisf+0x36>
    116c:	60 ff       	sbrs	r22, 0
    116e:	1b c0       	rjmp	.+54     	; 0x11a6 <__floatsisf+0x6c>
    1170:	6f 5f       	subi	r22, 0xFF	; 255
    1172:	7f 4f       	sbci	r23, 0xFF	; 255
    1174:	8f 4f       	sbci	r24, 0xFF	; 255
    1176:	9f 4f       	sbci	r25, 0xFF	; 255
    1178:	16 c0       	rjmp	.+44     	; 0x11a6 <__floatsisf+0x6c>
    117a:	88 23       	and	r24, r24
    117c:	11 f0       	breq	.+4      	; 0x1182 <__floatsisf+0x48>
    117e:	96 e9       	ldi	r25, 0x96	; 150
    1180:	11 c0       	rjmp	.+34     	; 0x11a4 <__floatsisf+0x6a>
    1182:	77 23       	and	r23, r23
    1184:	21 f0       	breq	.+8      	; 0x118e <__floatsisf+0x54>
    1186:	9e e8       	ldi	r25, 0x8E	; 142
    1188:	87 2f       	mov	r24, r23
    118a:	76 2f       	mov	r23, r22
    118c:	05 c0       	rjmp	.+10     	; 0x1198 <__floatsisf+0x5e>
    118e:	66 23       	and	r22, r22
    1190:	71 f0       	breq	.+28     	; 0x11ae <__floatsisf+0x74>
    1192:	96 e8       	ldi	r25, 0x86	; 134
    1194:	86 2f       	mov	r24, r22
    1196:	70 e0       	ldi	r23, 0x00	; 0
    1198:	60 e0       	ldi	r22, 0x00	; 0
    119a:	2a f0       	brmi	.+10     	; 0x11a6 <__floatsisf+0x6c>
    119c:	9a 95       	dec	r25
    119e:	66 0f       	add	r22, r22
    11a0:	77 1f       	adc	r23, r23
    11a2:	88 1f       	adc	r24, r24
    11a4:	da f7       	brpl	.-10     	; 0x119c <__floatsisf+0x62>
    11a6:	88 0f       	add	r24, r24
    11a8:	96 95       	lsr	r25
    11aa:	87 95       	ror	r24
    11ac:	97 f9       	bld	r25, 7
    11ae:	08 95       	ret

000011b0 <__fp_inf>:
    11b0:	97 f9       	bld	r25, 7
    11b2:	9f 67       	ori	r25, 0x7F	; 127
    11b4:	80 e8       	ldi	r24, 0x80	; 128
    11b6:	70 e0       	ldi	r23, 0x00	; 0
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	08 95       	ret

000011bc <__fp_nan>:
    11bc:	9f ef       	ldi	r25, 0xFF	; 255
    11be:	80 ec       	ldi	r24, 0xC0	; 192
    11c0:	08 95       	ret

000011c2 <__fp_pscA>:
    11c2:	00 24       	eor	r0, r0
    11c4:	0a 94       	dec	r0
    11c6:	16 16       	cp	r1, r22
    11c8:	17 06       	cpc	r1, r23
    11ca:	18 06       	cpc	r1, r24
    11cc:	09 06       	cpc	r0, r25
    11ce:	08 95       	ret

000011d0 <__fp_pscB>:
    11d0:	00 24       	eor	r0, r0
    11d2:	0a 94       	dec	r0
    11d4:	12 16       	cp	r1, r18
    11d6:	13 06       	cpc	r1, r19
    11d8:	14 06       	cpc	r1, r20
    11da:	05 06       	cpc	r0, r21
    11dc:	08 95       	ret

000011de <__fp_round>:
    11de:	09 2e       	mov	r0, r25
    11e0:	03 94       	inc	r0
    11e2:	00 0c       	add	r0, r0
    11e4:	11 f4       	brne	.+4      	; 0x11ea <__fp_round+0xc>
    11e6:	88 23       	and	r24, r24
    11e8:	52 f0       	brmi	.+20     	; 0x11fe <__fp_round+0x20>
    11ea:	bb 0f       	add	r27, r27
    11ec:	40 f4       	brcc	.+16     	; 0x11fe <__fp_round+0x20>
    11ee:	bf 2b       	or	r27, r31
    11f0:	11 f4       	brne	.+4      	; 0x11f6 <__fp_round+0x18>
    11f2:	60 ff       	sbrs	r22, 0
    11f4:	04 c0       	rjmp	.+8      	; 0x11fe <__fp_round+0x20>
    11f6:	6f 5f       	subi	r22, 0xFF	; 255
    11f8:	7f 4f       	sbci	r23, 0xFF	; 255
    11fa:	8f 4f       	sbci	r24, 0xFF	; 255
    11fc:	9f 4f       	sbci	r25, 0xFF	; 255
    11fe:	08 95       	ret

00001200 <__fp_split3>:
    1200:	57 fd       	sbrc	r21, 7
    1202:	90 58       	subi	r25, 0x80	; 128
    1204:	44 0f       	add	r20, r20
    1206:	55 1f       	adc	r21, r21
    1208:	59 f0       	breq	.+22     	; 0x1220 <__fp_splitA+0x10>
    120a:	5f 3f       	cpi	r21, 0xFF	; 255
    120c:	71 f0       	breq	.+28     	; 0x122a <__fp_splitA+0x1a>
    120e:	47 95       	ror	r20

00001210 <__fp_splitA>:
    1210:	88 0f       	add	r24, r24
    1212:	97 fb       	bst	r25, 7
    1214:	99 1f       	adc	r25, r25
    1216:	61 f0       	breq	.+24     	; 0x1230 <__fp_splitA+0x20>
    1218:	9f 3f       	cpi	r25, 0xFF	; 255
    121a:	79 f0       	breq	.+30     	; 0x123a <__fp_splitA+0x2a>
    121c:	87 95       	ror	r24
    121e:	08 95       	ret
    1220:	12 16       	cp	r1, r18
    1222:	13 06       	cpc	r1, r19
    1224:	14 06       	cpc	r1, r20
    1226:	55 1f       	adc	r21, r21
    1228:	f2 cf       	rjmp	.-28     	; 0x120e <__fp_split3+0xe>
    122a:	46 95       	lsr	r20
    122c:	f1 df       	rcall	.-30     	; 0x1210 <__fp_splitA>
    122e:	08 c0       	rjmp	.+16     	; 0x1240 <__fp_splitA+0x30>
    1230:	16 16       	cp	r1, r22
    1232:	17 06       	cpc	r1, r23
    1234:	18 06       	cpc	r1, r24
    1236:	99 1f       	adc	r25, r25
    1238:	f1 cf       	rjmp	.-30     	; 0x121c <__fp_splitA+0xc>
    123a:	86 95       	lsr	r24
    123c:	71 05       	cpc	r23, r1
    123e:	61 05       	cpc	r22, r1
    1240:	08 94       	sec
    1242:	08 95       	ret

00001244 <__fp_zero>:
    1244:	e8 94       	clt

00001246 <__fp_szero>:
    1246:	bb 27       	eor	r27, r27
    1248:	66 27       	eor	r22, r22
    124a:	77 27       	eor	r23, r23
    124c:	cb 01       	movw	r24, r22
    124e:	97 f9       	bld	r25, 7
    1250:	08 95       	ret

00001252 <__mulsf3>:
    1252:	0b d0       	rcall	.+22     	; 0x126a <__mulsf3x>
    1254:	c4 cf       	rjmp	.-120    	; 0x11de <__fp_round>
    1256:	b5 df       	rcall	.-150    	; 0x11c2 <__fp_pscA>
    1258:	28 f0       	brcs	.+10     	; 0x1264 <__mulsf3+0x12>
    125a:	ba df       	rcall	.-140    	; 0x11d0 <__fp_pscB>
    125c:	18 f0       	brcs	.+6      	; 0x1264 <__mulsf3+0x12>
    125e:	95 23       	and	r25, r21
    1260:	09 f0       	breq	.+2      	; 0x1264 <__mulsf3+0x12>
    1262:	a6 cf       	rjmp	.-180    	; 0x11b0 <__fp_inf>
    1264:	ab cf       	rjmp	.-170    	; 0x11bc <__fp_nan>
    1266:	11 24       	eor	r1, r1
    1268:	ee cf       	rjmp	.-36     	; 0x1246 <__fp_szero>

0000126a <__mulsf3x>:
    126a:	ca df       	rcall	.-108    	; 0x1200 <__fp_split3>
    126c:	a0 f3       	brcs	.-24     	; 0x1256 <__mulsf3+0x4>

0000126e <__mulsf3_pse>:
    126e:	95 9f       	mul	r25, r21
    1270:	d1 f3       	breq	.-12     	; 0x1266 <__mulsf3+0x14>
    1272:	95 0f       	add	r25, r21
    1274:	50 e0       	ldi	r21, 0x00	; 0
    1276:	55 1f       	adc	r21, r21
    1278:	62 9f       	mul	r22, r18
    127a:	f0 01       	movw	r30, r0
    127c:	72 9f       	mul	r23, r18
    127e:	bb 27       	eor	r27, r27
    1280:	f0 0d       	add	r31, r0
    1282:	b1 1d       	adc	r27, r1
    1284:	63 9f       	mul	r22, r19
    1286:	aa 27       	eor	r26, r26
    1288:	f0 0d       	add	r31, r0
    128a:	b1 1d       	adc	r27, r1
    128c:	aa 1f       	adc	r26, r26
    128e:	64 9f       	mul	r22, r20
    1290:	66 27       	eor	r22, r22
    1292:	b0 0d       	add	r27, r0
    1294:	a1 1d       	adc	r26, r1
    1296:	66 1f       	adc	r22, r22
    1298:	82 9f       	mul	r24, r18
    129a:	22 27       	eor	r18, r18
    129c:	b0 0d       	add	r27, r0
    129e:	a1 1d       	adc	r26, r1
    12a0:	62 1f       	adc	r22, r18
    12a2:	73 9f       	mul	r23, r19
    12a4:	b0 0d       	add	r27, r0
    12a6:	a1 1d       	adc	r26, r1
    12a8:	62 1f       	adc	r22, r18
    12aa:	83 9f       	mul	r24, r19
    12ac:	a0 0d       	add	r26, r0
    12ae:	61 1d       	adc	r22, r1
    12b0:	22 1f       	adc	r18, r18
    12b2:	74 9f       	mul	r23, r20
    12b4:	33 27       	eor	r19, r19
    12b6:	a0 0d       	add	r26, r0
    12b8:	61 1d       	adc	r22, r1
    12ba:	23 1f       	adc	r18, r19
    12bc:	84 9f       	mul	r24, r20
    12be:	60 0d       	add	r22, r0
    12c0:	21 1d       	adc	r18, r1
    12c2:	82 2f       	mov	r24, r18
    12c4:	76 2f       	mov	r23, r22
    12c6:	6a 2f       	mov	r22, r26
    12c8:	11 24       	eor	r1, r1
    12ca:	9f 57       	subi	r25, 0x7F	; 127
    12cc:	50 40       	sbci	r21, 0x00	; 0
    12ce:	8a f0       	brmi	.+34     	; 0x12f2 <__mulsf3_pse+0x84>
    12d0:	e1 f0       	breq	.+56     	; 0x130a <__mulsf3_pse+0x9c>
    12d2:	88 23       	and	r24, r24
    12d4:	4a f0       	brmi	.+18     	; 0x12e8 <__mulsf3_pse+0x7a>
    12d6:	ee 0f       	add	r30, r30
    12d8:	ff 1f       	adc	r31, r31
    12da:	bb 1f       	adc	r27, r27
    12dc:	66 1f       	adc	r22, r22
    12de:	77 1f       	adc	r23, r23
    12e0:	88 1f       	adc	r24, r24
    12e2:	91 50       	subi	r25, 0x01	; 1
    12e4:	50 40       	sbci	r21, 0x00	; 0
    12e6:	a9 f7       	brne	.-22     	; 0x12d2 <__mulsf3_pse+0x64>
    12e8:	9e 3f       	cpi	r25, 0xFE	; 254
    12ea:	51 05       	cpc	r21, r1
    12ec:	70 f0       	brcs	.+28     	; 0x130a <__mulsf3_pse+0x9c>
    12ee:	60 cf       	rjmp	.-320    	; 0x11b0 <__fp_inf>
    12f0:	aa cf       	rjmp	.-172    	; 0x1246 <__fp_szero>
    12f2:	5f 3f       	cpi	r21, 0xFF	; 255
    12f4:	ec f3       	brlt	.-6      	; 0x12f0 <__mulsf3_pse+0x82>
    12f6:	98 3e       	cpi	r25, 0xE8	; 232
    12f8:	dc f3       	brlt	.-10     	; 0x12f0 <__mulsf3_pse+0x82>
    12fa:	86 95       	lsr	r24
    12fc:	77 95       	ror	r23
    12fe:	67 95       	ror	r22
    1300:	b7 95       	ror	r27
    1302:	f7 95       	ror	r31
    1304:	e7 95       	ror	r30
    1306:	9f 5f       	subi	r25, 0xFF	; 255
    1308:	c1 f7       	brne	.-16     	; 0x12fa <__mulsf3_pse+0x8c>
    130a:	fe 2b       	or	r31, r30
    130c:	88 0f       	add	r24, r24
    130e:	91 1d       	adc	r25, r1
    1310:	96 95       	lsr	r25
    1312:	87 95       	ror	r24
    1314:	97 f9       	bld	r25, 7
    1316:	08 95       	ret

00001318 <__udivmodhi4>:
    1318:	aa 1b       	sub	r26, r26
    131a:	bb 1b       	sub	r27, r27
    131c:	51 e1       	ldi	r21, 0x11	; 17
    131e:	07 c0       	rjmp	.+14     	; 0x132e <__udivmodhi4_ep>

00001320 <__udivmodhi4_loop>:
    1320:	aa 1f       	adc	r26, r26
    1322:	bb 1f       	adc	r27, r27
    1324:	a6 17       	cp	r26, r22
    1326:	b7 07       	cpc	r27, r23
    1328:	10 f0       	brcs	.+4      	; 0x132e <__udivmodhi4_ep>
    132a:	a6 1b       	sub	r26, r22
    132c:	b7 0b       	sbc	r27, r23

0000132e <__udivmodhi4_ep>:
    132e:	88 1f       	adc	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	5a 95       	dec	r21
    1334:	a9 f7       	brne	.-22     	; 0x1320 <__udivmodhi4_loop>
    1336:	80 95       	com	r24
    1338:	90 95       	com	r25
    133a:	bc 01       	movw	r22, r24
    133c:	cd 01       	movw	r24, r26
    133e:	08 95       	ret

00001340 <atoi>:
    1340:	fc 01       	movw	r30, r24
    1342:	88 27       	eor	r24, r24
    1344:	99 27       	eor	r25, r25
    1346:	e8 94       	clt
    1348:	21 91       	ld	r18, Z+
    134a:	20 32       	cpi	r18, 0x20	; 32
    134c:	e9 f3       	breq	.-6      	; 0x1348 <atoi+0x8>
    134e:	29 30       	cpi	r18, 0x09	; 9
    1350:	10 f0       	brcs	.+4      	; 0x1356 <atoi+0x16>
    1352:	2e 30       	cpi	r18, 0x0E	; 14
    1354:	c8 f3       	brcs	.-14     	; 0x1348 <atoi+0x8>
    1356:	2b 32       	cpi	r18, 0x2B	; 43
    1358:	41 f0       	breq	.+16     	; 0x136a <atoi+0x2a>
    135a:	2d 32       	cpi	r18, 0x2D	; 45
    135c:	39 f4       	brne	.+14     	; 0x136c <atoi+0x2c>
    135e:	68 94       	set
    1360:	04 c0       	rjmp	.+8      	; 0x136a <atoi+0x2a>
    1362:	0e 94 c7 09 	call	0x138e	; 0x138e <__mulhi_const_10>
    1366:	82 0f       	add	r24, r18
    1368:	91 1d       	adc	r25, r1
    136a:	21 91       	ld	r18, Z+
    136c:	20 53       	subi	r18, 0x30	; 48
    136e:	2a 30       	cpi	r18, 0x0A	; 10
    1370:	c0 f3       	brcs	.-16     	; 0x1362 <atoi+0x22>
    1372:	1e f4       	brtc	.+6      	; 0x137a <atoi+0x3a>
    1374:	90 95       	com	r25
    1376:	81 95       	neg	r24
    1378:	9f 4f       	sbci	r25, 0xFF	; 255
    137a:	08 95       	ret

0000137c <strcmp>:
    137c:	fb 01       	movw	r30, r22
    137e:	dc 01       	movw	r26, r24
    1380:	8d 91       	ld	r24, X+
    1382:	01 90       	ld	r0, Z+
    1384:	80 19       	sub	r24, r0
    1386:	01 10       	cpse	r0, r1
    1388:	d9 f3       	breq	.-10     	; 0x1380 <strcmp+0x4>
    138a:	99 0b       	sbc	r25, r25
    138c:	08 95       	ret

0000138e <__mulhi_const_10>:
    138e:	7a e0       	ldi	r23, 0x0A	; 10
    1390:	97 9f       	mul	r25, r23
    1392:	90 2d       	mov	r25, r0
    1394:	87 9f       	mul	r24, r23
    1396:	80 2d       	mov	r24, r0
    1398:	91 0d       	add	r25, r1
    139a:	11 24       	eor	r1, r1
    139c:	08 95       	ret

0000139e <printf>:
    139e:	a0 e0       	ldi	r26, 0x00	; 0
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e5 ed       	ldi	r30, 0xD5	; 213
    13a4:	f9 e0       	ldi	r31, 0x09	; 9
    13a6:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__prologue_saves__+0x20>
    13aa:	fe 01       	movw	r30, r28
    13ac:	35 96       	adiw	r30, 0x05	; 5
    13ae:	61 91       	ld	r22, Z+
    13b0:	71 91       	ld	r23, Z+
    13b2:	80 91 15 04 	lds	r24, 0x0415
    13b6:	90 91 16 04 	lds	r25, 0x0416
    13ba:	af 01       	movw	r20, r30
    13bc:	0e 94 0d 0a 	call	0x141a	; 0x141a <vfprintf>
    13c0:	20 96       	adiw	r28, 0x00	; 0
    13c2:	e2 e0       	ldi	r30, 0x02	; 2
    13c4:	0c 94 d1 0c 	jmp	0x19a2	; 0x19a2 <__epilogue_restores__+0x20>

000013c8 <putchar>:
    13c8:	60 91 15 04 	lds	r22, 0x0415
    13cc:	70 91 16 04 	lds	r23, 0x0416
    13d0:	0e 94 1b 0c 	call	0x1836	; 0x1836 <fputc>
    13d4:	08 95       	ret

000013d6 <sprintf>:
    13d6:	ae e0       	ldi	r26, 0x0E	; 14
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e1 ef       	ldi	r30, 0xF1	; 241
    13dc:	f9 e0       	ldi	r31, 0x09	; 9
    13de:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <__prologue_saves__+0x1c>
    13e2:	0d 89       	ldd	r16, Y+21	; 0x15
    13e4:	1e 89       	ldd	r17, Y+22	; 0x16
    13e6:	86 e0       	ldi	r24, 0x06	; 6
    13e8:	8c 83       	std	Y+4, r24	; 0x04
    13ea:	1a 83       	std	Y+2, r17	; 0x02
    13ec:	09 83       	std	Y+1, r16	; 0x01
    13ee:	8f ef       	ldi	r24, 0xFF	; 255
    13f0:	9f e7       	ldi	r25, 0x7F	; 127
    13f2:	9e 83       	std	Y+6, r25	; 0x06
    13f4:	8d 83       	std	Y+5, r24	; 0x05
    13f6:	ae 01       	movw	r20, r28
    13f8:	47 5e       	subi	r20, 0xE7	; 231
    13fa:	5f 4f       	sbci	r21, 0xFF	; 255
    13fc:	ce 01       	movw	r24, r28
    13fe:	01 96       	adiw	r24, 0x01	; 1
    1400:	6f 89       	ldd	r22, Y+23	; 0x17
    1402:	78 8d       	ldd	r23, Y+24	; 0x18
    1404:	0e 94 0d 0a 	call	0x141a	; 0x141a <vfprintf>
    1408:	ef 81       	ldd	r30, Y+7	; 0x07
    140a:	f8 85       	ldd	r31, Y+8	; 0x08
    140c:	e0 0f       	add	r30, r16
    140e:	f1 1f       	adc	r31, r17
    1410:	10 82       	st	Z, r1
    1412:	2e 96       	adiw	r28, 0x0e	; 14
    1414:	e4 e0       	ldi	r30, 0x04	; 4
    1416:	0c 94 cf 0c 	jmp	0x199e	; 0x199e <__epilogue_restores__+0x1c>

0000141a <vfprintf>:
    141a:	ad e0       	ldi	r26, 0x0D	; 13
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e3 e1       	ldi	r30, 0x13	; 19
    1420:	fa e0       	ldi	r31, 0x0A	; 10
    1422:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__prologue_saves__>
    1426:	3c 01       	movw	r6, r24
    1428:	7d 87       	std	Y+13, r23	; 0x0d
    142a:	6c 87       	std	Y+12, r22	; 0x0c
    142c:	5a 01       	movw	r10, r20
    142e:	fc 01       	movw	r30, r24
    1430:	17 82       	std	Z+7, r1	; 0x07
    1432:	16 82       	std	Z+6, r1	; 0x06
    1434:	83 81       	ldd	r24, Z+3	; 0x03
    1436:	81 ff       	sbrs	r24, 1
    1438:	c8 c1       	rjmp	.+912    	; 0x17ca <vfprintf+0x3b0>
    143a:	2e 01       	movw	r4, r28
    143c:	08 94       	sec
    143e:	41 1c       	adc	r4, r1
    1440:	51 1c       	adc	r5, r1
    1442:	f3 01       	movw	r30, r6
    1444:	93 81       	ldd	r25, Z+3	; 0x03
    1446:	ec 85       	ldd	r30, Y+12	; 0x0c
    1448:	fd 85       	ldd	r31, Y+13	; 0x0d
    144a:	93 fd       	sbrc	r25, 3
    144c:	85 91       	lpm	r24, Z+
    144e:	93 ff       	sbrs	r25, 3
    1450:	81 91       	ld	r24, Z+
    1452:	fd 87       	std	Y+13, r31	; 0x0d
    1454:	ec 87       	std	Y+12, r30	; 0x0c
    1456:	88 23       	and	r24, r24
    1458:	09 f4       	brne	.+2      	; 0x145c <vfprintf+0x42>
    145a:	b3 c1       	rjmp	.+870    	; 0x17c2 <vfprintf+0x3a8>
    145c:	85 32       	cpi	r24, 0x25	; 37
    145e:	41 f4       	brne	.+16     	; 0x1470 <vfprintf+0x56>
    1460:	93 fd       	sbrc	r25, 3
    1462:	85 91       	lpm	r24, Z+
    1464:	93 ff       	sbrs	r25, 3
    1466:	81 91       	ld	r24, Z+
    1468:	fd 87       	std	Y+13, r31	; 0x0d
    146a:	ec 87       	std	Y+12, r30	; 0x0c
    146c:	85 32       	cpi	r24, 0x25	; 37
    146e:	29 f4       	brne	.+10     	; 0x147a <vfprintf+0x60>
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	b3 01       	movw	r22, r6
    1474:	0e 94 1b 0c 	call	0x1836	; 0x1836 <fputc>
    1478:	e4 cf       	rjmp	.-56     	; 0x1442 <vfprintf+0x28>
    147a:	ff 24       	eor	r15, r15
    147c:	ee 24       	eor	r14, r14
    147e:	10 e0       	ldi	r17, 0x00	; 0
    1480:	10 32       	cpi	r17, 0x20	; 32
    1482:	b0 f4       	brcc	.+44     	; 0x14b0 <vfprintf+0x96>
    1484:	8b 32       	cpi	r24, 0x2B	; 43
    1486:	69 f0       	breq	.+26     	; 0x14a2 <vfprintf+0x88>
    1488:	8c 32       	cpi	r24, 0x2C	; 44
    148a:	28 f4       	brcc	.+10     	; 0x1496 <vfprintf+0x7c>
    148c:	80 32       	cpi	r24, 0x20	; 32
    148e:	51 f0       	breq	.+20     	; 0x14a4 <vfprintf+0x8a>
    1490:	83 32       	cpi	r24, 0x23	; 35
    1492:	71 f4       	brne	.+28     	; 0x14b0 <vfprintf+0x96>
    1494:	0b c0       	rjmp	.+22     	; 0x14ac <vfprintf+0x92>
    1496:	8d 32       	cpi	r24, 0x2D	; 45
    1498:	39 f0       	breq	.+14     	; 0x14a8 <vfprintf+0x8e>
    149a:	80 33       	cpi	r24, 0x30	; 48
    149c:	49 f4       	brne	.+18     	; 0x14b0 <vfprintf+0x96>
    149e:	11 60       	ori	r17, 0x01	; 1
    14a0:	2c c0       	rjmp	.+88     	; 0x14fa <vfprintf+0xe0>
    14a2:	12 60       	ori	r17, 0x02	; 2
    14a4:	14 60       	ori	r17, 0x04	; 4
    14a6:	29 c0       	rjmp	.+82     	; 0x14fa <vfprintf+0xe0>
    14a8:	18 60       	ori	r17, 0x08	; 8
    14aa:	27 c0       	rjmp	.+78     	; 0x14fa <vfprintf+0xe0>
    14ac:	10 61       	ori	r17, 0x10	; 16
    14ae:	25 c0       	rjmp	.+74     	; 0x14fa <vfprintf+0xe0>
    14b0:	17 fd       	sbrc	r17, 7
    14b2:	2e c0       	rjmp	.+92     	; 0x1510 <vfprintf+0xf6>
    14b4:	28 2f       	mov	r18, r24
    14b6:	20 53       	subi	r18, 0x30	; 48
    14b8:	2a 30       	cpi	r18, 0x0A	; 10
    14ba:	98 f4       	brcc	.+38     	; 0x14e2 <vfprintf+0xc8>
    14bc:	16 ff       	sbrs	r17, 6
    14be:	08 c0       	rjmp	.+16     	; 0x14d0 <vfprintf+0xb6>
    14c0:	8f 2d       	mov	r24, r15
    14c2:	88 0f       	add	r24, r24
    14c4:	f8 2e       	mov	r15, r24
    14c6:	ff 0c       	add	r15, r15
    14c8:	ff 0c       	add	r15, r15
    14ca:	f8 0e       	add	r15, r24
    14cc:	f2 0e       	add	r15, r18
    14ce:	15 c0       	rjmp	.+42     	; 0x14fa <vfprintf+0xe0>
    14d0:	8e 2d       	mov	r24, r14
    14d2:	88 0f       	add	r24, r24
    14d4:	e8 2e       	mov	r14, r24
    14d6:	ee 0c       	add	r14, r14
    14d8:	ee 0c       	add	r14, r14
    14da:	e8 0e       	add	r14, r24
    14dc:	e2 0e       	add	r14, r18
    14de:	10 62       	ori	r17, 0x20	; 32
    14e0:	0c c0       	rjmp	.+24     	; 0x14fa <vfprintf+0xe0>
    14e2:	8e 32       	cpi	r24, 0x2E	; 46
    14e4:	21 f4       	brne	.+8      	; 0x14ee <vfprintf+0xd4>
    14e6:	16 fd       	sbrc	r17, 6
    14e8:	6c c1       	rjmp	.+728    	; 0x17c2 <vfprintf+0x3a8>
    14ea:	10 64       	ori	r17, 0x40	; 64
    14ec:	06 c0       	rjmp	.+12     	; 0x14fa <vfprintf+0xe0>
    14ee:	8c 36       	cpi	r24, 0x6C	; 108
    14f0:	11 f4       	brne	.+4      	; 0x14f6 <vfprintf+0xdc>
    14f2:	10 68       	ori	r17, 0x80	; 128
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <vfprintf+0xe0>
    14f6:	88 36       	cpi	r24, 0x68	; 104
    14f8:	59 f4       	brne	.+22     	; 0x1510 <vfprintf+0xf6>
    14fa:	ec 85       	ldd	r30, Y+12	; 0x0c
    14fc:	fd 85       	ldd	r31, Y+13	; 0x0d
    14fe:	93 fd       	sbrc	r25, 3
    1500:	85 91       	lpm	r24, Z+
    1502:	93 ff       	sbrs	r25, 3
    1504:	81 91       	ld	r24, Z+
    1506:	fd 87       	std	Y+13, r31	; 0x0d
    1508:	ec 87       	std	Y+12, r30	; 0x0c
    150a:	88 23       	and	r24, r24
    150c:	09 f0       	breq	.+2      	; 0x1510 <vfprintf+0xf6>
    150e:	b8 cf       	rjmp	.-144    	; 0x1480 <vfprintf+0x66>
    1510:	98 2f       	mov	r25, r24
    1512:	95 54       	subi	r25, 0x45	; 69
    1514:	93 30       	cpi	r25, 0x03	; 3
    1516:	18 f0       	brcs	.+6      	; 0x151e <vfprintf+0x104>
    1518:	90 52       	subi	r25, 0x20	; 32
    151a:	93 30       	cpi	r25, 0x03	; 3
    151c:	38 f4       	brcc	.+14     	; 0x152c <vfprintf+0x112>
    151e:	24 e0       	ldi	r18, 0x04	; 4
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	a2 0e       	add	r10, r18
    1524:	b3 1e       	adc	r11, r19
    1526:	3f e3       	ldi	r19, 0x3F	; 63
    1528:	39 83       	std	Y+1, r19	; 0x01
    152a:	0f c0       	rjmp	.+30     	; 0x154a <vfprintf+0x130>
    152c:	83 36       	cpi	r24, 0x63	; 99
    152e:	31 f0       	breq	.+12     	; 0x153c <vfprintf+0x122>
    1530:	83 37       	cpi	r24, 0x73	; 115
    1532:	81 f0       	breq	.+32     	; 0x1554 <vfprintf+0x13a>
    1534:	83 35       	cpi	r24, 0x53	; 83
    1536:	09 f0       	breq	.+2      	; 0x153a <vfprintf+0x120>
    1538:	5a c0       	rjmp	.+180    	; 0x15ee <vfprintf+0x1d4>
    153a:	22 c0       	rjmp	.+68     	; 0x1580 <vfprintf+0x166>
    153c:	f5 01       	movw	r30, r10
    153e:	80 81       	ld	r24, Z
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	22 e0       	ldi	r18, 0x02	; 2
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	a2 0e       	add	r10, r18
    1548:	b3 1e       	adc	r11, r19
    154a:	21 e0       	ldi	r18, 0x01	; 1
    154c:	c2 2e       	mov	r12, r18
    154e:	d1 2c       	mov	r13, r1
    1550:	42 01       	movw	r8, r4
    1552:	14 c0       	rjmp	.+40     	; 0x157c <vfprintf+0x162>
    1554:	92 e0       	ldi	r25, 0x02	; 2
    1556:	29 2e       	mov	r2, r25
    1558:	31 2c       	mov	r3, r1
    155a:	2a 0c       	add	r2, r10
    155c:	3b 1c       	adc	r3, r11
    155e:	f5 01       	movw	r30, r10
    1560:	80 80       	ld	r8, Z
    1562:	91 80       	ldd	r9, Z+1	; 0x01
    1564:	16 ff       	sbrs	r17, 6
    1566:	03 c0       	rjmp	.+6      	; 0x156e <vfprintf+0x154>
    1568:	6f 2d       	mov	r22, r15
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <vfprintf+0x158>
    156e:	6f ef       	ldi	r22, 0xFF	; 255
    1570:	7f ef       	ldi	r23, 0xFF	; 255
    1572:	c4 01       	movw	r24, r8
    1574:	0e 94 10 0c 	call	0x1820	; 0x1820 <strnlen>
    1578:	6c 01       	movw	r12, r24
    157a:	51 01       	movw	r10, r2
    157c:	1f 77       	andi	r17, 0x7F	; 127
    157e:	15 c0       	rjmp	.+42     	; 0x15aa <vfprintf+0x190>
    1580:	82 e0       	ldi	r24, 0x02	; 2
    1582:	28 2e       	mov	r2, r24
    1584:	31 2c       	mov	r3, r1
    1586:	2a 0c       	add	r2, r10
    1588:	3b 1c       	adc	r3, r11
    158a:	f5 01       	movw	r30, r10
    158c:	80 80       	ld	r8, Z
    158e:	91 80       	ldd	r9, Z+1	; 0x01
    1590:	16 ff       	sbrs	r17, 6
    1592:	03 c0       	rjmp	.+6      	; 0x159a <vfprintf+0x180>
    1594:	6f 2d       	mov	r22, r15
    1596:	70 e0       	ldi	r23, 0x00	; 0
    1598:	02 c0       	rjmp	.+4      	; 0x159e <vfprintf+0x184>
    159a:	6f ef       	ldi	r22, 0xFF	; 255
    159c:	7f ef       	ldi	r23, 0xFF	; 255
    159e:	c4 01       	movw	r24, r8
    15a0:	0e 94 05 0c 	call	0x180a	; 0x180a <strnlen_P>
    15a4:	6c 01       	movw	r12, r24
    15a6:	10 68       	ori	r17, 0x80	; 128
    15a8:	51 01       	movw	r10, r2
    15aa:	13 fd       	sbrc	r17, 3
    15ac:	1c c0       	rjmp	.+56     	; 0x15e6 <vfprintf+0x1cc>
    15ae:	06 c0       	rjmp	.+12     	; 0x15bc <vfprintf+0x1a2>
    15b0:	80 e2       	ldi	r24, 0x20	; 32
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	b3 01       	movw	r22, r6
    15b6:	0e 94 1b 0c 	call	0x1836	; 0x1836 <fputc>
    15ba:	ea 94       	dec	r14
    15bc:	8e 2d       	mov	r24, r14
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	c8 16       	cp	r12, r24
    15c2:	d9 06       	cpc	r13, r25
    15c4:	a8 f3       	brcs	.-22     	; 0x15b0 <vfprintf+0x196>
    15c6:	0f c0       	rjmp	.+30     	; 0x15e6 <vfprintf+0x1cc>
    15c8:	f4 01       	movw	r30, r8
    15ca:	17 fd       	sbrc	r17, 7
    15cc:	85 91       	lpm	r24, Z+
    15ce:	17 ff       	sbrs	r17, 7
    15d0:	81 91       	ld	r24, Z+
    15d2:	4f 01       	movw	r8, r30
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	b3 01       	movw	r22, r6
    15d8:	0e 94 1b 0c 	call	0x1836	; 0x1836 <fputc>
    15dc:	e1 10       	cpse	r14, r1
    15de:	ea 94       	dec	r14
    15e0:	08 94       	sec
    15e2:	c1 08       	sbc	r12, r1
    15e4:	d1 08       	sbc	r13, r1
    15e6:	c1 14       	cp	r12, r1
    15e8:	d1 04       	cpc	r13, r1
    15ea:	71 f7       	brne	.-36     	; 0x15c8 <vfprintf+0x1ae>
    15ec:	e7 c0       	rjmp	.+462    	; 0x17bc <vfprintf+0x3a2>
    15ee:	84 36       	cpi	r24, 0x64	; 100
    15f0:	11 f0       	breq	.+4      	; 0x15f6 <vfprintf+0x1dc>
    15f2:	89 36       	cpi	r24, 0x69	; 105
    15f4:	51 f5       	brne	.+84     	; 0x164a <vfprintf+0x230>
    15f6:	f5 01       	movw	r30, r10
    15f8:	17 ff       	sbrs	r17, 7
    15fa:	07 c0       	rjmp	.+14     	; 0x160a <vfprintf+0x1f0>
    15fc:	80 81       	ld	r24, Z
    15fe:	91 81       	ldd	r25, Z+1	; 0x01
    1600:	a2 81       	ldd	r26, Z+2	; 0x02
    1602:	b3 81       	ldd	r27, Z+3	; 0x03
    1604:	24 e0       	ldi	r18, 0x04	; 4
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	08 c0       	rjmp	.+16     	; 0x161a <vfprintf+0x200>
    160a:	80 81       	ld	r24, Z
    160c:	91 81       	ldd	r25, Z+1	; 0x01
    160e:	aa 27       	eor	r26, r26
    1610:	97 fd       	sbrc	r25, 7
    1612:	a0 95       	com	r26
    1614:	ba 2f       	mov	r27, r26
    1616:	22 e0       	ldi	r18, 0x02	; 2
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	a2 0e       	add	r10, r18
    161c:	b3 1e       	adc	r11, r19
    161e:	01 2f       	mov	r16, r17
    1620:	0f 76       	andi	r16, 0x6F	; 111
    1622:	b7 ff       	sbrs	r27, 7
    1624:	08 c0       	rjmp	.+16     	; 0x1636 <vfprintf+0x21c>
    1626:	b0 95       	com	r27
    1628:	a0 95       	com	r26
    162a:	90 95       	com	r25
    162c:	81 95       	neg	r24
    162e:	9f 4f       	sbci	r25, 0xFF	; 255
    1630:	af 4f       	sbci	r26, 0xFF	; 255
    1632:	bf 4f       	sbci	r27, 0xFF	; 255
    1634:	00 68       	ori	r16, 0x80	; 128
    1636:	bc 01       	movw	r22, r24
    1638:	cd 01       	movw	r24, r26
    163a:	a2 01       	movw	r20, r4
    163c:	2a e0       	ldi	r18, 0x0A	; 10
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	0e 94 47 0c 	call	0x188e	; 0x188e <__ultoa_invert>
    1644:	d8 2e       	mov	r13, r24
    1646:	d4 18       	sub	r13, r4
    1648:	3f c0       	rjmp	.+126    	; 0x16c8 <vfprintf+0x2ae>
    164a:	85 37       	cpi	r24, 0x75	; 117
    164c:	21 f4       	brne	.+8      	; 0x1656 <vfprintf+0x23c>
    164e:	1f 7e       	andi	r17, 0xEF	; 239
    1650:	2a e0       	ldi	r18, 0x0A	; 10
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	20 c0       	rjmp	.+64     	; 0x1696 <vfprintf+0x27c>
    1656:	19 7f       	andi	r17, 0xF9	; 249
    1658:	8f 36       	cpi	r24, 0x6F	; 111
    165a:	a9 f0       	breq	.+42     	; 0x1686 <vfprintf+0x26c>
    165c:	80 37       	cpi	r24, 0x70	; 112
    165e:	20 f4       	brcc	.+8      	; 0x1668 <vfprintf+0x24e>
    1660:	88 35       	cpi	r24, 0x58	; 88
    1662:	09 f0       	breq	.+2      	; 0x1666 <vfprintf+0x24c>
    1664:	ae c0       	rjmp	.+348    	; 0x17c2 <vfprintf+0x3a8>
    1666:	0b c0       	rjmp	.+22     	; 0x167e <vfprintf+0x264>
    1668:	80 37       	cpi	r24, 0x70	; 112
    166a:	21 f0       	breq	.+8      	; 0x1674 <vfprintf+0x25a>
    166c:	88 37       	cpi	r24, 0x78	; 120
    166e:	09 f0       	breq	.+2      	; 0x1672 <vfprintf+0x258>
    1670:	a8 c0       	rjmp	.+336    	; 0x17c2 <vfprintf+0x3a8>
    1672:	01 c0       	rjmp	.+2      	; 0x1676 <vfprintf+0x25c>
    1674:	10 61       	ori	r17, 0x10	; 16
    1676:	14 ff       	sbrs	r17, 4
    1678:	09 c0       	rjmp	.+18     	; 0x168c <vfprintf+0x272>
    167a:	14 60       	ori	r17, 0x04	; 4
    167c:	07 c0       	rjmp	.+14     	; 0x168c <vfprintf+0x272>
    167e:	14 ff       	sbrs	r17, 4
    1680:	08 c0       	rjmp	.+16     	; 0x1692 <vfprintf+0x278>
    1682:	16 60       	ori	r17, 0x06	; 6
    1684:	06 c0       	rjmp	.+12     	; 0x1692 <vfprintf+0x278>
    1686:	28 e0       	ldi	r18, 0x08	; 8
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	05 c0       	rjmp	.+10     	; 0x1696 <vfprintf+0x27c>
    168c:	20 e1       	ldi	r18, 0x10	; 16
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <vfprintf+0x27c>
    1692:	20 e1       	ldi	r18, 0x10	; 16
    1694:	32 e0       	ldi	r19, 0x02	; 2
    1696:	f5 01       	movw	r30, r10
    1698:	17 ff       	sbrs	r17, 7
    169a:	07 c0       	rjmp	.+14     	; 0x16aa <vfprintf+0x290>
    169c:	60 81       	ld	r22, Z
    169e:	71 81       	ldd	r23, Z+1	; 0x01
    16a0:	82 81       	ldd	r24, Z+2	; 0x02
    16a2:	93 81       	ldd	r25, Z+3	; 0x03
    16a4:	44 e0       	ldi	r20, 0x04	; 4
    16a6:	50 e0       	ldi	r21, 0x00	; 0
    16a8:	06 c0       	rjmp	.+12     	; 0x16b6 <vfprintf+0x29c>
    16aa:	60 81       	ld	r22, Z
    16ac:	71 81       	ldd	r23, Z+1	; 0x01
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	42 e0       	ldi	r20, 0x02	; 2
    16b4:	50 e0       	ldi	r21, 0x00	; 0
    16b6:	a4 0e       	add	r10, r20
    16b8:	b5 1e       	adc	r11, r21
    16ba:	a2 01       	movw	r20, r4
    16bc:	0e 94 47 0c 	call	0x188e	; 0x188e <__ultoa_invert>
    16c0:	d8 2e       	mov	r13, r24
    16c2:	d4 18       	sub	r13, r4
    16c4:	01 2f       	mov	r16, r17
    16c6:	0f 77       	andi	r16, 0x7F	; 127
    16c8:	06 ff       	sbrs	r16, 6
    16ca:	09 c0       	rjmp	.+18     	; 0x16de <vfprintf+0x2c4>
    16cc:	0e 7f       	andi	r16, 0xFE	; 254
    16ce:	df 14       	cp	r13, r15
    16d0:	30 f4       	brcc	.+12     	; 0x16de <vfprintf+0x2c4>
    16d2:	04 ff       	sbrs	r16, 4
    16d4:	06 c0       	rjmp	.+12     	; 0x16e2 <vfprintf+0x2c8>
    16d6:	02 fd       	sbrc	r16, 2
    16d8:	04 c0       	rjmp	.+8      	; 0x16e2 <vfprintf+0x2c8>
    16da:	0f 7e       	andi	r16, 0xEF	; 239
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <vfprintf+0x2c8>
    16de:	1d 2d       	mov	r17, r13
    16e0:	01 c0       	rjmp	.+2      	; 0x16e4 <vfprintf+0x2ca>
    16e2:	1f 2d       	mov	r17, r15
    16e4:	80 2f       	mov	r24, r16
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	04 ff       	sbrs	r16, 4
    16ea:	0c c0       	rjmp	.+24     	; 0x1704 <vfprintf+0x2ea>
    16ec:	fe 01       	movw	r30, r28
    16ee:	ed 0d       	add	r30, r13
    16f0:	f1 1d       	adc	r31, r1
    16f2:	20 81       	ld	r18, Z
    16f4:	20 33       	cpi	r18, 0x30	; 48
    16f6:	11 f4       	brne	.+4      	; 0x16fc <vfprintf+0x2e2>
    16f8:	09 7e       	andi	r16, 0xE9	; 233
    16fa:	09 c0       	rjmp	.+18     	; 0x170e <vfprintf+0x2f4>
    16fc:	02 ff       	sbrs	r16, 2
    16fe:	06 c0       	rjmp	.+12     	; 0x170c <vfprintf+0x2f2>
    1700:	1e 5f       	subi	r17, 0xFE	; 254
    1702:	05 c0       	rjmp	.+10     	; 0x170e <vfprintf+0x2f4>
    1704:	86 78       	andi	r24, 0x86	; 134
    1706:	90 70       	andi	r25, 0x00	; 0
    1708:	00 97       	sbiw	r24, 0x00	; 0
    170a:	09 f0       	breq	.+2      	; 0x170e <vfprintf+0x2f4>
    170c:	1f 5f       	subi	r17, 0xFF	; 255
    170e:	80 2e       	mov	r8, r16
    1710:	99 24       	eor	r9, r9
    1712:	03 fd       	sbrc	r16, 3
    1714:	12 c0       	rjmp	.+36     	; 0x173a <vfprintf+0x320>
    1716:	00 ff       	sbrs	r16, 0
    1718:	0d c0       	rjmp	.+26     	; 0x1734 <vfprintf+0x31a>
    171a:	fd 2c       	mov	r15, r13
    171c:	1e 15       	cp	r17, r14
    171e:	50 f4       	brcc	.+20     	; 0x1734 <vfprintf+0x31a>
    1720:	fe 0c       	add	r15, r14
    1722:	f1 1a       	sub	r15, r17
    1724:	1e 2d       	mov	r17, r14
    1726:	06 c0       	rjmp	.+12     	; 0x1734 <vfprintf+0x31a>
    1728:	80 e2       	ldi	r24, 0x20	; 32
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	b3 01       	movw	r22, r6
    172e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <fputc>
    1732:	1f 5f       	subi	r17, 0xFF	; 255
    1734:	1e 15       	cp	r17, r14
    1736:	c0 f3       	brcs	.-16     	; 0x1728 <vfprintf+0x30e>
    1738:	04 c0       	rjmp	.+8      	; 0x1742 <vfprintf+0x328>
    173a:	1e 15       	cp	r17, r14
    173c:	10 f4       	brcc	.+4      	; 0x1742 <vfprintf+0x328>
    173e:	e1 1a       	sub	r14, r17
    1740:	01 c0       	rjmp	.+2      	; 0x1744 <vfprintf+0x32a>
    1742:	ee 24       	eor	r14, r14
    1744:	84 fe       	sbrs	r8, 4
    1746:	0f c0       	rjmp	.+30     	; 0x1766 <vfprintf+0x34c>
    1748:	80 e3       	ldi	r24, 0x30	; 48
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	b3 01       	movw	r22, r6
    174e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <fputc>
    1752:	82 fe       	sbrs	r8, 2
    1754:	1f c0       	rjmp	.+62     	; 0x1794 <vfprintf+0x37a>
    1756:	81 fe       	sbrs	r8, 1
    1758:	03 c0       	rjmp	.+6      	; 0x1760 <vfprintf+0x346>
    175a:	88 e5       	ldi	r24, 0x58	; 88
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	10 c0       	rjmp	.+32     	; 0x1780 <vfprintf+0x366>
    1760:	88 e7       	ldi	r24, 0x78	; 120
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	0d c0       	rjmp	.+26     	; 0x1780 <vfprintf+0x366>
    1766:	c4 01       	movw	r24, r8
    1768:	86 78       	andi	r24, 0x86	; 134
    176a:	90 70       	andi	r25, 0x00	; 0
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	91 f0       	breq	.+36     	; 0x1794 <vfprintf+0x37a>
    1770:	81 fc       	sbrc	r8, 1
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <vfprintf+0x35e>
    1774:	80 e2       	ldi	r24, 0x20	; 32
    1776:	01 c0       	rjmp	.+2      	; 0x177a <vfprintf+0x360>
    1778:	8b e2       	ldi	r24, 0x2B	; 43
    177a:	07 fd       	sbrc	r16, 7
    177c:	8d e2       	ldi	r24, 0x2D	; 45
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	b3 01       	movw	r22, r6
    1782:	0e 94 1b 0c 	call	0x1836	; 0x1836 <fputc>
    1786:	06 c0       	rjmp	.+12     	; 0x1794 <vfprintf+0x37a>
    1788:	80 e3       	ldi	r24, 0x30	; 48
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	b3 01       	movw	r22, r6
    178e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <fputc>
    1792:	fa 94       	dec	r15
    1794:	df 14       	cp	r13, r15
    1796:	c0 f3       	brcs	.-16     	; 0x1788 <vfprintf+0x36e>
    1798:	da 94       	dec	r13
    179a:	f2 01       	movw	r30, r4
    179c:	ed 0d       	add	r30, r13
    179e:	f1 1d       	adc	r31, r1
    17a0:	80 81       	ld	r24, Z
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	b3 01       	movw	r22, r6
    17a6:	0e 94 1b 0c 	call	0x1836	; 0x1836 <fputc>
    17aa:	dd 20       	and	r13, r13
    17ac:	a9 f7       	brne	.-22     	; 0x1798 <vfprintf+0x37e>
    17ae:	06 c0       	rjmp	.+12     	; 0x17bc <vfprintf+0x3a2>
    17b0:	80 e2       	ldi	r24, 0x20	; 32
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	b3 01       	movw	r22, r6
    17b6:	0e 94 1b 0c 	call	0x1836	; 0x1836 <fputc>
    17ba:	ea 94       	dec	r14
    17bc:	ee 20       	and	r14, r14
    17be:	c1 f7       	brne	.-16     	; 0x17b0 <vfprintf+0x396>
    17c0:	40 ce       	rjmp	.-896    	; 0x1442 <vfprintf+0x28>
    17c2:	f3 01       	movw	r30, r6
    17c4:	86 81       	ldd	r24, Z+6	; 0x06
    17c6:	97 81       	ldd	r25, Z+7	; 0x07
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <vfprintf+0x3b4>
    17ca:	8f ef       	ldi	r24, 0xFF	; 255
    17cc:	9f ef       	ldi	r25, 0xFF	; 255
    17ce:	2d 96       	adiw	r28, 0x0d	; 13
    17d0:	e2 e1       	ldi	r30, 0x12	; 18
    17d2:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__epilogue_restores__>

000017d6 <__eerd_byte_m328p>:
    17d6:	f9 99       	sbic	0x1f, 1	; 31
    17d8:	fe cf       	rjmp	.-4      	; 0x17d6 <__eerd_byte_m328p>
    17da:	92 bd       	out	0x22, r25	; 34
    17dc:	81 bd       	out	0x21, r24	; 33
    17de:	f8 9a       	sbi	0x1f, 0	; 31
    17e0:	99 27       	eor	r25, r25
    17e2:	80 b5       	in	r24, 0x20	; 32
    17e4:	08 95       	ret

000017e6 <__eeupd_byte_m328p>:
    17e6:	26 2f       	mov	r18, r22

000017e8 <__eeupd_r18_m328p>:
    17e8:	f9 99       	sbic	0x1f, 1	; 31
    17ea:	fe cf       	rjmp	.-4      	; 0x17e8 <__eeupd_r18_m328p>
    17ec:	92 bd       	out	0x22, r25	; 34
    17ee:	81 bd       	out	0x21, r24	; 33
    17f0:	f8 9a       	sbi	0x1f, 0	; 31
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	00 b4       	in	r0, 0x20	; 32
    17f6:	02 16       	cp	r0, r18
    17f8:	39 f0       	breq	.+14     	; 0x1808 <__eeupd_r18_m328p+0x20>
    17fa:	1f ba       	out	0x1f, r1	; 31
    17fc:	20 bd       	out	0x20, r18	; 32
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	f8 94       	cli
    1802:	fa 9a       	sbi	0x1f, 2	; 31
    1804:	f9 9a       	sbi	0x1f, 1	; 31
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	08 95       	ret

0000180a <strnlen_P>:
    180a:	fc 01       	movw	r30, r24
    180c:	05 90       	lpm	r0, Z+
    180e:	61 50       	subi	r22, 0x01	; 1
    1810:	70 40       	sbci	r23, 0x00	; 0
    1812:	01 10       	cpse	r0, r1
    1814:	d8 f7       	brcc	.-10     	; 0x180c <strnlen_P+0x2>
    1816:	80 95       	com	r24
    1818:	90 95       	com	r25
    181a:	8e 0f       	add	r24, r30
    181c:	9f 1f       	adc	r25, r31
    181e:	08 95       	ret

00001820 <strnlen>:
    1820:	fc 01       	movw	r30, r24
    1822:	61 50       	subi	r22, 0x01	; 1
    1824:	70 40       	sbci	r23, 0x00	; 0
    1826:	01 90       	ld	r0, Z+
    1828:	01 10       	cpse	r0, r1
    182a:	d8 f7       	brcc	.-10     	; 0x1822 <strnlen+0x2>
    182c:	80 95       	com	r24
    182e:	90 95       	com	r25
    1830:	8e 0f       	add	r24, r30
    1832:	9f 1f       	adc	r25, r31
    1834:	08 95       	ret

00001836 <fputc>:
    1836:	0f 93       	push	r16
    1838:	1f 93       	push	r17
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	8c 01       	movw	r16, r24
    1840:	eb 01       	movw	r28, r22
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	81 ff       	sbrs	r24, 1
    1846:	1b c0       	rjmp	.+54     	; 0x187e <fputc+0x48>
    1848:	82 ff       	sbrs	r24, 2
    184a:	0d c0       	rjmp	.+26     	; 0x1866 <fputc+0x30>
    184c:	2e 81       	ldd	r18, Y+6	; 0x06
    184e:	3f 81       	ldd	r19, Y+7	; 0x07
    1850:	8c 81       	ldd	r24, Y+4	; 0x04
    1852:	9d 81       	ldd	r25, Y+5	; 0x05
    1854:	28 17       	cp	r18, r24
    1856:	39 07       	cpc	r19, r25
    1858:	64 f4       	brge	.+24     	; 0x1872 <fputc+0x3c>
    185a:	e8 81       	ld	r30, Y
    185c:	f9 81       	ldd	r31, Y+1	; 0x01
    185e:	01 93       	st	Z+, r16
    1860:	f9 83       	std	Y+1, r31	; 0x01
    1862:	e8 83       	st	Y, r30
    1864:	06 c0       	rjmp	.+12     	; 0x1872 <fputc+0x3c>
    1866:	e8 85       	ldd	r30, Y+8	; 0x08
    1868:	f9 85       	ldd	r31, Y+9	; 0x09
    186a:	80 2f       	mov	r24, r16
    186c:	09 95       	icall
    186e:	00 97       	sbiw	r24, 0x00	; 0
    1870:	31 f4       	brne	.+12     	; 0x187e <fputc+0x48>
    1872:	8e 81       	ldd	r24, Y+6	; 0x06
    1874:	9f 81       	ldd	r25, Y+7	; 0x07
    1876:	01 96       	adiw	r24, 0x01	; 1
    1878:	9f 83       	std	Y+7, r25	; 0x07
    187a:	8e 83       	std	Y+6, r24	; 0x06
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <fputc+0x4c>
    187e:	0f ef       	ldi	r16, 0xFF	; 255
    1880:	1f ef       	ldi	r17, 0xFF	; 255
    1882:	c8 01       	movw	r24, r16
    1884:	df 91       	pop	r29
    1886:	cf 91       	pop	r28
    1888:	1f 91       	pop	r17
    188a:	0f 91       	pop	r16
    188c:	08 95       	ret

0000188e <__ultoa_invert>:
    188e:	fa 01       	movw	r30, r20
    1890:	aa 27       	eor	r26, r26
    1892:	28 30       	cpi	r18, 0x08	; 8
    1894:	51 f1       	breq	.+84     	; 0x18ea <__ultoa_invert+0x5c>
    1896:	20 31       	cpi	r18, 0x10	; 16
    1898:	81 f1       	breq	.+96     	; 0x18fa <__ultoa_invert+0x6c>
    189a:	e8 94       	clt
    189c:	6f 93       	push	r22
    189e:	6e 7f       	andi	r22, 0xFE	; 254
    18a0:	6e 5f       	subi	r22, 0xFE	; 254
    18a2:	7f 4f       	sbci	r23, 0xFF	; 255
    18a4:	8f 4f       	sbci	r24, 0xFF	; 255
    18a6:	9f 4f       	sbci	r25, 0xFF	; 255
    18a8:	af 4f       	sbci	r26, 0xFF	; 255
    18aa:	b1 e0       	ldi	r27, 0x01	; 1
    18ac:	3e d0       	rcall	.+124    	; 0x192a <__ultoa_invert+0x9c>
    18ae:	b4 e0       	ldi	r27, 0x04	; 4
    18b0:	3c d0       	rcall	.+120    	; 0x192a <__ultoa_invert+0x9c>
    18b2:	67 0f       	add	r22, r23
    18b4:	78 1f       	adc	r23, r24
    18b6:	89 1f       	adc	r24, r25
    18b8:	9a 1f       	adc	r25, r26
    18ba:	a1 1d       	adc	r26, r1
    18bc:	68 0f       	add	r22, r24
    18be:	79 1f       	adc	r23, r25
    18c0:	8a 1f       	adc	r24, r26
    18c2:	91 1d       	adc	r25, r1
    18c4:	a1 1d       	adc	r26, r1
    18c6:	6a 0f       	add	r22, r26
    18c8:	71 1d       	adc	r23, r1
    18ca:	81 1d       	adc	r24, r1
    18cc:	91 1d       	adc	r25, r1
    18ce:	a1 1d       	adc	r26, r1
    18d0:	20 d0       	rcall	.+64     	; 0x1912 <__ultoa_invert+0x84>
    18d2:	09 f4       	brne	.+2      	; 0x18d6 <__ultoa_invert+0x48>
    18d4:	68 94       	set
    18d6:	3f 91       	pop	r19
    18d8:	2a e0       	ldi	r18, 0x0A	; 10
    18da:	26 9f       	mul	r18, r22
    18dc:	11 24       	eor	r1, r1
    18de:	30 19       	sub	r19, r0
    18e0:	30 5d       	subi	r19, 0xD0	; 208
    18e2:	31 93       	st	Z+, r19
    18e4:	de f6       	brtc	.-74     	; 0x189c <__ultoa_invert+0xe>
    18e6:	cf 01       	movw	r24, r30
    18e8:	08 95       	ret
    18ea:	46 2f       	mov	r20, r22
    18ec:	47 70       	andi	r20, 0x07	; 7
    18ee:	40 5d       	subi	r20, 0xD0	; 208
    18f0:	41 93       	st	Z+, r20
    18f2:	b3 e0       	ldi	r27, 0x03	; 3
    18f4:	0f d0       	rcall	.+30     	; 0x1914 <__ultoa_invert+0x86>
    18f6:	c9 f7       	brne	.-14     	; 0x18ea <__ultoa_invert+0x5c>
    18f8:	f6 cf       	rjmp	.-20     	; 0x18e6 <__ultoa_invert+0x58>
    18fa:	46 2f       	mov	r20, r22
    18fc:	4f 70       	andi	r20, 0x0F	; 15
    18fe:	40 5d       	subi	r20, 0xD0	; 208
    1900:	4a 33       	cpi	r20, 0x3A	; 58
    1902:	18 f0       	brcs	.+6      	; 0x190a <__ultoa_invert+0x7c>
    1904:	49 5d       	subi	r20, 0xD9	; 217
    1906:	31 fd       	sbrc	r19, 1
    1908:	40 52       	subi	r20, 0x20	; 32
    190a:	41 93       	st	Z+, r20
    190c:	02 d0       	rcall	.+4      	; 0x1912 <__ultoa_invert+0x84>
    190e:	a9 f7       	brne	.-22     	; 0x18fa <__ultoa_invert+0x6c>
    1910:	ea cf       	rjmp	.-44     	; 0x18e6 <__ultoa_invert+0x58>
    1912:	b4 e0       	ldi	r27, 0x04	; 4
    1914:	a6 95       	lsr	r26
    1916:	97 95       	ror	r25
    1918:	87 95       	ror	r24
    191a:	77 95       	ror	r23
    191c:	67 95       	ror	r22
    191e:	ba 95       	dec	r27
    1920:	c9 f7       	brne	.-14     	; 0x1914 <__ultoa_invert+0x86>
    1922:	00 97       	sbiw	r24, 0x00	; 0
    1924:	61 05       	cpc	r22, r1
    1926:	71 05       	cpc	r23, r1
    1928:	08 95       	ret
    192a:	9b 01       	movw	r18, r22
    192c:	ac 01       	movw	r20, r24
    192e:	0a 2e       	mov	r0, r26
    1930:	06 94       	lsr	r0
    1932:	57 95       	ror	r21
    1934:	47 95       	ror	r20
    1936:	37 95       	ror	r19
    1938:	27 95       	ror	r18
    193a:	ba 95       	dec	r27
    193c:	c9 f7       	brne	.-14     	; 0x1930 <__ultoa_invert+0xa2>
    193e:	62 0f       	add	r22, r18
    1940:	73 1f       	adc	r23, r19
    1942:	84 1f       	adc	r24, r20
    1944:	95 1f       	adc	r25, r21
    1946:	a0 1d       	adc	r26, r0
    1948:	08 95       	ret

0000194a <__prologue_saves__>:
    194a:	2f 92       	push	r2
    194c:	3f 92       	push	r3
    194e:	4f 92       	push	r4
    1950:	5f 92       	push	r5
    1952:	6f 92       	push	r6
    1954:	7f 92       	push	r7
    1956:	8f 92       	push	r8
    1958:	9f 92       	push	r9
    195a:	af 92       	push	r10
    195c:	bf 92       	push	r11
    195e:	cf 92       	push	r12
    1960:	df 92       	push	r13
    1962:	ef 92       	push	r14
    1964:	ff 92       	push	r15
    1966:	0f 93       	push	r16
    1968:	1f 93       	push	r17
    196a:	cf 93       	push	r28
    196c:	df 93       	push	r29
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	ca 1b       	sub	r28, r26
    1974:	db 0b       	sbc	r29, r27
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	f8 94       	cli
    197a:	de bf       	out	0x3e, r29	; 62
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	cd bf       	out	0x3d, r28	; 61
    1980:	09 94       	ijmp

00001982 <__epilogue_restores__>:
    1982:	2a 88       	ldd	r2, Y+18	; 0x12
    1984:	39 88       	ldd	r3, Y+17	; 0x11
    1986:	48 88       	ldd	r4, Y+16	; 0x10
    1988:	5f 84       	ldd	r5, Y+15	; 0x0f
    198a:	6e 84       	ldd	r6, Y+14	; 0x0e
    198c:	7d 84       	ldd	r7, Y+13	; 0x0d
    198e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1990:	9b 84       	ldd	r9, Y+11	; 0x0b
    1992:	aa 84       	ldd	r10, Y+10	; 0x0a
    1994:	b9 84       	ldd	r11, Y+9	; 0x09
    1996:	c8 84       	ldd	r12, Y+8	; 0x08
    1998:	df 80       	ldd	r13, Y+7	; 0x07
    199a:	ee 80       	ldd	r14, Y+6	; 0x06
    199c:	fd 80       	ldd	r15, Y+5	; 0x05
    199e:	0c 81       	ldd	r16, Y+4	; 0x04
    19a0:	1b 81       	ldd	r17, Y+3	; 0x03
    19a2:	aa 81       	ldd	r26, Y+2	; 0x02
    19a4:	b9 81       	ldd	r27, Y+1	; 0x01
    19a6:	ce 0f       	add	r28, r30
    19a8:	d1 1d       	adc	r29, r1
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	f8 94       	cli
    19ae:	de bf       	out	0x3e, r29	; 62
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	cd bf       	out	0x3d, r28	; 61
    19b4:	ed 01       	movw	r28, r26
    19b6:	08 95       	ret

000019b8 <_exit>:
    19b8:	f8 94       	cli

000019ba <__stop_program>:
    19ba:	ff cf       	rjmp	.-2      	; 0x19ba <__stop_program>
