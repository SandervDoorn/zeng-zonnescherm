
Control_Unit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000300  00800100  00001baa  00001c3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001baa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000034  00800400  00800400  00001f3e  2**0
                  ALLOC
  3 .stab         000025e0  00000000  00000000  00001f40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008fe  00000000  00000000  00004520  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000260  00000000  00000000  00004e20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002314  00000000  00000000  00005080  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e9b  00000000  00000000  00007394  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001602  00000000  00000000  0000822f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000684  00000000  00000000  00009834  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007a3  00000000  00000000  00009eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e7b  00000000  00000000  0000a65b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000b4d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 b3 00 	jmp	0x166	; 0x166 <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	14 e0       	ldi	r17, 0x04	; 4
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea ea       	ldi	r30, 0xAA	; 170
      7c:	fb e1       	ldi	r31, 0x1B	; 27
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 30       	cpi	r26, 0x00	; 0
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	14 e0       	ldi	r17, 0x04	; 4
      8c:	a0 e0       	ldi	r26, 0x00	; 0
      8e:	b4 e0       	ldi	r27, 0x04	; 4
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a4 33       	cpi	r26, 0x34	; 52
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "protocolhandeler.h"
#include "scheduler.h"

int main (void)
{
	init_dist();
      a6:	0e 94 a2 00 	call	0x144	; 0x144 <init_dist>
	init_shutter();
      aa:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <init_shutter>
	init_serial();
      ae:	0e 94 51 08 	call	0x10a2	; 0x10a2 <init_serial>
	
	SCH_Init_T1();
      b2:	0e 94 fd 07 	call	0xffa	; 0xffa <SCH_Init_T1>
	
	SCH_Add_Task(init_leds, 0, 1000);
      b6:	89 e5       	ldi	r24, 0x59	; 89
      b8:	91 e0       	ldi	r25, 0x01	; 1
      ba:	60 e0       	ldi	r22, 0x00	; 0
      bc:	70 e0       	ldi	r23, 0x00	; 0
      be:	48 ee       	ldi	r20, 0xE8	; 232
      c0:	53 e0       	ldi	r21, 0x03	; 3
      c2:	0e 94 72 07 	call	0xee4	; 0xee4 <SCH_Add_Task>
	SCH_Add_Task(read_command, 10, 1000);
      c6:	8a e4       	ldi	r24, 0x4A	; 74
      c8:	92 e0       	ldi	r25, 0x02	; 2
      ca:	6a e0       	ldi	r22, 0x0A	; 10
      cc:	70 e0       	ldi	r23, 0x00	; 0
      ce:	48 ee       	ldi	r20, 0xE8	; 232
      d0:	53 e0       	ldi	r21, 0x03	; 3
      d2:	0e 94 72 07 	call	0xee4	; 0xee4 <SCH_Add_Task>
	SCH_Start();
      d6:	0e 94 0f 08 	call	0x101e	; 0x101e <SCH_Start>
	
	while(1)
	{
		//SCH_Dispatch_Tasks();	
		init_leds();
      da:	0e 94 59 01 	call	0x2b2	; 0x2b2 <init_leds>
		read_command();
      de:	0e 94 4a 02 	call	0x494	; 0x494 <read_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      e2:	8f ef       	ldi	r24, 0xFF	; 255
      e4:	99 e6       	ldi	r25, 0x69	; 105
      e6:	a8 e1       	ldi	r26, 0x18	; 24
      e8:	81 50       	subi	r24, 0x01	; 1
      ea:	90 40       	sbci	r25, 0x00	; 0
      ec:	a0 40       	sbci	r26, 0x00	; 0
      ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x42>
      f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x4c>
      f2:	00 00       	nop
      f4:	f2 cf       	rjmp	.-28     	; 0xda <main+0x34>

000000f6 <init_ports>:
const uint8_t strobe = 2;

void init_ports(void)
{
	//Set PORTB on output for display
	DDRB = 0xff;
      f6:	8f ef       	ldi	r24, 0xFF	; 255
      f8:	84 b9       	out	0x04, r24	; 4
	//Set PD2 (Trigger) to output and PD3 (Echo) to input
	DDRD = 0b00000100;
      fa:	84 e0       	ldi	r24, 0x04	; 4
      fc:	8a b9       	out	0x0a, r24	; 10
}
      fe:	08 95       	ret

00000100 <init_timer>:

void init_timer(void)
// prescaling : max time = 2^16/16E6 = 4.1 ms, 4.1 >> 2.3, so no prescaling required
// normal mode, no prescale, stop timer
{
	TCCR1A = 0;
     100:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = _BV(CS10);
     104:	81 e0       	ldi	r24, 0x01	; 1
     106:	80 93 81 00 	sts	0x0081, r24
}
     10a:	08 95       	ret

0000010c <stop_timer>:

void stop_timer()
{
	//Stop timer and reset value
	TCCR1B = 0;
     10c:	10 92 81 00 	sts	0x0081, r1
	TCNT1 = 0;
     110:	10 92 85 00 	sts	0x0085, r1
     114:	10 92 84 00 	sts	0x0084, r1
}
     118:	08 95       	ret

0000011a <init_ext_int>:

void init_ext_int(void)
{
	// any change triggers ext interrupt 1
	EICRA = (1 << ISC10);
     11a:	84 e0       	ldi	r24, 0x04	; 4
     11c:	80 93 69 00 	sts	0x0069, r24
	EIMSK = (1 << INT1);
     120:	82 e0       	ldi	r24, 0x02	; 2
     122:	8d bb       	out	0x1d, r24	; 29
}
     124:	08 95       	ret

00000126 <calc_cm>:

uint16_t calc_cm(uint16_t counter)
{
	/* First set cycles to uS and divide by 58 to get cm */
	return counter / 16 / 58;
     126:	60 ea       	ldi	r22, 0xA0	; 160
     128:	73 e0       	ldi	r23, 0x03	; 3
     12a:	0e 94 83 0a 	call	0x1506	; 0x1506 <__udivmodhi4>
     12e:	86 2f       	mov	r24, r22
     130:	97 2f       	mov	r25, r23
}
     132:	08 95       	ret

00000134 <sendPulse>:

void sendPulse()
{
	PORTD = 4;
     134:	84 e0       	ldi	r24, 0x04	; 4
     136:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     138:	85 e3       	ldi	r24, 0x35	; 53
     13a:	8a 95       	dec	r24
     13c:	f1 f7       	brne	.-4      	; 0x13a <sendPulse+0x6>
     13e:	00 00       	nop
	_delay_us(10);
	PORTD = (0<<PORTD0);
     140:	1b b8       	out	0x0b, r1	; 11
}
     142:	08 95       	ret

00000144 <init_dist>:

void init_dist()
{
	init_ports();
     144:	0e 94 7b 00 	call	0xf6	; 0xf6 <init_ports>
	init_ext_int();
     148:	0e 94 8d 00 	call	0x11a	; 0x11a <init_ext_int>
	sei();
     14c:	78 94       	sei
}
     14e:	08 95       	ret

00000150 <read_sensor_dist>:

int read_sensor_dist(void)
{
	sendPulse();
     150:	0e 94 9a 00 	call	0x134	; 0x134 <sendPulse>
	stop_timer();
     154:	0e 94 86 00 	call	0x10c	; 0x10c <stop_timer>
	uint16_t dist = calc_cm(gv_counter);
     158:	80 91 01 04 	lds	r24, 0x0401
     15c:	90 91 02 04 	lds	r25, 0x0402
     160:	0e 94 93 00 	call	0x126	; 0x126 <calc_cm>
	return dist;
}
     164:	08 95       	ret

00000166 <__vector_2>:

ISR (INT1_vect)
{	
     166:	1f 92       	push	r1
     168:	0f 92       	push	r0
     16a:	0f b6       	in	r0, 0x3f	; 63
     16c:	0f 92       	push	r0
     16e:	11 24       	eor	r1, r1
     170:	2f 93       	push	r18
     172:	3f 93       	push	r19
     174:	4f 93       	push	r20
     176:	5f 93       	push	r21
     178:	6f 93       	push	r22
     17a:	7f 93       	push	r23
     17c:	8f 93       	push	r24
     17e:	9f 93       	push	r25
     180:	af 93       	push	r26
     182:	bf 93       	push	r27
     184:	ef 93       	push	r30
     186:	ff 93       	push	r31
	init_timer();
     188:	0e 94 80 00 	call	0x100	; 0x100 <init_timer>
	while (bit_is_set(PIND, PD3))
     18c:	4b 99       	sbic	0x09, 3	; 9
     18e:	fe cf       	rjmp	.-4      	; 0x18c <__vector_2+0x26>
	{
		//Wait for PIND to go back down, hence echo is finished
	}
	gv_counter = TCNT1;	
     190:	80 91 84 00 	lds	r24, 0x0084
     194:	90 91 85 00 	lds	r25, 0x0085
     198:	90 93 02 04 	sts	0x0402, r25
     19c:	80 93 01 04 	sts	0x0401, r24
     1a0:	ff 91       	pop	r31
     1a2:	ef 91       	pop	r30
     1a4:	bf 91       	pop	r27
     1a6:	af 91       	pop	r26
     1a8:	9f 91       	pop	r25
     1aa:	8f 91       	pop	r24
     1ac:	7f 91       	pop	r23
     1ae:	6f 91       	pop	r22
     1b0:	5f 91       	pop	r21
     1b2:	4f 91       	pop	r20
     1b4:	3f 91       	pop	r19
     1b6:	2f 91       	pop	r18
     1b8:	0f 90       	pop	r0
     1ba:	0f be       	out	0x3f, r0	; 63
     1bc:	0f 90       	pop	r0
     1be:	1f 90       	pop	r1
     1c0:	18 95       	reti

000001c2 <init_shutter>:
uint8_t sensor_dist; //read_dist

void init_shutter()
{
	//set DDRB. PD 0 - PD 2 = output (leds).
	set_ths_dist(30);
     1c2:	8e e1       	ldi	r24, 0x1E	; 30
     1c4:	0e 94 ab 01 	call	0x356	; 0x356 <set_ths_dist>
	set_ths_light(150);
     1c8:	86 e9       	ldi	r24, 0x96	; 150
     1ca:	0e 94 a5 01 	call	0x34a	; 0x34a <set_ths_light>
	set_ths_temp(26);
     1ce:	8a e1       	ldi	r24, 0x1A	; 26
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	0e 94 9f 01 	call	0x33e	; 0x33e <set_ths_temp>
	set_shutter_mode(1);
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	0e 94 93 01 	call	0x326	; 0x326 <set_shutter_mode>
	set_shutter_state(0);
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	0e 94 99 01 	call	0x332	; 0x332 <set_shutter_state>
	//set_arduino_name("Arduino");
	uint8_t arduino_name[20] = {'A','r','d','u','i','n','o'};
}
     1e2:	08 95       	ret

000001e4 <moving>:


uint8_t moving()
{
	uint8_t opening_closing;
	if(ths_dist > sensor_dist & sensor_dist > ths_dist_min)
     1e4:	90 91 05 04 	lds	r25, 0x0405
     1e8:	21 e0       	ldi	r18, 0x01	; 1
     1ea:	80 91 04 04 	lds	r24, 0x0404
     1ee:	98 17       	cp	r25, r24
     1f0:	08 f0       	brcs	.+2      	; 0x1f4 <moving+0x10>
     1f2:	20 e0       	ldi	r18, 0x00	; 0
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	30 91 03 01 	lds	r19, 0x0103
     1fa:	39 17       	cp	r19, r25
     1fc:	08 f0       	brcs	.+2      	; 0x200 <moving+0x1c>
     1fe:	80 e0       	ldi	r24, 0x00	; 0
	{
		opening_closing = 0;
		//stopped
	}
	return opening_closing;
}
     200:	82 23       	and	r24, r18
     202:	08 95       	ret

00000204 <auto_regulator>:
void auto_regulator()
{
	static uint8_t light_set = 1;
	static uint8_t temp_set = 1;
	
	ths_temp = get_ths_temp(); //get_ths_temp()
     204:	0e 94 df 01 	call	0x3be	; 0x3be <get_ths_temp>
     208:	90 93 09 04 	sts	0x0409, r25
     20c:	80 93 08 04 	sts	0x0408, r24
	ths_light = get_ths_light(); //get_ths_light
     210:	0e 94 e5 01 	call	0x3ca	; 0x3ca <get_ths_light>
     214:	80 93 03 04 	sts	0x0403, r24
	ths_dist = get_ths_dist(); //get_ths_dist
     218:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <get_ths_dist>
     21c:	80 93 04 04 	sts	0x0404, r24
	
	// if moving is 0, check if readings are above or below the thresh holds. 
	if (moving() == 0)
     220:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <moving>
     224:	88 23       	and	r24, r24
     226:	09 f0       	breq	.+2      	; 0x22a <auto_regulator+0x26>
     228:	3f c0       	rjmp	.+126    	; 0x2a8 <auto_regulator+0xa4>
	{
		if (sensor_light > ths_light)
     22a:	20 91 0a 04 	lds	r18, 0x040A
     22e:	40 91 03 04 	lds	r20, 0x0403
     232:	42 17       	cp	r20, r18
     234:	10 f4       	brcc	.+4      	; 0x23a <auto_regulator+0x36>
		{
			light_set = 0;
     236:	10 92 04 01 	sts	0x0104, r1
		}
		if(sensor_light < (ths_light-25) & ~light_set)
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	50 e0       	ldi	r21, 0x00	; 0
     23e:	49 51       	subi	r20, 0x19	; 25
     240:	50 40       	sbci	r21, 0x00	; 0
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	24 17       	cp	r18, r20
     248:	35 07       	cpc	r19, r21
     24a:	14 f0       	brlt	.+4      	; 0x250 <auto_regulator+0x4c>
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	20 91 04 01 	lds	r18, 0x0104
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	20 95       	com	r18
     258:	30 95       	com	r19
     25a:	82 23       	and	r24, r18
     25c:	93 23       	and	r25, r19
     25e:	00 97       	sbiw	r24, 0x00	; 0
     260:	19 f0       	breq	.+6      	; 0x268 <auto_regulator+0x64>
		{
			light_set = 1;
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	80 93 04 01 	sts	0x0104, r24
		}
		if (celsius > ths_temp);
		{
			temp_set = 0;
     268:	10 92 05 01 	sts	0x0105, r1
		}
		if (celsius < (ths_temp - 2) & ~temp_set)
     26c:	20 91 08 04 	lds	r18, 0x0408
     270:	30 91 09 04 	lds	r19, 0x0409
     274:	22 50       	subi	r18, 0x02	; 2
     276:	30 40       	sbci	r19, 0x00	; 0
     278:	80 91 06 04 	lds	r24, 0x0406
     27c:	90 91 07 04 	lds	r25, 0x0407
     280:	82 17       	cp	r24, r18
     282:	93 07       	cpc	r25, r19
     284:	1c f4       	brge	.+6      	; 0x28c <auto_regulator+0x88>
		{
			temp_set = 1;
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	80 93 05 01 	sts	0x0105, r24
		
		/*
		if light sensor is higher than ths_light and celsius is higher than ths_temp.
		turn on red light = open
		*/
		if (light_set && temp_set)
     28c:	80 91 04 01 	lds	r24, 0x0104
     290:	88 23       	and	r24, r24
     292:	39 f0       	breq	.+14     	; 0x2a2 <auto_regulator+0x9e>
     294:	80 91 05 01 	lds	r24, 0x0105
     298:	88 23       	and	r24, r24
     29a:	19 f0       	breq	.+6      	; 0x2a2 <auto_regulator+0x9e>
		{
			PORTB = 4; //opgerold
     29c:	84 e0       	ldi	r24, 0x04	; 4
     29e:	85 b9       	out	0x05, r24	; 5
     2a0:	08 95       	ret
		}
		
		else
		{
			PORTB = 1; //uitgerold
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	85 b9       	out	0x05, r24	; 5
     2a6:	08 95       	ret
		}
	}
	else
	{
		PORTB ^= 2;
     2a8:	95 b1       	in	r25, 0x05	; 5
     2aa:	82 e0       	ldi	r24, 0x02	; 2
     2ac:	89 27       	eor	r24, r25
     2ae:	85 b9       	out	0x05, r24	; 5
     2b0:	08 95       	ret

000002b2 <init_leds>:
// 					
// }

void init_leds()
{
	DDRB = 0xFF;
     2b2:	8f ef       	ldi	r24, 0xFF	; 255
     2b4:	84 b9       	out	0x04, r24	; 4
	int mode;
	mode = get_shutter_mode(); //get_shutter_mode
     2b6:	0e 94 d5 01 	call	0x3aa	; 0x3aa <get_shutter_mode>
     2ba:	90 e0       	ldi	r25, 0x00	; 0
	
	if (mode == 1)
     2bc:	81 30       	cpi	r24, 0x01	; 1
     2be:	91 05       	cpc	r25, r1
     2c0:	a1 f4       	brne	.+40     	; 0x2ea <init_leds+0x38>
	{
		celsius = read_sensor_temp(); //read_celsuis
     2c2:	0e 94 bb 08 	call	0x1176	; 0x1176 <read_sensor_temp>
     2c6:	99 27       	eor	r25, r25
     2c8:	87 fd       	sbrc	r24, 7
     2ca:	90 95       	com	r25
     2cc:	90 93 07 04 	sts	0x0407, r25
     2d0:	80 93 06 04 	sts	0x0406, r24
		sensor_dist = read_sensor_dist(); //read_dist
     2d4:	0e 94 a8 00 	call	0x150	; 0x150 <read_sensor_dist>
     2d8:	80 93 05 04 	sts	0x0405, r24
		sensor_light = read_sensor_light(); //read_light
     2dc:	0e 94 8e 01 	call	0x31c	; 0x31c <read_sensor_light>
     2e0:	80 93 0a 04 	sts	0x040A, r24
		auto_regulator();
     2e4:	0e 94 02 01 	call	0x204	; 0x204 <auto_regulator>
     2e8:	08 95       	ret
	}
	else if (mode == 0)
     2ea:	00 97       	sbiw	r24, 0x00	; 0
     2ec:	21 f4       	brne	.+8      	; 0x2f6 <init_leds+0x44>
	{
		sensor_dist = read_sensor_dist();
     2ee:	0e 94 a8 00 	call	0x150	; 0x150 <read_sensor_dist>
     2f2:	80 93 05 04 	sts	0x0405, r24
     2f6:	08 95       	ret

000002f8 <init_adc_light>:

void init_adc_light()
{
	// ref=Vcc, left adjust the result (8 bit resolution),
	// select channel 0 (PC1 = input)
	ADMUX = (1<<REFS0)|(1<<ADLAR)|(1<<0);
     2f8:	81 e6       	ldi	r24, 0x61	; 97
     2fa:	80 93 7c 00 	sts	0x007C, r24
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     2fe:	87 e8       	ldi	r24, 0x87	; 135
     300:	80 93 7a 00 	sts	0x007A, r24
}
     304:	08 95       	ret

00000306 <get_adc_value_light>:

uint8_t get_adc_value_light()
{
	ADCSRA |= (1<<ADSC); // start conversion
     306:	ea e7       	ldi	r30, 0x7A	; 122
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	80 81       	ld	r24, Z
     30c:	80 64       	ori	r24, 0x40	; 64
     30e:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     310:	80 81       	ld	r24, Z
     312:	86 fd       	sbrc	r24, 6
     314:	fd cf       	rjmp	.-6      	; 0x310 <get_adc_value_light+0xa>
	return ADCH; // ms 8 bits
     316:	80 91 79 00 	lds	r24, 0x0079
}
     31a:	08 95       	ret

0000031c <read_sensor_light>:

int8_t read_sensor_light()
{
	int sensor_light;
	init_adc_light();
     31c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <init_adc_light>
	sensor_light = get_adc_value_light();
     320:	0e 94 83 01 	call	0x306	; 0x306 <get_adc_value_light>
	return sensor_light;
	

     324:	08 95       	ret

00000326 <set_shutter_mode>:
#include "serial.h"
#include "protocolhandeler.h"

/*Setters*/
void set_shutter_mode(uint8_t shutter_mode)
{
     326:	68 2f       	mov	r22, r24
	eeprom_update_byte((uint8_t*)shutter_mode_adr, shutter_mode);
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__eeupd_byte_m328p>
}
     330:	08 95       	ret

00000332 <set_shutter_state>:

void set_shutter_state(uint8_t shutter_state)
{
     332:	68 2f       	mov	r22, r24
	eeprom_update_byte((uint8_t*)shutter_state_adr, shutter_state);
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__eeupd_byte_m328p>
}
     33c:	08 95       	ret

0000033e <set_ths_temp>:

void set_ths_temp(int16_t ths_temp)
{
     33e:	68 2f       	mov	r22, r24
	eeprom_update_byte((int16_t*)ths_temp_adr, ths_temp);
     340:	82 e0       	ldi	r24, 0x02	; 2
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__eeupd_byte_m328p>
}
     348:	08 95       	ret

0000034a <set_ths_light>:

void set_ths_light(uint8_t ths_light)
{
     34a:	68 2f       	mov	r22, r24
	eeprom_update_byte((uint8_t*)ths_light_adr, ths_light);
     34c:	83 e0       	ldi	r24, 0x03	; 3
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__eeupd_byte_m328p>
}
     354:	08 95       	ret

00000356 <set_ths_dist>:

void set_ths_dist(uint8_t ths_dist)
{
     356:	68 2f       	mov	r22, r24
	eeprom_update_byte((uint8_t*)ths_dist_adr, ths_dist);
     358:	84 e0       	ldi	r24, 0x04	; 4
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__eeupd_byte_m328p>
}
     360:	08 95       	ret

00000362 <set_arduino_name>:

set_arduino_name(char* str)
{
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	cf 93       	push	r28
     368:	8c 01       	movw	r16, r24
	uint8_t i = 0;
     36a:	c0 e0       	ldi	r28, 0x00	; 0
	while(strlen(str)>i)
     36c:	08 c0       	rjmp	.+16     	; 0x37e <set_arduino_name+0x1c>
	{
		eeprom_update_byte((char*)name_start_adr+i, str[i]);
     36e:	f8 01       	movw	r30, r16
     370:	e8 0f       	add	r30, r24
     372:	f9 1f       	adc	r31, r25
     374:	05 96       	adiw	r24, 0x05	; 5
     376:	60 81       	ld	r22, Z
     378:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__eeupd_byte_m328p>
		i++;
     37c:	cf 5f       	subi	r28, 0xFF	; 255
}

set_arduino_name(char* str)
{
	uint8_t i = 0;
	while(strlen(str)>i)
     37e:	e0 2f       	mov	r30, r16
     380:	f1 2f       	mov	r31, r17
     382:	df 01       	movw	r26, r30
     384:	0d 90       	ld	r0, X+
     386:	00 20       	and	r0, r0
     388:	e9 f7       	brne	.-6      	; 0x384 <set_arduino_name+0x22>
     38a:	11 97       	sbiw	r26, 0x01	; 1
     38c:	ae 1b       	sub	r26, r30
     38e:	bf 0b       	sbc	r27, r31
     390:	8c 2f       	mov	r24, r28
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	8a 17       	cp	r24, r26
     396:	9b 07       	cpc	r25, r27
     398:	50 f3       	brcs	.-44     	; 0x36e <set_arduino_name+0xc>
	{
		eeprom_update_byte((char*)name_start_adr+i, str[i]);
		i++;
	}
	eeprom_update_byte((char*)name_start_adr+i, '\0');
     39a:	05 96       	adiw	r24, 0x05	; 5
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <__eeupd_byte_m328p>
}
     3a2:	cf 91       	pop	r28
     3a4:	1f 91       	pop	r17
     3a6:	0f 91       	pop	r16
     3a8:	08 95       	ret

000003aa <get_shutter_mode>:

/*Getters*/
uint8_t get_shutter_mode()
{
	return eeprom_read_byte((uint8_t*)shutter_mode_adr);
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__eerd_byte_m328p>
}
     3b2:	08 95       	ret

000003b4 <get_shutter_state>:

uint8_t get_shutter_state()
{
	return eeprom_read_byte((uint8_t*)shutter_state_adr);
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__eerd_byte_m328p>
}
     3bc:	08 95       	ret

000003be <get_ths_temp>:

int16_t get_ths_temp()
{
	return eeprom_read_byte((uint16_t*)ths_temp_adr);
     3be:	82 e0       	ldi	r24, 0x02	; 2
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__eerd_byte_m328p>
}
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	08 95       	ret

000003ca <get_ths_light>:

uint8_t get_ths_light()
{
	return eeprom_read_byte((uint8_t*)ths_light_adr);
     3ca:	83 e0       	ldi	r24, 0x03	; 3
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__eerd_byte_m328p>
}
     3d2:	08 95       	ret

000003d4 <get_ths_dist>:

uint8_t get_ths_dist()
{
	return eeprom_read_byte((uint8_t*)ths_dist_adr);
     3d4:	84 e0       	ldi	r24, 0x04	; 4
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__eerd_byte_m328p>
}
     3dc:	08 95       	ret

000003de <get_arduino_name>:

char* get_arduino_name()
{
     3de:	ff 92       	push	r15
     3e0:	0f 93       	push	r16
     3e2:	1f 93       	push	r17
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	cd b7       	in	r28, 0x3d	; 61
     3ea:	de b7       	in	r29, 0x3e	; 62
     3ec:	64 97       	sbiw	r28, 0x14	; 20
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	f8 94       	cli
     3f2:	de bf       	out	0x3e, r29	; 62
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0;
     3f8:	ff 24       	eor	r15, r15
	uint8_t str[20];
	do
	{
		str[i] = eeprom_read_byte((char*)name_start_adr+i);
     3fa:	0f 2d       	mov	r16, r15
     3fc:	10 e0       	ldi	r17, 0x00	; 0
     3fe:	c8 01       	movw	r24, r16
     400:	05 96       	adiw	r24, 0x05	; 5
     402:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__eerd_byte_m328p>
     406:	e1 e0       	ldi	r30, 0x01	; 1
     408:	f0 e0       	ldi	r31, 0x00	; 0
     40a:	ec 0f       	add	r30, r28
     40c:	fd 1f       	adc	r31, r29
     40e:	e0 0f       	add	r30, r16
     410:	f1 1f       	adc	r31, r17
     412:	80 83       	st	Z, r24
		i++;
     414:	f3 94       	inc	r15
	}while(str[i-1] != '\0');
     416:	fe 01       	movw	r30, r28
     418:	ef 0d       	add	r30, r15
     41a:	f1 1d       	adc	r31, r1
     41c:	80 81       	ld	r24, Z
     41e:	88 23       	and	r24, r24
     420:	61 f7       	brne	.-40     	; 0x3fa <get_arduino_name+0x1c>
	return str;
}
     422:	ce 01       	movw	r24, r28
     424:	01 96       	adiw	r24, 0x01	; 1
     426:	64 96       	adiw	r28, 0x14	; 20
     428:	0f b6       	in	r0, 0x3f	; 63
     42a:	f8 94       	cli
     42c:	de bf       	out	0x3e, r29	; 62
     42e:	0f be       	out	0x3f, r0	; 63
     430:	cd bf       	out	0x3d, r28	; 61
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	0f 91       	pop	r16
     43a:	ff 90       	pop	r15
     43c:	08 95       	ret

0000043e <open_screen>:

int open_screen()
{
	if (get_shutter_state() != OPEN)
     43e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <get_shutter_state>
     442:	81 30       	cpi	r24, 0x01	; 1
     444:	31 f0       	breq	.+12     	; 0x452 <open_screen+0x14>
	{
		set_shutter_state(1);
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	0e 94 99 01 	call	0x332	; 0x332 <set_shutter_state>
		return 1;
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	08 95       	ret
	}
	return 0;
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	90 e0       	ldi	r25, 0x00	; 0
}
     456:	08 95       	ret

00000458 <close_screen>:

int close_screen()
{
	if (get_shutter_state() != CLOSED)
     458:	0e 94 da 01 	call	0x3b4	; 0x3b4 <get_shutter_state>
     45c:	88 23       	and	r24, r24
     45e:	31 f0       	breq	.+12     	; 0x46c <close_screen+0x14>
	{
		set_shutter_state(0);
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	0e 94 99 01 	call	0x332	; 0x332 <set_shutter_state>
		return 1;
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	08 95       	ret
	}
	return 0;
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	90 e0       	ldi	r25, 0x00	; 0
}
     470:	08 95       	ret

00000472 <numbers_only>:
{
	while (*s) {
		if (isdigit(*s++) == 0) return 0;
	}

	return 1;
     472:	e8 2f       	mov	r30, r24
     474:	f9 2f       	mov	r31, r25
}

//Source: https://stackoverflow.com/questions/14422775/how-to-check-a-given-string-contains-only-number-or-not-in-c
int numbers_only(const char *s)
{
	while (*s) {
     476:	05 c0       	rjmp	.+10     	; 0x482 <numbers_only+0x10>
		if (isdigit(*s++) == 0) return 0;
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	c0 97       	sbiw	r24, 0x30	; 48
     47c:	8a 30       	cpi	r24, 0x0A	; 10
     47e:	91 05       	cpc	r25, r1
     480:	30 f4       	brcc	.+12     	; 0x48e <numbers_only+0x1c>
}

//Source: https://stackoverflow.com/questions/14422775/how-to-check-a-given-string-contains-only-number-or-not-in-c
int numbers_only(const char *s)
{
	while (*s) {
     482:	81 91       	ld	r24, Z+
     484:	88 23       	and	r24, r24
     486:	c1 f7       	brne	.-16     	; 0x478 <numbers_only+0x6>
		if (isdigit(*s++) == 0) return 0;
	}

	return 1;
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	08 95       	ret

//Source: https://stackoverflow.com/questions/14422775/how-to-check-a-given-string-contains-only-number-or-not-in-c
int numbers_only(const char *s)
{
	while (*s) {
		if (isdigit(*s++) == 0) return 0;
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	90 e0       	ldi	r25, 0x00	; 0
	}

	return 1;
}
     492:	08 95       	ret

00000494 <read_command>:

void read_command()
{
     494:	af 92       	push	r10
     496:	bf 92       	push	r11
     498:	cf 92       	push	r12
     49a:	df 92       	push	r13
     49c:	ef 92       	push	r14
     49e:	ff 92       	push	r15
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
     4ac:	c4 5b       	subi	r28, 0xB4	; 180
     4ae:	d0 40       	sbci	r29, 0x00	; 0
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	f8 94       	cli
     4b4:	de bf       	out	0x3e, r29	; 62
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	cd bf       	out	0x3d, r28	; 61
	char arg[20];
	char inputbuffer[30];
	char response[100];

	//Reading command
	read_ser(inputbuffer, sizeof(inputbuffer));
     4ba:	ce 01       	movw	r24, r28
     4bc:	c3 96       	adiw	r24, 0x33	; 51
     4be:	6e e1       	ldi	r22, 0x1E	; 30
     4c0:	70 e0       	ldi	r23, 0x00	; 0
     4c2:	0e 94 81 08 	call	0x1102	; 0x1102 <read_ser>
	
	if (inputbuffer[0] == '\0')
     4c6:	2b a9       	sts	0x4b, r18
     4c8:	22 23       	and	r18, r18
     4ca:	09 f4       	brne	.+2      	; 0x4ce <read_command+0x3a>
     4cc:	f9 c4       	rjmp	.+2546   	; 0xec0 <__stack+0x5c1>
	{
		return;
	}
	
	int i = 0;
	while (inputbuffer[i] != ' ' && inputbuffer[i] != '\0')
     4ce:	20 32       	cpi	r18, 0x20	; 32
     4d0:	71 f0       	breq	.+28     	; 0x4ee <read_command+0x5a>
     4d2:	de 01       	movw	r26, r28
     4d4:	11 96       	adiw	r26, 0x01	; 1
     4d6:	fe 01       	movw	r30, r28
     4d8:	f4 96       	adiw	r30, 0x34	; 52
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	90 e0       	ldi	r25, 0x00	; 0
	{
		commando[i] = inputbuffer[i];
     4de:	2d 93       	st	X+, r18
		i++;
     4e0:	01 96       	adiw	r24, 0x01	; 1
	{
		return;
	}
	
	int i = 0;
	while (inputbuffer[i] != ' ' && inputbuffer[i] != '\0')
     4e2:	21 91       	ld	r18, Z+
     4e4:	20 32       	cpi	r18, 0x20	; 32
     4e6:	29 f0       	breq	.+10     	; 0x4f2 <read_command+0x5e>
     4e8:	22 23       	and	r18, r18
     4ea:	c9 f7       	brne	.-14     	; 0x4de <read_command+0x4a>
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <read_command+0x5e>
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
	{
		commando[i] = inputbuffer[i];
		i++;
	}
	commando[i] = '\0';
     4f2:	fe 01       	movw	r30, r28
     4f4:	e8 0f       	add	r30, r24
     4f6:	f9 1f       	adc	r31, r25
     4f8:	11 82       	std	Z+1, r1	; 0x01

	i++; //Spatie skippen
	int j = 0;

	while (inputbuffer[i] != ' ' && inputbuffer[i] != '\0')
     4fa:	fe 01       	movw	r30, r28
     4fc:	e8 0f       	add	r30, r24
     4fe:	f9 1f       	adc	r31, r25
     500:	44 a9       	sts	0x44, r20
     502:	40 32       	cpi	r20, 0x20	; 32
     504:	99 f0       	breq	.+38     	; 0x52c <read_command+0x98>
     506:	44 23       	and	r20, r20
     508:	a1 f0       	breq	.+40     	; 0x532 <read_command+0x9e>
     50a:	fe 01       	movw	r30, r28
     50c:	7f 96       	adiw	r30, 0x1f	; 31
     50e:	8c 0f       	add	r24, r28
     510:	9d 1f       	adc	r25, r29
	}

	return 1;
}

void read_command()
     512:	dc 01       	movw	r26, r24
     514:	d5 96       	adiw	r26, 0x35	; 53
		i++;
	}
	commando[i] = '\0';

	i++; //Spatie skippen
	int j = 0;
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	30 e0       	ldi	r19, 0x00	; 0

	while (inputbuffer[i] != ' ' && inputbuffer[i] != '\0')
	{
		arg[j] = inputbuffer[i];
     51a:	41 93       	st	Z+, r20
		i++;
		j++;
     51c:	2f 5f       	subi	r18, 0xFF	; 255
     51e:	3f 4f       	sbci	r19, 0xFF	; 255
	commando[i] = '\0';

	i++; //Spatie skippen
	int j = 0;

	while (inputbuffer[i] != ' ' && inputbuffer[i] != '\0')
     520:	4d 91       	ld	r20, X+
     522:	40 32       	cpi	r20, 0x20	; 32
     524:	41 f0       	breq	.+16     	; 0x536 <read_command+0xa2>
     526:	44 23       	and	r20, r20
     528:	c1 f7       	brne	.-16     	; 0x51a <read_command+0x86>
     52a:	05 c0       	rjmp	.+10     	; 0x536 <read_command+0xa2>
		i++;
	}
	commando[i] = '\0';

	i++; //Spatie skippen
	int j = 0;
     52c:	20 e0       	ldi	r18, 0x00	; 0
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	02 c0       	rjmp	.+4      	; 0x536 <read_command+0xa2>
     532:	20 e0       	ldi	r18, 0x00	; 0
     534:	30 e0       	ldi	r19, 0x00	; 0
		arg[j] = inputbuffer[i];
		i++;
		j++;
	}

	arg[j] = '\0';
     536:	2c 0f       	add	r18, r28
     538:	3d 1f       	adc	r19, r29
     53a:	d9 01       	movw	r26, r18
     53c:	5f 96       	adiw	r26, 0x1f	; 31
     53e:	1c 92       	st	X, r1

	//Handshake to verify we are indeed Groot
	if (strcmp(commando, "WHO_ARE_YOU") == 0)
     540:	ce 01       	movw	r24, r28
     542:	01 96       	adiw	r24, 0x01	; 1
     544:	66 e0       	ldi	r22, 0x06	; 6
     546:	71 e0       	ldi	r23, 0x01	; 1
     548:	0e 94 b5 0a 	call	0x156a	; 0x156a <strcmp>
     54c:	28 2f       	mov	r18, r24
     54e:	39 2f       	mov	r19, r25
     550:	21 15       	cp	r18, r1
     552:	31 05       	cpc	r19, r1
     554:	21 f4       	brne	.+8      	; 0x55e <read_command+0xca>
	{
		write_ser("I AM GROOT");
     556:	82 e1       	ldi	r24, 0x12	; 18
     558:	91 e0       	ldi	r25, 0x01	; 1
     55a:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
	}

	//Provide controller with all default settings
	if (strcmp(commando, "GET_SETTINGS")==0)
     55e:	ce 01       	movw	r24, r28
     560:	01 96       	adiw	r24, 0x01	; 1
     562:	6d e1       	ldi	r22, 0x1D	; 29
     564:	71 e0       	ldi	r23, 0x01	; 1
     566:	0e 94 b5 0a 	call	0x156a	; 0x156a <strcmp>
     56a:	28 2f       	mov	r18, r24
     56c:	39 2f       	mov	r19, r25
     56e:	21 15       	cp	r18, r1
     570:	31 05       	cpc	r19, r1
     572:	d9 f5       	brne	.+118    	; 0x5ea <read_command+0x156>
	{
		sprintf(response, "%s %i %i %i %i", get_arduino_name(), get_shutter_mode(), get_shutter_state(), get_ths_temp(), get_ths_dist());
     574:	0e 94 ef 01 	call	0x3de	; 0x3de <get_arduino_name>
     578:	6c 01       	movw	r12, r24
     57a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <get_shutter_mode>
     57e:	f8 2e       	mov	r15, r24
     580:	0e 94 da 01 	call	0x3b4	; 0x3b4 <get_shutter_state>
     584:	e8 2e       	mov	r14, r24
     586:	0e 94 df 01 	call	0x3be	; 0x3be <get_ths_temp>
     58a:	5c 01       	movw	r10, r24
     58c:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <get_ths_dist>
     590:	ed b7       	in	r30, 0x3d	; 61
     592:	fe b7       	in	r31, 0x3e	; 62
     594:	3e 97       	sbiw	r30, 0x0e	; 14
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	fe bf       	out	0x3e, r31	; 62
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	ed bf       	out	0x3d, r30	; 61
     5a0:	31 96       	adiw	r30, 0x01	; 1
     5a2:	8e 01       	movw	r16, r28
     5a4:	0f 5a       	subi	r16, 0xAF	; 175
     5a6:	1f 4f       	sbci	r17, 0xFF	; 255
     5a8:	ad b7       	in	r26, 0x3d	; 61
     5aa:	be b7       	in	r27, 0x3e	; 62
     5ac:	12 96       	adiw	r26, 0x02	; 2
     5ae:	1c 93       	st	X, r17
     5b0:	0e 93       	st	-X, r16
     5b2:	11 97       	sbiw	r26, 0x01	; 1
     5b4:	2a e2       	ldi	r18, 0x2A	; 42
     5b6:	31 e0       	ldi	r19, 0x01	; 1
     5b8:	33 83       	std	Z+3, r19	; 0x03
     5ba:	22 83       	std	Z+2, r18	; 0x02
     5bc:	d5 82       	std	Z+5, r13	; 0x05
     5be:	c4 82       	std	Z+4, r12	; 0x04
     5c0:	f6 82       	std	Z+6, r15	; 0x06
     5c2:	17 82       	std	Z+7, r1	; 0x07
     5c4:	e0 86       	std	Z+8, r14	; 0x08
     5c6:	11 86       	std	Z+9, r1	; 0x09
     5c8:	b3 86       	std	Z+11, r11	; 0x0b
     5ca:	a2 86       	std	Z+10, r10	; 0x0a
     5cc:	84 87       	std	Z+12, r24	; 0x0c
     5ce:	15 86       	std	Z+13, r1	; 0x0d
     5d0:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <sprintf>
		write_ser(response);
     5d4:	ed b7       	in	r30, 0x3d	; 61
     5d6:	fe b7       	in	r31, 0x3e	; 62
     5d8:	3e 96       	adiw	r30, 0x0e	; 14
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	fe bf       	out	0x3e, r31	; 62
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	ed bf       	out	0x3d, r30	; 61
     5e4:	c8 01       	movw	r24, r16
     5e6:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
	}

	//If tree to handle all GETTERS
	if (strcmp(commando, "GET_NAME") == 0)
     5ea:	ce 01       	movw	r24, r28
     5ec:	01 96       	adiw	r24, 0x01	; 1
     5ee:	69 e3       	ldi	r22, 0x39	; 57
     5f0:	71 e0       	ldi	r23, 0x01	; 1
     5f2:	0e 94 b5 0a 	call	0x156a	; 0x156a <strcmp>
     5f6:	28 2f       	mov	r18, r24
     5f8:	39 2f       	mov	r19, r25
     5fa:	21 15       	cp	r18, r1
     5fc:	31 05       	cpc	r19, r1
     5fe:	59 f5       	brne	.+86     	; 0x656 <read_command+0x1c2>
	{
		if (get_arduino_name() !=NULL)
     600:	0e 94 ef 01 	call	0x3de	; 0x3de <get_arduino_name>
     604:	00 97       	sbiw	r24, 0x00	; 0
     606:	19 f1       	breq	.+70     	; 0x64e <read_command+0x1ba>
		{
			sprintf(response, "OK %s", get_arduino_name());
     608:	00 d0       	rcall	.+0      	; 0x60a <read_command+0x176>
     60a:	00 d0       	rcall	.+0      	; 0x60c <read_command+0x178>
     60c:	00 d0       	rcall	.+0      	; 0x60e <read_command+0x17a>
     60e:	ed b7       	in	r30, 0x3d	; 61
     610:	fe b7       	in	r31, 0x3e	; 62
     612:	31 96       	adiw	r30, 0x01	; 1
     614:	8e 01       	movw	r16, r28
     616:	0f 5a       	subi	r16, 0xAF	; 175
     618:	1f 4f       	sbci	r17, 0xFF	; 255
     61a:	ad b7       	in	r26, 0x3d	; 61
     61c:	be b7       	in	r27, 0x3e	; 62
     61e:	12 96       	adiw	r26, 0x02	; 2
     620:	1c 93       	st	X, r17
     622:	0e 93       	st	-X, r16
     624:	11 97       	sbiw	r26, 0x01	; 1
     626:	22 e4       	ldi	r18, 0x42	; 66
     628:	31 e0       	ldi	r19, 0x01	; 1
     62a:	33 83       	std	Z+3, r19	; 0x03
     62c:	22 83       	std	Z+2, r18	; 0x02
     62e:	95 83       	std	Z+5, r25	; 0x05
     630:	84 83       	std	Z+4, r24	; 0x04
     632:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <sprintf>
			write_ser(response);
     636:	ed b7       	in	r30, 0x3d	; 61
     638:	fe b7       	in	r31, 0x3e	; 62
     63a:	36 96       	adiw	r30, 0x06	; 6
     63c:	0f b6       	in	r0, 0x3f	; 63
     63e:	f8 94       	cli
     640:	fe bf       	out	0x3e, r31	; 62
     642:	0f be       	out	0x3f, r0	; 63
     644:	ed bf       	out	0x3d, r30	; 61
     646:	c8 01       	movw	r24, r16
     648:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
     64c:	04 c0       	rjmp	.+8      	; 0x656 <read_command+0x1c2>
		}
		else
		{
			write_ser("ERROR 601: Name is not set");
     64e:	88 e4       	ldi	r24, 0x48	; 72
     650:	91 e0       	ldi	r25, 0x01	; 1
     652:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
		}
	}

	if (strcmp(commando, "GET_STATE") == 0)
     656:	ce 01       	movw	r24, r28
     658:	01 96       	adiw	r24, 0x01	; 1
     65a:	63 e6       	ldi	r22, 0x63	; 99
     65c:	71 e0       	ldi	r23, 0x01	; 1
     65e:	0e 94 b5 0a 	call	0x156a	; 0x156a <strcmp>
     662:	28 2f       	mov	r18, r24
     664:	39 2f       	mov	r19, r25
     666:	21 15       	cp	r18, r1
     668:	31 05       	cpc	r19, r1
     66a:	09 f0       	breq	.+2      	; 0x66e <read_command+0x1da>
     66c:	4b c0       	rjmp	.+150    	; 0x704 <read_command+0x270>
	{
		if (get_shutter_state() == OPEN || get_shutter_state() == CLOSED)
     66e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <get_shutter_state>
     672:	81 30       	cpi	r24, 0x01	; 1
     674:	11 f0       	breq	.+4      	; 0x67a <read_command+0x1e6>
     676:	88 23       	and	r24, r24
     678:	19 f5       	brne	.+70     	; 0x6c0 <read_command+0x22c>
		{
			sprintf(response, "OK %i", get_shutter_state());
     67a:	00 d0       	rcall	.+0      	; 0x67c <read_command+0x1e8>
     67c:	00 d0       	rcall	.+0      	; 0x67e <read_command+0x1ea>
     67e:	00 d0       	rcall	.+0      	; 0x680 <read_command+0x1ec>
     680:	ed b7       	in	r30, 0x3d	; 61
     682:	fe b7       	in	r31, 0x3e	; 62
     684:	31 96       	adiw	r30, 0x01	; 1
     686:	8e 01       	movw	r16, r28
     688:	0f 5a       	subi	r16, 0xAF	; 175
     68a:	1f 4f       	sbci	r17, 0xFF	; 255
     68c:	ad b7       	in	r26, 0x3d	; 61
     68e:	be b7       	in	r27, 0x3e	; 62
     690:	12 96       	adiw	r26, 0x02	; 2
     692:	1c 93       	st	X, r17
     694:	0e 93       	st	-X, r16
     696:	11 97       	sbiw	r26, 0x01	; 1
     698:	2d e6       	ldi	r18, 0x6D	; 109
     69a:	31 e0       	ldi	r19, 0x01	; 1
     69c:	33 83       	std	Z+3, r19	; 0x03
     69e:	22 83       	std	Z+2, r18	; 0x02
     6a0:	84 83       	std	Z+4, r24	; 0x04
     6a2:	15 82       	std	Z+5, r1	; 0x05
     6a4:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <sprintf>
			write_ser(response);
     6a8:	ed b7       	in	r30, 0x3d	; 61
     6aa:	fe b7       	in	r31, 0x3e	; 62
     6ac:	36 96       	adiw	r30, 0x06	; 6
     6ae:	0f b6       	in	r0, 0x3f	; 63
     6b0:	f8 94       	cli
     6b2:	fe bf       	out	0x3e, r31	; 62
     6b4:	0f be       	out	0x3f, r0	; 63
     6b6:	ed bf       	out	0x3d, r30	; 61
     6b8:	c8 01       	movw	r24, r16
     6ba:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
	}

	if (strcmp(commando, "GET_STATE") == 0)
	{
		if (get_shutter_state() == OPEN || get_shutter_state() == CLOSED)
		{
     6be:	22 c0       	rjmp	.+68     	; 0x704 <read_command+0x270>
			sprintf(response, "OK %i", get_shutter_state());
			write_ser(response);
		}
		else
		{
			sprintf(response, "ERROR 601: Unrecognized screenstate %i", get_shutter_state());
     6c0:	00 d0       	rcall	.+0      	; 0x6c2 <read_command+0x22e>
     6c2:	00 d0       	rcall	.+0      	; 0x6c4 <read_command+0x230>
     6c4:	00 d0       	rcall	.+0      	; 0x6c6 <read_command+0x232>
     6c6:	ed b7       	in	r30, 0x3d	; 61
     6c8:	fe b7       	in	r31, 0x3e	; 62
     6ca:	31 96       	adiw	r30, 0x01	; 1
     6cc:	8e 01       	movw	r16, r28
     6ce:	0f 5a       	subi	r16, 0xAF	; 175
     6d0:	1f 4f       	sbci	r17, 0xFF	; 255
     6d2:	ad b7       	in	r26, 0x3d	; 61
     6d4:	be b7       	in	r27, 0x3e	; 62
     6d6:	12 96       	adiw	r26, 0x02	; 2
     6d8:	1c 93       	st	X, r17
     6da:	0e 93       	st	-X, r16
     6dc:	11 97       	sbiw	r26, 0x01	; 1
     6de:	23 e7       	ldi	r18, 0x73	; 115
     6e0:	31 e0       	ldi	r19, 0x01	; 1
     6e2:	33 83       	std	Z+3, r19	; 0x03
     6e4:	22 83       	std	Z+2, r18	; 0x02
     6e6:	84 83       	std	Z+4, r24	; 0x04
     6e8:	15 82       	std	Z+5, r1	; 0x05
     6ea:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <sprintf>
			write_ser(response);
     6ee:	ed b7       	in	r30, 0x3d	; 61
     6f0:	fe b7       	in	r31, 0x3e	; 62
     6f2:	36 96       	adiw	r30, 0x06	; 6
     6f4:	0f b6       	in	r0, 0x3f	; 63
     6f6:	f8 94       	cli
     6f8:	fe bf       	out	0x3e, r31	; 62
     6fa:	0f be       	out	0x3f, r0	; 63
     6fc:	ed bf       	out	0x3d, r30	; 61
     6fe:	c8 01       	movw	r24, r16
     700:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
		}
	}

	if (strcmp(commando, "GET_MODE") == 0)
     704:	ce 01       	movw	r24, r28
     706:	01 96       	adiw	r24, 0x01	; 1
     708:	6a e9       	ldi	r22, 0x9A	; 154
     70a:	71 e0       	ldi	r23, 0x01	; 1
     70c:	0e 94 b5 0a 	call	0x156a	; 0x156a <strcmp>
     710:	28 2f       	mov	r18, r24
     712:	39 2f       	mov	r19, r25
     714:	21 15       	cp	r18, r1
     716:	31 05       	cpc	r19, r1
     718:	09 f0       	breq	.+2      	; 0x71c <read_command+0x288>
     71a:	4b c0       	rjmp	.+150    	; 0x7b2 <read_command+0x31e>
	{
		if (get_shutter_mode()==MANUAL || get_shutter_mode() == AUTO)
     71c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <get_shutter_mode>
     720:	88 23       	and	r24, r24
     722:	11 f0       	breq	.+4      	; 0x728 <read_command+0x294>
     724:	81 30       	cpi	r24, 0x01	; 1
     726:	19 f5       	brne	.+70     	; 0x76e <read_command+0x2da>
		{
			sprintf(response, "OK %i", get_shutter_mode());
     728:	00 d0       	rcall	.+0      	; 0x72a <read_command+0x296>
     72a:	00 d0       	rcall	.+0      	; 0x72c <read_command+0x298>
     72c:	00 d0       	rcall	.+0      	; 0x72e <read_command+0x29a>
     72e:	ed b7       	in	r30, 0x3d	; 61
     730:	fe b7       	in	r31, 0x3e	; 62
     732:	31 96       	adiw	r30, 0x01	; 1
     734:	8e 01       	movw	r16, r28
     736:	0f 5a       	subi	r16, 0xAF	; 175
     738:	1f 4f       	sbci	r17, 0xFF	; 255
     73a:	ad b7       	in	r26, 0x3d	; 61
     73c:	be b7       	in	r27, 0x3e	; 62
     73e:	12 96       	adiw	r26, 0x02	; 2
     740:	1c 93       	st	X, r17
     742:	0e 93       	st	-X, r16
     744:	11 97       	sbiw	r26, 0x01	; 1
     746:	2d e6       	ldi	r18, 0x6D	; 109
     748:	31 e0       	ldi	r19, 0x01	; 1
     74a:	33 83       	std	Z+3, r19	; 0x03
     74c:	22 83       	std	Z+2, r18	; 0x02
     74e:	84 83       	std	Z+4, r24	; 0x04
     750:	15 82       	std	Z+5, r1	; 0x05
     752:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <sprintf>
			write_ser(response);
     756:	ed b7       	in	r30, 0x3d	; 61
     758:	fe b7       	in	r31, 0x3e	; 62
     75a:	36 96       	adiw	r30, 0x06	; 6
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	fe bf       	out	0x3e, r31	; 62
     762:	0f be       	out	0x3f, r0	; 63
     764:	ed bf       	out	0x3d, r30	; 61
     766:	c8 01       	movw	r24, r16
     768:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
	}

	if (strcmp(commando, "GET_MODE") == 0)
	{
		if (get_shutter_mode()==MANUAL || get_shutter_mode() == AUTO)
		{
     76c:	22 c0       	rjmp	.+68     	; 0x7b2 <read_command+0x31e>
			sprintf(response, "OK %i", get_shutter_mode());
			write_ser(response);
		}
		else
		{
			sprintf(response, "ERROR 601: Unrecognized mode %i", get_shutter_mode());
     76e:	00 d0       	rcall	.+0      	; 0x770 <read_command+0x2dc>
     770:	00 d0       	rcall	.+0      	; 0x772 <read_command+0x2de>
     772:	00 d0       	rcall	.+0      	; 0x774 <read_command+0x2e0>
     774:	ed b7       	in	r30, 0x3d	; 61
     776:	fe b7       	in	r31, 0x3e	; 62
     778:	31 96       	adiw	r30, 0x01	; 1
     77a:	8e 01       	movw	r16, r28
     77c:	0f 5a       	subi	r16, 0xAF	; 175
     77e:	1f 4f       	sbci	r17, 0xFF	; 255
     780:	ad b7       	in	r26, 0x3d	; 61
     782:	be b7       	in	r27, 0x3e	; 62
     784:	12 96       	adiw	r26, 0x02	; 2
     786:	1c 93       	st	X, r17
     788:	0e 93       	st	-X, r16
     78a:	11 97       	sbiw	r26, 0x01	; 1
     78c:	23 ea       	ldi	r18, 0xA3	; 163
     78e:	31 e0       	ldi	r19, 0x01	; 1
     790:	33 83       	std	Z+3, r19	; 0x03
     792:	22 83       	std	Z+2, r18	; 0x02
     794:	84 83       	std	Z+4, r24	; 0x04
     796:	15 82       	std	Z+5, r1	; 0x05
     798:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <sprintf>
			write_ser(response);
     79c:	ed b7       	in	r30, 0x3d	; 61
     79e:	fe b7       	in	r31, 0x3e	; 62
     7a0:	36 96       	adiw	r30, 0x06	; 6
     7a2:	0f b6       	in	r0, 0x3f	; 63
     7a4:	f8 94       	cli
     7a6:	fe bf       	out	0x3e, r31	; 62
     7a8:	0f be       	out	0x3f, r0	; 63
     7aa:	ed bf       	out	0x3d, r30	; 61
     7ac:	c8 01       	movw	r24, r16
     7ae:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
		}
	}

	if (strcmp(commando, "GET_THS_TEMP") == 0)
     7b2:	ce 01       	movw	r24, r28
     7b4:	01 96       	adiw	r24, 0x01	; 1
     7b6:	63 ec       	ldi	r22, 0xC3	; 195
     7b8:	71 e0       	ldi	r23, 0x01	; 1
     7ba:	0e 94 b5 0a 	call	0x156a	; 0x156a <strcmp>
     7be:	28 2f       	mov	r18, r24
     7c0:	39 2f       	mov	r19, r25
     7c2:	21 15       	cp	r18, r1
     7c4:	31 05       	cpc	r19, r1
     7c6:	b1 f5       	brne	.+108    	; 0x834 <read_command+0x3a0>
	{
		if (get_ths_temp()!=NULL)
     7c8:	0e 94 df 01 	call	0x3be	; 0x3be <get_ths_temp>
     7cc:	00 97       	sbiw	r24, 0x00	; 0
     7ce:	19 f1       	breq	.+70     	; 0x816 <read_command+0x382>
		{
			sprintf(response, "OK %i", get_ths_temp());
     7d0:	00 d0       	rcall	.+0      	; 0x7d2 <read_command+0x33e>
     7d2:	00 d0       	rcall	.+0      	; 0x7d4 <read_command+0x340>
     7d4:	00 d0       	rcall	.+0      	; 0x7d6 <read_command+0x342>
     7d6:	ed b7       	in	r30, 0x3d	; 61
     7d8:	fe b7       	in	r31, 0x3e	; 62
     7da:	31 96       	adiw	r30, 0x01	; 1
     7dc:	8e 01       	movw	r16, r28
     7de:	0f 5a       	subi	r16, 0xAF	; 175
     7e0:	1f 4f       	sbci	r17, 0xFF	; 255
     7e2:	ad b7       	in	r26, 0x3d	; 61
     7e4:	be b7       	in	r27, 0x3e	; 62
     7e6:	12 96       	adiw	r26, 0x02	; 2
     7e8:	1c 93       	st	X, r17
     7ea:	0e 93       	st	-X, r16
     7ec:	11 97       	sbiw	r26, 0x01	; 1
     7ee:	2d e6       	ldi	r18, 0x6D	; 109
     7f0:	31 e0       	ldi	r19, 0x01	; 1
     7f2:	33 83       	std	Z+3, r19	; 0x03
     7f4:	22 83       	std	Z+2, r18	; 0x02
     7f6:	95 83       	std	Z+5, r25	; 0x05
     7f8:	84 83       	std	Z+4, r24	; 0x04
     7fa:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <sprintf>
			write_ser(response);
     7fe:	ed b7       	in	r30, 0x3d	; 61
     800:	fe b7       	in	r31, 0x3e	; 62
     802:	36 96       	adiw	r30, 0x06	; 6
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	f8 94       	cli
     808:	fe bf       	out	0x3e, r31	; 62
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	ed bf       	out	0x3d, r30	; 61
     80e:	c8 01       	movw	r24, r16
     810:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
     814:	0f c0       	rjmp	.+30     	; 0x834 <read_command+0x3a0>
		}
		else
		{
			sprintf(response, "ERROR 442: Could not read value");
     816:	de 01       	movw	r26, r28
     818:	af 5a       	subi	r26, 0xAF	; 175
     81a:	bf 4f       	sbci	r27, 0xFF	; 255
     81c:	e0 ed       	ldi	r30, 0xD0	; 208
     81e:	f1 e0       	ldi	r31, 0x01	; 1
     820:	80 e2       	ldi	r24, 0x20	; 32
     822:	01 90       	ld	r0, Z+
     824:	0d 92       	st	X+, r0
     826:	81 50       	subi	r24, 0x01	; 1
     828:	e1 f7       	brne	.-8      	; 0x822 <read_command+0x38e>
			write_ser(response);
     82a:	ce 01       	movw	r24, r28
     82c:	8f 5a       	subi	r24, 0xAF	; 175
     82e:	9f 4f       	sbci	r25, 0xFF	; 255
     830:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
		}
	}

	if (strcmp(commando, "GET_THS_DIST") == 0)
     834:	ce 01       	movw	r24, r28
     836:	01 96       	adiw	r24, 0x01	; 1
     838:	60 ef       	ldi	r22, 0xF0	; 240
     83a:	71 e0       	ldi	r23, 0x01	; 1
     83c:	0e 94 b5 0a 	call	0x156a	; 0x156a <strcmp>
     840:	28 2f       	mov	r18, r24
     842:	39 2f       	mov	r19, r25
     844:	21 15       	cp	r18, r1
     846:	31 05       	cpc	r19, r1
     848:	b9 f5       	brne	.+110    	; 0x8b8 <read_command+0x424>
	{
		if (get_ths_dist()!=NULL)
     84a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <get_ths_dist>
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	00 97       	sbiw	r24, 0x00	; 0
     852:	19 f1       	breq	.+70     	; 0x89a <read_command+0x406>
		{
			sprintf(response, "OK %i", get_ths_dist());
     854:	00 d0       	rcall	.+0      	; 0x856 <read_command+0x3c2>
     856:	00 d0       	rcall	.+0      	; 0x858 <read_command+0x3c4>
     858:	00 d0       	rcall	.+0      	; 0x85a <read_command+0x3c6>
     85a:	ed b7       	in	r30, 0x3d	; 61
     85c:	fe b7       	in	r31, 0x3e	; 62
     85e:	31 96       	adiw	r30, 0x01	; 1
     860:	8e 01       	movw	r16, r28
     862:	0f 5a       	subi	r16, 0xAF	; 175
     864:	1f 4f       	sbci	r17, 0xFF	; 255
     866:	ad b7       	in	r26, 0x3d	; 61
     868:	be b7       	in	r27, 0x3e	; 62
     86a:	12 96       	adiw	r26, 0x02	; 2
     86c:	1c 93       	st	X, r17
     86e:	0e 93       	st	-X, r16
     870:	11 97       	sbiw	r26, 0x01	; 1
     872:	2d e6       	ldi	r18, 0x6D	; 109
     874:	31 e0       	ldi	r19, 0x01	; 1
     876:	33 83       	std	Z+3, r19	; 0x03
     878:	22 83       	std	Z+2, r18	; 0x02
     87a:	95 83       	std	Z+5, r25	; 0x05
     87c:	84 83       	std	Z+4, r24	; 0x04
     87e:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <sprintf>
			write_ser(response);
     882:	ed b7       	in	r30, 0x3d	; 61
     884:	fe b7       	in	r31, 0x3e	; 62
     886:	36 96       	adiw	r30, 0x06	; 6
     888:	0f b6       	in	r0, 0x3f	; 63
     88a:	f8 94       	cli
     88c:	fe bf       	out	0x3e, r31	; 62
     88e:	0f be       	out	0x3f, r0	; 63
     890:	ed bf       	out	0x3d, r30	; 61
     892:	c8 01       	movw	r24, r16
     894:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
     898:	0f c0       	rjmp	.+30     	; 0x8b8 <read_command+0x424>
		}
		else
		{
			sprintf(response, "ERROR 444: Could not read value");
     89a:	de 01       	movw	r26, r28
     89c:	af 5a       	subi	r26, 0xAF	; 175
     89e:	bf 4f       	sbci	r27, 0xFF	; 255
     8a0:	ed ef       	ldi	r30, 0xFD	; 253
     8a2:	f1 e0       	ldi	r31, 0x01	; 1
     8a4:	80 e2       	ldi	r24, 0x20	; 32
     8a6:	01 90       	ld	r0, Z+
     8a8:	0d 92       	st	X+, r0
     8aa:	81 50       	subi	r24, 0x01	; 1
     8ac:	e1 f7       	brne	.-8      	; 0x8a6 <read_command+0x412>
			write_ser(response);
     8ae:	ce 01       	movw	r24, r28
     8b0:	8f 5a       	subi	r24, 0xAF	; 175
     8b2:	9f 4f       	sbci	r25, 0xFF	; 255
     8b4:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
		}
	}

	if (strcmp(commando, "GET_SENSOR_TEMP") == 0)
     8b8:	ce 01       	movw	r24, r28
     8ba:	01 96       	adiw	r24, 0x01	; 1
     8bc:	6d e1       	ldi	r22, 0x1D	; 29
     8be:	72 e0       	ldi	r23, 0x02	; 2
     8c0:	0e 94 b5 0a 	call	0x156a	; 0x156a <strcmp>
     8c4:	28 2f       	mov	r18, r24
     8c6:	39 2f       	mov	r19, r25
     8c8:	21 15       	cp	r18, r1
     8ca:	31 05       	cpc	r19, r1
     8cc:	09 f0       	breq	.+2      	; 0x8d0 <read_command+0x43c>
     8ce:	52 c0       	rjmp	.+164    	; 0x974 <__stack+0x75>
	{
		if (read_sensor_temp()!=NULL && read_sensor_temp() <= 50)
     8d0:	0e 94 bb 08 	call	0x1176	; 0x1176 <read_sensor_temp>
     8d4:	00 97       	sbiw	r24, 0x00	; 0
     8d6:	51 f1       	breq	.+84     	; 0x92c <__stack+0x2d>
     8d8:	0e 94 bb 08 	call	0x1176	; 0x1176 <read_sensor_temp>
     8dc:	83 33       	cpi	r24, 0x33	; 51
     8de:	91 05       	cpc	r25, r1
     8e0:	2c f5       	brge	.+74     	; 0x92c <__stack+0x2d>
		{
			sprintf(response, "OK %i", read_sensor_temp());
     8e2:	0e 94 bb 08 	call	0x1176	; 0x1176 <read_sensor_temp>
     8e6:	00 d0       	rcall	.+0      	; 0x8e8 <read_command+0x454>
     8e8:	00 d0       	rcall	.+0      	; 0x8ea <read_command+0x456>
     8ea:	00 d0       	rcall	.+0      	; 0x8ec <read_command+0x458>
     8ec:	ed b7       	in	r30, 0x3d	; 61
     8ee:	fe b7       	in	r31, 0x3e	; 62
     8f0:	31 96       	adiw	r30, 0x01	; 1
     8f2:	8e 01       	movw	r16, r28
     8f4:	0f 5a       	subi	r16, 0xAF	; 175
     8f6:	1f 4f       	sbci	r17, 0xFF	; 255
     8f8:	ad b7       	in	r26, 0x3d	; 61
     8fa:	be b7       	in	r27, 0x3e	; 62
     8fc:	12 96       	adiw	r26, 0x02	; 2
     8fe:	1c 93       	st	X, r17
     900:	0e 93       	st	-X, r16
     902:	11 97       	sbiw	r26, 0x01	; 1
     904:	2d e6       	ldi	r18, 0x6D	; 109
     906:	31 e0       	ldi	r19, 0x01	; 1
     908:	33 83       	std	Z+3, r19	; 0x03
     90a:	22 83       	std	Z+2, r18	; 0x02
     90c:	95 83       	std	Z+5, r25	; 0x05
     90e:	84 83       	std	Z+4, r24	; 0x04
     910:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <sprintf>
			write_ser(response);
     914:	ed b7       	in	r30, 0x3d	; 61
     916:	fe b7       	in	r31, 0x3e	; 62
     918:	36 96       	adiw	r30, 0x06	; 6
     91a:	0f b6       	in	r0, 0x3f	; 63
     91c:	f8 94       	cli
     91e:	fe bf       	out	0x3e, r31	; 62
     920:	0f be       	out	0x3f, r0	; 63
     922:	ed bf       	out	0x3d, r30	; 61
     924:	c8 01       	movw	r24, r16
     926:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
	}

	if (strcmp(commando, "GET_SENSOR_TEMP") == 0)
	{
		if (read_sensor_temp()!=NULL && read_sensor_temp() <= 50)
		{
     92a:	24 c0       	rjmp	.+72     	; 0x974 <__stack+0x75>
			sprintf(response, "OK %i", read_sensor_temp());
			write_ser(response);
		}
		else
		{
			sprintf(response, "ERROR 442: Unrealistic value %i. Sensor might be defect", read_sensor_temp());
     92c:	0e 94 bb 08 	call	0x1176	; 0x1176 <read_sensor_temp>
     930:	00 d0       	rcall	.+0      	; 0x932 <__stack+0x33>
     932:	00 d0       	rcall	.+0      	; 0x934 <__stack+0x35>
     934:	00 d0       	rcall	.+0      	; 0x936 <__stack+0x37>
     936:	ed b7       	in	r30, 0x3d	; 61
     938:	fe b7       	in	r31, 0x3e	; 62
     93a:	31 96       	adiw	r30, 0x01	; 1
     93c:	8e 01       	movw	r16, r28
     93e:	0f 5a       	subi	r16, 0xAF	; 175
     940:	1f 4f       	sbci	r17, 0xFF	; 255
     942:	ad b7       	in	r26, 0x3d	; 61
     944:	be b7       	in	r27, 0x3e	; 62
     946:	12 96       	adiw	r26, 0x02	; 2
     948:	1c 93       	st	X, r17
     94a:	0e 93       	st	-X, r16
     94c:	11 97       	sbiw	r26, 0x01	; 1
     94e:	2d e2       	ldi	r18, 0x2D	; 45
     950:	32 e0       	ldi	r19, 0x02	; 2
     952:	33 83       	std	Z+3, r19	; 0x03
     954:	22 83       	std	Z+2, r18	; 0x02
     956:	95 83       	std	Z+5, r25	; 0x05
     958:	84 83       	std	Z+4, r24	; 0x04
     95a:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <sprintf>
			write_ser(response);
     95e:	ed b7       	in	r30, 0x3d	; 61
     960:	fe b7       	in	r31, 0x3e	; 62
     962:	36 96       	adiw	r30, 0x06	; 6
     964:	0f b6       	in	r0, 0x3f	; 63
     966:	f8 94       	cli
     968:	fe bf       	out	0x3e, r31	; 62
     96a:	0f be       	out	0x3f, r0	; 63
     96c:	ed bf       	out	0x3d, r30	; 61
     96e:	c8 01       	movw	r24, r16
     970:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
		}
	}

	if (strcmp(commando, "GET_SENSOR_LIGHT") == 0)
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	65 e6       	ldi	r22, 0x65	; 101
     97a:	72 e0       	ldi	r23, 0x02	; 2
     97c:	0e 94 b5 0a 	call	0x156a	; 0x156a <strcmp>
     980:	28 2f       	mov	r18, r24
     982:	39 2f       	mov	r19, r25
     984:	21 15       	cp	r18, r1
     986:	31 05       	cpc	r19, r1
     988:	09 f0       	breq	.+2      	; 0x98c <__stack+0x8d>
     98a:	53 c0       	rjmp	.+166    	; 0xa32 <__stack+0x133>
	{
		if (read_sensor_light()!=NULL && read_sensor_light() <= 255)
     98c:	0e 94 8e 01 	call	0x31c	; 0x31c <read_sensor_light>
     990:	00 97       	sbiw	r24, 0x00	; 0
     992:	59 f1       	breq	.+86     	; 0x9ea <__stack+0xeb>
     994:	0e 94 8e 01 	call	0x31c	; 0x31c <read_sensor_light>
     998:	8f 3f       	cpi	r24, 0xFF	; 255
     99a:	91 05       	cpc	r25, r1
     99c:	09 f0       	breq	.+2      	; 0x9a0 <__stack+0xa1>
     99e:	2c f5       	brge	.+74     	; 0x9ea <__stack+0xeb>
		{
			sprintf(response, "OK %i", read_sensor_light());
     9a0:	0e 94 8e 01 	call	0x31c	; 0x31c <read_sensor_light>
     9a4:	00 d0       	rcall	.+0      	; 0x9a6 <__stack+0xa7>
     9a6:	00 d0       	rcall	.+0      	; 0x9a8 <__stack+0xa9>
     9a8:	00 d0       	rcall	.+0      	; 0x9aa <__stack+0xab>
     9aa:	ed b7       	in	r30, 0x3d	; 61
     9ac:	fe b7       	in	r31, 0x3e	; 62
     9ae:	31 96       	adiw	r30, 0x01	; 1
     9b0:	8e 01       	movw	r16, r28
     9b2:	0f 5a       	subi	r16, 0xAF	; 175
     9b4:	1f 4f       	sbci	r17, 0xFF	; 255
     9b6:	ad b7       	in	r26, 0x3d	; 61
     9b8:	be b7       	in	r27, 0x3e	; 62
     9ba:	12 96       	adiw	r26, 0x02	; 2
     9bc:	1c 93       	st	X, r17
     9be:	0e 93       	st	-X, r16
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	2d e6       	ldi	r18, 0x6D	; 109
     9c4:	31 e0       	ldi	r19, 0x01	; 1
     9c6:	33 83       	std	Z+3, r19	; 0x03
     9c8:	22 83       	std	Z+2, r18	; 0x02
     9ca:	95 83       	std	Z+5, r25	; 0x05
     9cc:	84 83       	std	Z+4, r24	; 0x04
     9ce:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <sprintf>
			write_ser(response);
     9d2:	ed b7       	in	r30, 0x3d	; 61
     9d4:	fe b7       	in	r31, 0x3e	; 62
     9d6:	36 96       	adiw	r30, 0x06	; 6
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	f8 94       	cli
     9dc:	fe bf       	out	0x3e, r31	; 62
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	ed bf       	out	0x3d, r30	; 61
     9e2:	c8 01       	movw	r24, r16
     9e4:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
	}

	if (strcmp(commando, "GET_SENSOR_LIGHT") == 0)
	{
		if (read_sensor_light()!=NULL && read_sensor_light() <= 255)
		{
     9e8:	24 c0       	rjmp	.+72     	; 0xa32 <__stack+0x133>
			sprintf(response, "OK %i", read_sensor_light());
			write_ser(response);
		}
		else
		{
			sprintf(response, "ERROR 443: Unrealistic value %i. Sensor might be defect", read_sensor_light());
     9ea:	0e 94 8e 01 	call	0x31c	; 0x31c <read_sensor_light>
     9ee:	00 d0       	rcall	.+0      	; 0x9f0 <__stack+0xf1>
     9f0:	00 d0       	rcall	.+0      	; 0x9f2 <__stack+0xf3>
     9f2:	00 d0       	rcall	.+0      	; 0x9f4 <__stack+0xf5>
     9f4:	ed b7       	in	r30, 0x3d	; 61
     9f6:	fe b7       	in	r31, 0x3e	; 62
     9f8:	31 96       	adiw	r30, 0x01	; 1
     9fa:	8e 01       	movw	r16, r28
     9fc:	0f 5a       	subi	r16, 0xAF	; 175
     9fe:	1f 4f       	sbci	r17, 0xFF	; 255
     a00:	ad b7       	in	r26, 0x3d	; 61
     a02:	be b7       	in	r27, 0x3e	; 62
     a04:	12 96       	adiw	r26, 0x02	; 2
     a06:	1c 93       	st	X, r17
     a08:	0e 93       	st	-X, r16
     a0a:	11 97       	sbiw	r26, 0x01	; 1
     a0c:	26 e7       	ldi	r18, 0x76	; 118
     a0e:	32 e0       	ldi	r19, 0x02	; 2
     a10:	33 83       	std	Z+3, r19	; 0x03
     a12:	22 83       	std	Z+2, r18	; 0x02
     a14:	95 83       	std	Z+5, r25	; 0x05
     a16:	84 83       	std	Z+4, r24	; 0x04
     a18:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <sprintf>
			write_ser(response);
     a1c:	ed b7       	in	r30, 0x3d	; 61
     a1e:	fe b7       	in	r31, 0x3e	; 62
     a20:	36 96       	adiw	r30, 0x06	; 6
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	f8 94       	cli
     a26:	fe bf       	out	0x3e, r31	; 62
     a28:	0f be       	out	0x3f, r0	; 63
     a2a:	ed bf       	out	0x3d, r30	; 61
     a2c:	c8 01       	movw	r24, r16
     a2e:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
		}
	}

	//If tree to handle all SETTERS
	if (strcmp(commando, "SET_NAME") == 0)
     a32:	ce 01       	movw	r24, r28
     a34:	01 96       	adiw	r24, 0x01	; 1
     a36:	6e ea       	ldi	r22, 0xAE	; 174
     a38:	72 e0       	ldi	r23, 0x02	; 2
     a3a:	0e 94 b5 0a 	call	0x156a	; 0x156a <strcmp>
     a3e:	28 2f       	mov	r18, r24
     a40:	39 2f       	mov	r19, r25
     a42:	21 15       	cp	r18, r1
     a44:	31 05       	cpc	r19, r1
     a46:	09 f0       	breq	.+2      	; 0xa4a <__stack+0x14b>
     a48:	5b c0       	rjmp	.+182    	; 0xb00 <__stack+0x201>
	{
		if (strlen(arg) > 0 && strlen(arg) <= 20)
     a4a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a4c:	88 23       	and	r24, r24
     a4e:	a1 f1       	breq	.+104    	; 0xab8 <__stack+0x1b9>
     a50:	de 01       	movw	r26, r28
     a52:	5f 96       	adiw	r26, 0x1f	; 31
     a54:	fd 01       	movw	r30, r26
     a56:	01 90       	ld	r0, Z+
     a58:	00 20       	and	r0, r0
     a5a:	e9 f7       	brne	.-6      	; 0xa56 <__stack+0x157>
     a5c:	31 97       	sbiw	r30, 0x01	; 1
     a5e:	ea 1b       	sub	r30, r26
     a60:	fb 0b       	sbc	r31, r27
     a62:	e5 31       	cpi	r30, 0x15	; 21
     a64:	f1 05       	cpc	r31, r1
     a66:	40 f5       	brcc	.+80     	; 0xab8 <__stack+0x1b9>
		{
			set_arduino_name(arg);
     a68:	cd 01       	movw	r24, r26
     a6a:	0e 94 b1 01 	call	0x362	; 0x362 <set_arduino_name>
			sprintf(response, "OK %s", get_arduino_name());
     a6e:	0e 94 ef 01 	call	0x3de	; 0x3de <get_arduino_name>
     a72:	00 d0       	rcall	.+0      	; 0xa74 <__stack+0x175>
     a74:	00 d0       	rcall	.+0      	; 0xa76 <__stack+0x177>
     a76:	00 d0       	rcall	.+0      	; 0xa78 <__stack+0x179>
     a78:	ed b7       	in	r30, 0x3d	; 61
     a7a:	fe b7       	in	r31, 0x3e	; 62
     a7c:	31 96       	adiw	r30, 0x01	; 1
     a7e:	8e 01       	movw	r16, r28
     a80:	0f 5a       	subi	r16, 0xAF	; 175
     a82:	1f 4f       	sbci	r17, 0xFF	; 255
     a84:	ad b7       	in	r26, 0x3d	; 61
     a86:	be b7       	in	r27, 0x3e	; 62
     a88:	12 96       	adiw	r26, 0x02	; 2
     a8a:	1c 93       	st	X, r17
     a8c:	0e 93       	st	-X, r16
     a8e:	11 97       	sbiw	r26, 0x01	; 1
     a90:	22 e4       	ldi	r18, 0x42	; 66
     a92:	31 e0       	ldi	r19, 0x01	; 1
     a94:	33 83       	std	Z+3, r19	; 0x03
     a96:	22 83       	std	Z+2, r18	; 0x02
     a98:	95 83       	std	Z+5, r25	; 0x05
     a9a:	84 83       	std	Z+4, r24	; 0x04
     a9c:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <sprintf>
			write_ser(response);
     aa0:	ed b7       	in	r30, 0x3d	; 61
     aa2:	fe b7       	in	r31, 0x3e	; 62
     aa4:	36 96       	adiw	r30, 0x06	; 6
     aa6:	0f b6       	in	r0, 0x3f	; 63
     aa8:	f8 94       	cli
     aaa:	fe bf       	out	0x3e, r31	; 62
     aac:	0f be       	out	0x3f, r0	; 63
     aae:	ed bf       	out	0x3d, r30	; 61
     ab0:	c8 01       	movw	r24, r16
     ab2:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>

	//If tree to handle all SETTERS
	if (strcmp(commando, "SET_NAME") == 0)
	{
		if (strlen(arg) > 0 && strlen(arg) <= 20)
		{
     ab6:	24 c0       	rjmp	.+72     	; 0xb00 <__stack+0x201>
			sprintf(response, "OK %s", get_arduino_name());
			write_ser(response);
		}
		else
		{
			sprintf(response, "ERROR 605: Value %s not within limit 0-20", arg);
     ab8:	00 d0       	rcall	.+0      	; 0xaba <__stack+0x1bb>
     aba:	00 d0       	rcall	.+0      	; 0xabc <__stack+0x1bd>
     abc:	00 d0       	rcall	.+0      	; 0xabe <__stack+0x1bf>
     abe:	ed b7       	in	r30, 0x3d	; 61
     ac0:	fe b7       	in	r31, 0x3e	; 62
     ac2:	31 96       	adiw	r30, 0x01	; 1
     ac4:	8e 01       	movw	r16, r28
     ac6:	0f 5a       	subi	r16, 0xAF	; 175
     ac8:	1f 4f       	sbci	r17, 0xFF	; 255
     aca:	ad b7       	in	r26, 0x3d	; 61
     acc:	be b7       	in	r27, 0x3e	; 62
     ace:	12 96       	adiw	r26, 0x02	; 2
     ad0:	1c 93       	st	X, r17
     ad2:	0e 93       	st	-X, r16
     ad4:	11 97       	sbiw	r26, 0x01	; 1
     ad6:	87 eb       	ldi	r24, 0xB7	; 183
     ad8:	92 e0       	ldi	r25, 0x02	; 2
     ada:	93 83       	std	Z+3, r25	; 0x03
     adc:	82 83       	std	Z+2, r24	; 0x02
     ade:	ce 01       	movw	r24, r28
     ae0:	4f 96       	adiw	r24, 0x1f	; 31
     ae2:	95 83       	std	Z+5, r25	; 0x05
     ae4:	84 83       	std	Z+4, r24	; 0x04
     ae6:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <sprintf>
			write_ser(response);
     aea:	ed b7       	in	r30, 0x3d	; 61
     aec:	fe b7       	in	r31, 0x3e	; 62
     aee:	36 96       	adiw	r30, 0x06	; 6
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	f8 94       	cli
     af4:	fe bf       	out	0x3e, r31	; 62
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	ed bf       	out	0x3d, r30	; 61
     afa:	c8 01       	movw	r24, r16
     afc:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
		}
	}

	if (strcmp(commando, "SET_THS_TEMP") == 0)
     b00:	ce 01       	movw	r24, r28
     b02:	01 96       	adiw	r24, 0x01	; 1
     b04:	61 ee       	ldi	r22, 0xE1	; 225
     b06:	72 e0       	ldi	r23, 0x02	; 2
     b08:	0e 94 b5 0a 	call	0x156a	; 0x156a <strcmp>
     b0c:	28 2f       	mov	r18, r24
     b0e:	39 2f       	mov	r19, r25
     b10:	21 15       	cp	r18, r1
     b12:	31 05       	cpc	r19, r1
     b14:	09 f0       	breq	.+2      	; 0xb18 <__stack+0x219>
     b16:	5a c0       	rjmp	.+180    	; 0xbcc <__stack+0x2cd>
	{
		if(numbers_only(arg)==1 && atoi(arg) <= 50)
     b18:	ce 01       	movw	r24, r28
     b1a:	4f 96       	adiw	r24, 0x1f	; 31
     b1c:	0e 94 39 02 	call	0x472	; 0x472 <numbers_only>
     b20:	81 30       	cpi	r24, 0x01	; 1
     b22:	91 05       	cpc	r25, r1
     b24:	79 f5       	brne	.+94     	; 0xb84 <__stack+0x285>
     b26:	ce 01       	movw	r24, r28
     b28:	4f 96       	adiw	r24, 0x1f	; 31
     b2a:	0e 94 97 0a 	call	0x152e	; 0x152e <atoi>
     b2e:	83 33       	cpi	r24, 0x33	; 51
     b30:	91 05       	cpc	r25, r1
     b32:	44 f5       	brge	.+80     	; 0xb84 <__stack+0x285>
		{
			uint8_t val = atoi(arg);
			set_ths_temp(val);
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0e 94 9f 01 	call	0x33e	; 0x33e <set_ths_temp>
			sprintf(response, "OK %i", get_ths_temp());
     b3a:	0e 94 df 01 	call	0x3be	; 0x3be <get_ths_temp>
     b3e:	00 d0       	rcall	.+0      	; 0xb40 <__stack+0x241>
     b40:	00 d0       	rcall	.+0      	; 0xb42 <__stack+0x243>
     b42:	00 d0       	rcall	.+0      	; 0xb44 <__stack+0x245>
     b44:	ed b7       	in	r30, 0x3d	; 61
     b46:	fe b7       	in	r31, 0x3e	; 62
     b48:	31 96       	adiw	r30, 0x01	; 1
     b4a:	8e 01       	movw	r16, r28
     b4c:	0f 5a       	subi	r16, 0xAF	; 175
     b4e:	1f 4f       	sbci	r17, 0xFF	; 255
     b50:	ad b7       	in	r26, 0x3d	; 61
     b52:	be b7       	in	r27, 0x3e	; 62
     b54:	12 96       	adiw	r26, 0x02	; 2
     b56:	1c 93       	st	X, r17
     b58:	0e 93       	st	-X, r16
     b5a:	11 97       	sbiw	r26, 0x01	; 1
     b5c:	2d e6       	ldi	r18, 0x6D	; 109
     b5e:	31 e0       	ldi	r19, 0x01	; 1
     b60:	33 83       	std	Z+3, r19	; 0x03
     b62:	22 83       	std	Z+2, r18	; 0x02
     b64:	95 83       	std	Z+5, r25	; 0x05
     b66:	84 83       	std	Z+4, r24	; 0x04
     b68:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <sprintf>
			write_ser(response);
     b6c:	ed b7       	in	r30, 0x3d	; 61
     b6e:	fe b7       	in	r31, 0x3e	; 62
     b70:	36 96       	adiw	r30, 0x06	; 6
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	f8 94       	cli
     b76:	fe bf       	out	0x3e, r31	; 62
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	ed bf       	out	0x3d, r30	; 61
     b7c:	c8 01       	movw	r24, r16
     b7e:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
	}

	if (strcmp(commando, "SET_THS_TEMP") == 0)
	{
		if(numbers_only(arg)==1 && atoi(arg) <= 50)
		{
     b82:	24 c0       	rjmp	.+72     	; 0xbcc <__stack+0x2cd>
			sprintf(response, "OK %i", get_ths_temp());
			write_ser(response);
		}
		else
		{
			sprintf(response, "ERROR 106: Invalid value %s", arg);
     b84:	00 d0       	rcall	.+0      	; 0xb86 <__stack+0x287>
     b86:	00 d0       	rcall	.+0      	; 0xb88 <__stack+0x289>
     b88:	00 d0       	rcall	.+0      	; 0xb8a <__stack+0x28b>
     b8a:	ed b7       	in	r30, 0x3d	; 61
     b8c:	fe b7       	in	r31, 0x3e	; 62
     b8e:	31 96       	adiw	r30, 0x01	; 1
     b90:	8e 01       	movw	r16, r28
     b92:	0f 5a       	subi	r16, 0xAF	; 175
     b94:	1f 4f       	sbci	r17, 0xFF	; 255
     b96:	ad b7       	in	r26, 0x3d	; 61
     b98:	be b7       	in	r27, 0x3e	; 62
     b9a:	12 96       	adiw	r26, 0x02	; 2
     b9c:	1c 93       	st	X, r17
     b9e:	0e 93       	st	-X, r16
     ba0:	11 97       	sbiw	r26, 0x01	; 1
     ba2:	8e ee       	ldi	r24, 0xEE	; 238
     ba4:	92 e0       	ldi	r25, 0x02	; 2
     ba6:	93 83       	std	Z+3, r25	; 0x03
     ba8:	82 83       	std	Z+2, r24	; 0x02
     baa:	ce 01       	movw	r24, r28
     bac:	4f 96       	adiw	r24, 0x1f	; 31
     bae:	95 83       	std	Z+5, r25	; 0x05
     bb0:	84 83       	std	Z+4, r24	; 0x04
     bb2:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <sprintf>
			write_ser(response);
     bb6:	ed b7       	in	r30, 0x3d	; 61
     bb8:	fe b7       	in	r31, 0x3e	; 62
     bba:	36 96       	adiw	r30, 0x06	; 6
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	f8 94       	cli
     bc0:	fe bf       	out	0x3e, r31	; 62
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	ed bf       	out	0x3d, r30	; 61
     bc6:	c8 01       	movw	r24, r16
     bc8:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
		}
	}

	if (strcmp(commando, "SET_THS_DIST") == 0)
     bcc:	ce 01       	movw	r24, r28
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	6a e0       	ldi	r22, 0x0A	; 10
     bd2:	73 e0       	ldi	r23, 0x03	; 3
     bd4:	0e 94 b5 0a 	call	0x156a	; 0x156a <strcmp>
     bd8:	28 2f       	mov	r18, r24
     bda:	39 2f       	mov	r19, r25
     bdc:	21 15       	cp	r18, r1
     bde:	31 05       	cpc	r19, r1
     be0:	09 f0       	breq	.+2      	; 0xbe4 <__stack+0x2e5>
     be2:	5c c0       	rjmp	.+184    	; 0xc9c <__stack+0x39d>
	{
		if(numbers_only(arg)==1 && atoi(arg) >= 3 && atoi(arg) <= 30)
     be4:	ce 01       	movw	r24, r28
     be6:	4f 96       	adiw	r24, 0x1f	; 31
     be8:	0e 94 39 02 	call	0x472	; 0x472 <numbers_only>
     bec:	81 30       	cpi	r24, 0x01	; 1
     bee:	91 05       	cpc	r25, r1
     bf0:	89 f5       	brne	.+98     	; 0xc54 <__stack+0x355>
     bf2:	ce 01       	movw	r24, r28
     bf4:	4f 96       	adiw	r24, 0x1f	; 31
     bf6:	0e 94 97 0a 	call	0x152e	; 0x152e <atoi>
     bfa:	83 30       	cpi	r24, 0x03	; 3
     bfc:	91 05       	cpc	r25, r1
     bfe:	54 f1       	brlt	.+84     	; 0xc54 <__stack+0x355>
     c00:	8f 31       	cpi	r24, 0x1F	; 31
     c02:	91 05       	cpc	r25, r1
     c04:	3c f5       	brge	.+78     	; 0xc54 <__stack+0x355>
		{
			uint8_t val = atoi(arg);
			set_ths_dist(val);
     c06:	0e 94 ab 01 	call	0x356	; 0x356 <set_ths_dist>
			sprintf(response, "OK %i", get_ths_dist());
     c0a:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <get_ths_dist>
     c0e:	00 d0       	rcall	.+0      	; 0xc10 <__stack+0x311>
     c10:	00 d0       	rcall	.+0      	; 0xc12 <__stack+0x313>
     c12:	00 d0       	rcall	.+0      	; 0xc14 <__stack+0x315>
     c14:	ed b7       	in	r30, 0x3d	; 61
     c16:	fe b7       	in	r31, 0x3e	; 62
     c18:	31 96       	adiw	r30, 0x01	; 1
     c1a:	8e 01       	movw	r16, r28
     c1c:	0f 5a       	subi	r16, 0xAF	; 175
     c1e:	1f 4f       	sbci	r17, 0xFF	; 255
     c20:	ad b7       	in	r26, 0x3d	; 61
     c22:	be b7       	in	r27, 0x3e	; 62
     c24:	12 96       	adiw	r26, 0x02	; 2
     c26:	1c 93       	st	X, r17
     c28:	0e 93       	st	-X, r16
     c2a:	11 97       	sbiw	r26, 0x01	; 1
     c2c:	2d e6       	ldi	r18, 0x6D	; 109
     c2e:	31 e0       	ldi	r19, 0x01	; 1
     c30:	33 83       	std	Z+3, r19	; 0x03
     c32:	22 83       	std	Z+2, r18	; 0x02
     c34:	84 83       	std	Z+4, r24	; 0x04
     c36:	15 82       	std	Z+5, r1	; 0x05
     c38:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <sprintf>
			write_ser(response);
     c3c:	ed b7       	in	r30, 0x3d	; 61
     c3e:	fe b7       	in	r31, 0x3e	; 62
     c40:	36 96       	adiw	r30, 0x06	; 6
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	f8 94       	cli
     c46:	fe bf       	out	0x3e, r31	; 62
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	ed bf       	out	0x3d, r30	; 61
     c4c:	c8 01       	movw	r24, r16
     c4e:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
	}

	if (strcmp(commando, "SET_THS_DIST") == 0)
	{
		if(numbers_only(arg)==1 && atoi(arg) >= 3 && atoi(arg) <= 30)
		{
     c52:	24 c0       	rjmp	.+72     	; 0xc9c <__stack+0x39d>
			sprintf(response, "OK %i", get_ths_dist());
			write_ser(response);
		}
		else
		{
			sprintf(response, "ERROR 107: Invalid value %s", arg);
     c54:	00 d0       	rcall	.+0      	; 0xc56 <__stack+0x357>
     c56:	00 d0       	rcall	.+0      	; 0xc58 <__stack+0x359>
     c58:	00 d0       	rcall	.+0      	; 0xc5a <__stack+0x35b>
     c5a:	ed b7       	in	r30, 0x3d	; 61
     c5c:	fe b7       	in	r31, 0x3e	; 62
     c5e:	31 96       	adiw	r30, 0x01	; 1
     c60:	8e 01       	movw	r16, r28
     c62:	0f 5a       	subi	r16, 0xAF	; 175
     c64:	1f 4f       	sbci	r17, 0xFF	; 255
     c66:	ad b7       	in	r26, 0x3d	; 61
     c68:	be b7       	in	r27, 0x3e	; 62
     c6a:	12 96       	adiw	r26, 0x02	; 2
     c6c:	1c 93       	st	X, r17
     c6e:	0e 93       	st	-X, r16
     c70:	11 97       	sbiw	r26, 0x01	; 1
     c72:	87 e1       	ldi	r24, 0x17	; 23
     c74:	93 e0       	ldi	r25, 0x03	; 3
     c76:	93 83       	std	Z+3, r25	; 0x03
     c78:	82 83       	std	Z+2, r24	; 0x02
     c7a:	ce 01       	movw	r24, r28
     c7c:	4f 96       	adiw	r24, 0x1f	; 31
     c7e:	95 83       	std	Z+5, r25	; 0x05
     c80:	84 83       	std	Z+4, r24	; 0x04
     c82:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <sprintf>
			write_ser(response);
     c86:	ed b7       	in	r30, 0x3d	; 61
     c88:	fe b7       	in	r31, 0x3e	; 62
     c8a:	36 96       	adiw	r30, 0x06	; 6
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	fe bf       	out	0x3e, r31	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	ed bf       	out	0x3d, r30	; 61
     c96:	c8 01       	movw	r24, r16
     c98:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
		}
	}

	if (strcmp(commando, "SET_STATE") == 0)
     c9c:	ce 01       	movw	r24, r28
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	63 e3       	ldi	r22, 0x33	; 51
     ca2:	73 e0       	ldi	r23, 0x03	; 3
     ca4:	0e 94 b5 0a 	call	0x156a	; 0x156a <strcmp>
     ca8:	28 2f       	mov	r18, r24
     caa:	39 2f       	mov	r19, r25
     cac:	21 15       	cp	r18, r1
     cae:	31 05       	cpc	r19, r1
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <__stack+0x3b5>
     cb2:	6e c0       	rjmp	.+220    	; 0xd90 <__stack+0x491>
	{
		if (strcmp(arg, "OPEN") == 0)
     cb4:	ce 01       	movw	r24, r28
     cb6:	4f 96       	adiw	r24, 0x1f	; 31
     cb8:	6d e3       	ldi	r22, 0x3D	; 61
     cba:	73 e0       	ldi	r23, 0x03	; 3
     cbc:	0e 94 b5 0a 	call	0x156a	; 0x156a <strcmp>
     cc0:	28 2f       	mov	r18, r24
     cc2:	39 2f       	mov	r19, r25
     cc4:	21 15       	cp	r18, r1
     cc6:	31 05       	cpc	r19, r1
     cc8:	61 f5       	brne	.+88     	; 0xd22 <__stack+0x423>
		{
			if (get_shutter_state()!=OPEN && open_screen() == 1)
     cca:	0e 94 da 01 	call	0x3b4	; 0x3b4 <get_shutter_state>
     cce:	81 30       	cpi	r24, 0x01	; 1
     cd0:	a9 f0       	breq	.+42     	; 0xcfc <__stack+0x3fd>
     cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <open_screen>
     cd6:	81 30       	cpi	r24, 0x01	; 1
     cd8:	91 05       	cpc	r25, r1
     cda:	81 f4       	brne	.+32     	; 0xcfc <__stack+0x3fd>
			{
				sprintf(response, "OK OPENING");
     cdc:	de 01       	movw	r26, r28
     cde:	af 5a       	subi	r26, 0xAF	; 175
     ce0:	bf 4f       	sbci	r27, 0xFF	; 255
     ce2:	e2 e4       	ldi	r30, 0x42	; 66
     ce4:	f3 e0       	ldi	r31, 0x03	; 3
     ce6:	8b e0       	ldi	r24, 0x0B	; 11
     ce8:	01 90       	ld	r0, Z+
     cea:	0d 92       	st	X+, r0
     cec:	81 50       	subi	r24, 0x01	; 1
     cee:	e1 f7       	brne	.-8      	; 0xce8 <__stack+0x3e9>
				write_ser(response);
     cf0:	ce 01       	movw	r24, r28
     cf2:	8f 5a       	subi	r24, 0xAF	; 175
     cf4:	9f 4f       	sbci	r25, 0xFF	; 255
     cf6:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
	if (strcmp(commando, "SET_STATE") == 0)
	{
		if (strcmp(arg, "OPEN") == 0)
		{
			if (get_shutter_state()!=OPEN && open_screen() == 1)
			{
     cfa:	13 c0       	rjmp	.+38     	; 0xd22 <__stack+0x423>
				sprintf(response, "OK OPENING");
				write_ser(response);
			}
			else if (open_screen() == 0)
     cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <open_screen>
     d00:	00 97       	sbiw	r24, 0x00	; 0
     d02:	79 f4       	brne	.+30     	; 0xd22 <__stack+0x423>
			{
				sprintf(response, "ERROR 105: Could not open screen");
     d04:	de 01       	movw	r26, r28
     d06:	af 5a       	subi	r26, 0xAF	; 175
     d08:	bf 4f       	sbci	r27, 0xFF	; 255
     d0a:	ed e4       	ldi	r30, 0x4D	; 77
     d0c:	f3 e0       	ldi	r31, 0x03	; 3
     d0e:	81 e2       	ldi	r24, 0x21	; 33
     d10:	01 90       	ld	r0, Z+
     d12:	0d 92       	st	X+, r0
     d14:	81 50       	subi	r24, 0x01	; 1
     d16:	e1 f7       	brne	.-8      	; 0xd10 <__stack+0x411>
				write_ser(response);
     d18:	ce 01       	movw	r24, r28
     d1a:	8f 5a       	subi	r24, 0xAF	; 175
     d1c:	9f 4f       	sbci	r25, 0xFF	; 255
     d1e:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
			}
		}

		if (strcmp(arg, "CLOSED") == 0)
     d22:	ce 01       	movw	r24, r28
     d24:	4f 96       	adiw	r24, 0x1f	; 31
     d26:	6e e6       	ldi	r22, 0x6E	; 110
     d28:	73 e0       	ldi	r23, 0x03	; 3
     d2a:	0e 94 b5 0a 	call	0x156a	; 0x156a <strcmp>
     d2e:	28 2f       	mov	r18, r24
     d30:	39 2f       	mov	r19, r25
     d32:	21 15       	cp	r18, r1
     d34:	31 05       	cpc	r19, r1
     d36:	61 f5       	brne	.+88     	; 0xd90 <__stack+0x491>
		{
			if (get_shutter_state()!=CLOSED && close_screen() == 1)
     d38:	0e 94 da 01 	call	0x3b4	; 0x3b4 <get_shutter_state>
     d3c:	88 23       	and	r24, r24
     d3e:	a9 f0       	breq	.+42     	; 0xd6a <__stack+0x46b>
     d40:	0e 94 2c 02 	call	0x458	; 0x458 <close_screen>
     d44:	81 30       	cpi	r24, 0x01	; 1
     d46:	91 05       	cpc	r25, r1
     d48:	81 f4       	brne	.+32     	; 0xd6a <__stack+0x46b>
			{
				sprintf(response, "OK CLOSING");
     d4a:	de 01       	movw	r26, r28
     d4c:	af 5a       	subi	r26, 0xAF	; 175
     d4e:	bf 4f       	sbci	r27, 0xFF	; 255
     d50:	e5 e7       	ldi	r30, 0x75	; 117
     d52:	f3 e0       	ldi	r31, 0x03	; 3
     d54:	8b e0       	ldi	r24, 0x0B	; 11
     d56:	01 90       	ld	r0, Z+
     d58:	0d 92       	st	X+, r0
     d5a:	81 50       	subi	r24, 0x01	; 1
     d5c:	e1 f7       	brne	.-8      	; 0xd56 <__stack+0x457>
				write_ser(response);
     d5e:	ce 01       	movw	r24, r28
     d60:	8f 5a       	subi	r24, 0xAF	; 175
     d62:	9f 4f       	sbci	r25, 0xFF	; 255
     d64:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
		}

		if (strcmp(arg, "CLOSED") == 0)
		{
			if (get_shutter_state()!=CLOSED && close_screen() == 1)
			{
     d68:	13 c0       	rjmp	.+38     	; 0xd90 <__stack+0x491>
				sprintf(response, "OK CLOSING");
				write_ser(response);
			}
			else if (close_screen() == 0)
     d6a:	0e 94 2c 02 	call	0x458	; 0x458 <close_screen>
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	79 f4       	brne	.+30     	; 0xd90 <__stack+0x491>
			{
				sprintf(response, "ERROR 105: Could not close screen");
     d72:	de 01       	movw	r26, r28
     d74:	af 5a       	subi	r26, 0xAF	; 175
     d76:	bf 4f       	sbci	r27, 0xFF	; 255
     d78:	e0 e8       	ldi	r30, 0x80	; 128
     d7a:	f3 e0       	ldi	r31, 0x03	; 3
     d7c:	82 e2       	ldi	r24, 0x22	; 34
     d7e:	01 90       	ld	r0, Z+
     d80:	0d 92       	st	X+, r0
     d82:	81 50       	subi	r24, 0x01	; 1
     d84:	e1 f7       	brne	.-8      	; 0xd7e <__stack+0x47f>
				write_ser(response);
     d86:	ce 01       	movw	r24, r28
     d88:	8f 5a       	subi	r24, 0xAF	; 175
     d8a:	9f 4f       	sbci	r25, 0xFF	; 255
     d8c:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
			}
		}
	}

	if (strcmp(commando, "SET_MODE") == 0)
     d90:	ce 01       	movw	r24, r28
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	62 ea       	ldi	r22, 0xA2	; 162
     d96:	73 e0       	ldi	r23, 0x03	; 3
     d98:	0e 94 b5 0a 	call	0x156a	; 0x156a <strcmp>
     d9c:	28 2f       	mov	r18, r24
     d9e:	39 2f       	mov	r19, r25
     da0:	21 15       	cp	r18, r1
     da2:	31 05       	cpc	r19, r1
     da4:	09 f0       	breq	.+2      	; 0xda8 <__stack+0x4a9>
     da6:	8c c0       	rjmp	.+280    	; 0xec0 <__stack+0x5c1>
	{
		if (strcmp(arg, "MANUAL") == 0)
     da8:	ce 01       	movw	r24, r28
     daa:	4f 96       	adiw	r24, 0x1f	; 31
     dac:	6b ea       	ldi	r22, 0xAB	; 171
     dae:	73 e0       	ldi	r23, 0x03	; 3
     db0:	0e 94 b5 0a 	call	0x156a	; 0x156a <strcmp>
     db4:	28 2f       	mov	r18, r24
     db6:	39 2f       	mov	r19, r25
     db8:	21 15       	cp	r18, r1
     dba:	31 05       	cpc	r19, r1
     dbc:	d9 f5       	brne	.+118    	; 0xe34 <__stack+0x535>
		{
			if (get_shutter_mode()!=MANUAL)
     dbe:	0e 94 d5 01 	call	0x3aa	; 0x3aa <get_shutter_mode>
     dc2:	88 23       	and	r24, r24
     dc4:	99 f0       	breq	.+38     	; 0xdec <__stack+0x4ed>
			{
				set_shutter_mode(MANUAL);
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	0e 94 93 01 	call	0x326	; 0x326 <set_shutter_mode>
				sprintf(response, "OK MODE MANUAL");
     dcc:	de 01       	movw	r26, r28
     dce:	af 5a       	subi	r26, 0xAF	; 175
     dd0:	bf 4f       	sbci	r27, 0xFF	; 255
     dd2:	e2 eb       	ldi	r30, 0xB2	; 178
     dd4:	f3 e0       	ldi	r31, 0x03	; 3
     dd6:	8f e0       	ldi	r24, 0x0F	; 15
     dd8:	01 90       	ld	r0, Z+
     dda:	0d 92       	st	X+, r0
     ddc:	81 50       	subi	r24, 0x01	; 1
     dde:	e1 f7       	brne	.-8      	; 0xdd8 <__stack+0x4d9>
				write_ser(response);
     de0:	ce 01       	movw	r24, r28
     de2:	8f 5a       	subi	r24, 0xAF	; 175
     de4:	9f 4f       	sbci	r25, 0xFF	; 255
     de6:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
     dea:	24 c0       	rjmp	.+72     	; 0xe34 <__stack+0x535>
			}
			else
			{
				sprintf(response, "ERROR 441: Could not set modus %s", arg);
     dec:	00 d0       	rcall	.+0      	; 0xdee <__stack+0x4ef>
     dee:	00 d0       	rcall	.+0      	; 0xdf0 <__stack+0x4f1>
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <__stack+0x4f3>
     df2:	ed b7       	in	r30, 0x3d	; 61
     df4:	fe b7       	in	r31, 0x3e	; 62
     df6:	31 96       	adiw	r30, 0x01	; 1
     df8:	8e 01       	movw	r16, r28
     dfa:	0f 5a       	subi	r16, 0xAF	; 175
     dfc:	1f 4f       	sbci	r17, 0xFF	; 255
     dfe:	ad b7       	in	r26, 0x3d	; 61
     e00:	be b7       	in	r27, 0x3e	; 62
     e02:	12 96       	adiw	r26, 0x02	; 2
     e04:	1c 93       	st	X, r17
     e06:	0e 93       	st	-X, r16
     e08:	11 97       	sbiw	r26, 0x01	; 1
     e0a:	81 ec       	ldi	r24, 0xC1	; 193
     e0c:	93 e0       	ldi	r25, 0x03	; 3
     e0e:	93 83       	std	Z+3, r25	; 0x03
     e10:	82 83       	std	Z+2, r24	; 0x02
     e12:	ce 01       	movw	r24, r28
     e14:	4f 96       	adiw	r24, 0x1f	; 31
     e16:	95 83       	std	Z+5, r25	; 0x05
     e18:	84 83       	std	Z+4, r24	; 0x04
     e1a:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <sprintf>
				write_ser(response);
     e1e:	ed b7       	in	r30, 0x3d	; 61
     e20:	fe b7       	in	r31, 0x3e	; 62
     e22:	36 96       	adiw	r30, 0x06	; 6
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	fe bf       	out	0x3e, r31	; 62
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	ed bf       	out	0x3d, r30	; 61
     e2e:	c8 01       	movw	r24, r16
     e30:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
			}
		}

		if (strcmp(arg, "AUTO") == 0)
     e34:	ce 01       	movw	r24, r28
     e36:	4f 96       	adiw	r24, 0x1f	; 31
     e38:	63 ee       	ldi	r22, 0xE3	; 227
     e3a:	73 e0       	ldi	r23, 0x03	; 3
     e3c:	0e 94 b5 0a 	call	0x156a	; 0x156a <strcmp>
     e40:	28 2f       	mov	r18, r24
     e42:	39 2f       	mov	r19, r25
     e44:	21 15       	cp	r18, r1
     e46:	31 05       	cpc	r19, r1
     e48:	d9 f5       	brne	.+118    	; 0xec0 <__stack+0x5c1>
		{
			if (get_shutter_mode()!=AUTO)
     e4a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <get_shutter_mode>
     e4e:	81 30       	cpi	r24, 0x01	; 1
     e50:	99 f0       	breq	.+38     	; 0xe78 <__stack+0x579>
			{
				set_shutter_mode(AUTO);
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	0e 94 93 01 	call	0x326	; 0x326 <set_shutter_mode>
				sprintf(response, "OK MODE AUTO");
     e58:	de 01       	movw	r26, r28
     e5a:	af 5a       	subi	r26, 0xAF	; 175
     e5c:	bf 4f       	sbci	r27, 0xFF	; 255
     e5e:	e8 ee       	ldi	r30, 0xE8	; 232
     e60:	f3 e0       	ldi	r31, 0x03	; 3
     e62:	8d e0       	ldi	r24, 0x0D	; 13
     e64:	01 90       	ld	r0, Z+
     e66:	0d 92       	st	X+, r0
     e68:	81 50       	subi	r24, 0x01	; 1
     e6a:	e1 f7       	brne	.-8      	; 0xe64 <__stack+0x565>
				write_ser(response);
     e6c:	ce 01       	movw	r24, r28
     e6e:	8f 5a       	subi	r24, 0xAF	; 175
     e70:	9f 4f       	sbci	r25, 0xFF	; 255
     e72:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
     e76:	24 c0       	rjmp	.+72     	; 0xec0 <__stack+0x5c1>
			}
			else
			{
				sprintf(response, "ERROR 441: Could not set modus %s", arg);
     e78:	00 d0       	rcall	.+0      	; 0xe7a <__stack+0x57b>
     e7a:	00 d0       	rcall	.+0      	; 0xe7c <__stack+0x57d>
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <__stack+0x57f>
     e7e:	ed b7       	in	r30, 0x3d	; 61
     e80:	fe b7       	in	r31, 0x3e	; 62
     e82:	31 96       	adiw	r30, 0x01	; 1
     e84:	8e 01       	movw	r16, r28
     e86:	0f 5a       	subi	r16, 0xAF	; 175
     e88:	1f 4f       	sbci	r17, 0xFF	; 255
     e8a:	ad b7       	in	r26, 0x3d	; 61
     e8c:	be b7       	in	r27, 0x3e	; 62
     e8e:	12 96       	adiw	r26, 0x02	; 2
     e90:	1c 93       	st	X, r17
     e92:	0e 93       	st	-X, r16
     e94:	11 97       	sbiw	r26, 0x01	; 1
     e96:	81 ec       	ldi	r24, 0xC1	; 193
     e98:	93 e0       	ldi	r25, 0x03	; 3
     e9a:	93 83       	std	Z+3, r25	; 0x03
     e9c:	82 83       	std	Z+2, r24	; 0x02
     e9e:	ce 01       	movw	r24, r28
     ea0:	4f 96       	adiw	r24, 0x1f	; 31
     ea2:	95 83       	std	Z+5, r25	; 0x05
     ea4:	84 83       	std	Z+4, r24	; 0x04
     ea6:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <sprintf>
				write_ser(response);
     eaa:	ed b7       	in	r30, 0x3d	; 61
     eac:	fe b7       	in	r31, 0x3e	; 62
     eae:	36 96       	adiw	r30, 0x06	; 6
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	f8 94       	cli
     eb4:	fe bf       	out	0x3e, r31	; 62
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	ed bf       	out	0x3d, r30	; 61
     eba:	c8 01       	movw	r24, r16
     ebc:	0e 94 67 08 	call	0x10ce	; 0x10ce <write_ser>
			}
		}
		inputbuffer[0] = '\0';
	}
     ec0:	cc 54       	subi	r28, 0x4C	; 76
     ec2:	df 4f       	sbci	r29, 0xFF	; 255
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	f8 94       	cli
     ec8:	de bf       	out	0x3e, r29	; 62
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	cd bf       	out	0x3d, r28	; 61
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	1f 91       	pop	r17
     ed4:	0f 91       	pop	r16
     ed6:	ff 90       	pop	r15
     ed8:	ef 90       	pop	r14
     eda:	df 90       	pop	r13
     edc:	cf 90       	pop	r12
     ede:	bf 90       	pop	r11
     ee0:	af 90       	pop	r10
     ee2:	08 95       	ret

00000ee4 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
     ee4:	0f 93       	push	r16
     ee6:	1f 93       	push	r17
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	8c 01       	movw	r16, r24
     eee:	eb 01       	movw	r28, r22
     ef0:	da 01       	movw	r26, r20
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
     ef2:	80 91 0b 04 	lds	r24, 0x040B
     ef6:	90 91 0c 04 	lds	r25, 0x040C
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	b1 f0       	breq	.+44     	; 0xf2a <SCH_Add_Task+0x46>
     efe:	e2 e1       	ldi	r30, 0x12	; 18
     f00:	f4 e0       	ldi	r31, 0x04	; 4
     f02:	21 e0       	ldi	r18, 0x01	; 1
     f04:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
     f06:	42 2f       	mov	r20, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
     f08:	b9 01       	movw	r22, r18
     f0a:	80 81       	ld	r24, Z
     f0c:	91 81       	ldd	r25, Z+1	; 0x01
     f0e:	00 97       	sbiw	r24, 0x00	; 0
     f10:	41 f0       	breq	.+16     	; 0xf22 <SCH_Add_Task+0x3e>
     f12:	2f 5f       	subi	r18, 0xFF	; 255
     f14:	3f 4f       	sbci	r19, 0xFF	; 255
     f16:	37 96       	adiw	r30, 0x07	; 7
     f18:	26 30       	cpi	r18, 0x06	; 6
     f1a:	31 05       	cpc	r19, r1
     f1c:	a1 f7       	brne	.-24     	; 0xf06 <SCH_Add_Task+0x22>
   {
      Index++;
     f1e:	84 2f       	mov	r24, r20
     f20:	01 c0       	rjmp	.+2      	; 0xf24 <SCH_Add_Task+0x40>
     f22:	82 2f       	mov	r24, r18
   }

   // Have we reached the end of the list?   
   if(Index == SCH_MAX_TASKS)
     f24:	85 30       	cpi	r24, 0x05	; 5
     f26:	21 f4       	brne	.+8      	; 0xf30 <SCH_Add_Task+0x4c>
     f28:	17 c0       	rjmp	.+46     	; 0xf58 <SCH_Add_Task+0x74>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	70 e0       	ldi	r23, 0x00	; 0
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
     f2e:	40 e0       	ldi	r20, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;  
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
     f30:	cb 01       	movw	r24, r22
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	88 0f       	add	r24, r24
     f3c:	99 1f       	adc	r25, r25
     f3e:	86 1b       	sub	r24, r22
     f40:	97 0b       	sbc	r25, r23
     f42:	fc 01       	movw	r30, r24
     f44:	e5 5f       	subi	r30, 0xF5	; 245
     f46:	fb 4f       	sbci	r31, 0xFB	; 251
     f48:	11 83       	std	Z+1, r17	; 0x01
     f4a:	00 83       	st	Z, r16
   SCH_tasks_G[Index].Delay =DELAY;
     f4c:	d3 83       	std	Z+3, r29	; 0x03
     f4e:	c2 83       	std	Z+2, r28	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
     f50:	b5 83       	std	Z+5, r27	; 0x05
     f52:	a4 83       	std	Z+4, r26	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
     f54:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
     f56:	84 2f       	mov	r24, r20
}
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	1f 91       	pop	r17
     f5e:	0f 91       	pop	r16
     f60:	08 95       	ret

00000f62 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	fc 01       	movw	r30, r24
     f66:	ee 0f       	add	r30, r30
     f68:	ff 1f       	adc	r31, r31
     f6a:	ee 0f       	add	r30, r30
     f6c:	ff 1f       	adc	r31, r31
     f6e:	ee 0f       	add	r30, r30
     f70:	ff 1f       	adc	r31, r31
     f72:	e8 1b       	sub	r30, r24
     f74:	f9 0b       	sbc	r31, r25
     f76:	e5 5f       	subi	r30, 0xF5	; 245
     f78:	fb 4f       	sbci	r31, 0xFB	; 251
     f7a:	11 82       	std	Z+1, r1	; 0x01
     f7c:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
     f7e:	13 82       	std	Z+3, r1	; 0x03
     f80:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
     f82:	15 82       	std	Z+5, r1	; 0x05
     f84:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
     f86:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	08 95       	ret

00000f8c <SCH_Dispatch_Tasks>:
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
     f8c:	cf 92       	push	r12
     f8e:	df 92       	push	r13
     f90:	ef 92       	push	r14
     f92:	ff 92       	push	r15
     f94:	1f 93       	push	r17
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
     f9a:	c1 e1       	ldi	r28, 0x11	; 17
     f9c:	d4 e0       	ldi	r29, 0x04	; 4
     f9e:	0f 2e       	mov	r0, r31
     fa0:	fa ef       	ldi	r31, 0xFA	; 250
     fa2:	ef 2e       	mov	r14, r31
     fa4:	ff ef       	ldi	r31, 0xFF	; 255
     fa6:	ff 2e       	mov	r15, r31
     fa8:	f0 2d       	mov	r31, r0
     faa:	ec 0e       	add	r14, r28
     fac:	fd 1e       	adc	r15, r29
     fae:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
     fb0:	88 81       	ld	r24, Y
     fb2:	88 23       	and	r24, r24
     fb4:	91 f0       	breq	.+36     	; 0xfda <SCH_Dispatch_Tasks+0x4e>
     fb6:	d7 01       	movw	r26, r14
     fb8:	ed 91       	ld	r30, X+
     fba:	fc 91       	ld	r31, X
     fbc:	11 97       	sbiw	r26, 0x01	; 1
     fbe:	30 97       	sbiw	r30, 0x00	; 0
     fc0:	61 f0       	breq	.+24     	; 0xfda <SCH_Dispatch_Tasks+0x4e>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
     fc2:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
     fc4:	88 81       	ld	r24, Y
     fc6:	81 50       	subi	r24, 0x01	; 1
     fc8:	88 83       	st	Y, r24

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
     fca:	f7 01       	movw	r30, r14
     fcc:	84 81       	ldd	r24, Z+4	; 0x04
     fce:	95 81       	ldd	r25, Z+5	; 0x05
     fd0:	00 97       	sbiw	r24, 0x00	; 0
     fd2:	19 f4       	brne	.+6      	; 0xfda <SCH_Dispatch_Tasks+0x4e>
         {
            SCH_Delete_Task(Index);
     fd4:	81 2f       	mov	r24, r17
     fd6:	0e 94 b1 07 	call	0xf62	; 0xf62 <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
     fda:	1f 5f       	subi	r17, 0xFF	; 255
     fdc:	27 96       	adiw	r28, 0x07	; 7
     fde:	87 e0       	ldi	r24, 0x07	; 7
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	e8 0e       	add	r14, r24
     fe4:	f9 1e       	adc	r15, r25
     fe6:	15 30       	cpi	r17, 0x05	; 5
     fe8:	19 f7       	brne	.-58     	; 0xfb0 <SCH_Dispatch_Tasks+0x24>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
     fea:	df 91       	pop	r29
     fec:	cf 91       	pop	r28
     fee:	1f 91       	pop	r17
     ff0:	ff 90       	pop	r15
     ff2:	ef 90       	pop	r14
     ff4:	df 90       	pop	r13
     ff6:	cf 90       	pop	r12
     ff8:	08 95       	ret

00000ffa <SCH_Init_T1>:
  You must call this function before using the scheduler.  

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
     ffa:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
     ffc:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
     ffe:	8c 2f       	mov	r24, r28
    1000:	0e 94 b1 07 	call	0xf62	; 0xf62 <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
    1004:	cf 5f       	subi	r28, 0xFF	; 255
    1006:	c5 30       	cpi	r28, 0x05	; 5
    1008:	d1 f7       	brne	.-12     	; 0xffe <SCH_Init_T1+0x4>
   }

   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   OCR0A = 250;  
    100a:	8a ef       	ldi	r24, 0xFA	; 250
    100c:	87 bd       	out	0x27, r24	; 39
   TCCR0A = (1 << WGM01);				//CTC mode
    100e:	82 e0       	ldi	r24, 0x02	; 2
    1010:	84 bd       	out	0x24, r24	; 36
   TCCR0B = (1 << CS01) | (1 << CS00);  // prescale op 64
    1012:	93 e0       	ldi	r25, 0x03	; 3
    1014:	95 bd       	out	0x25, r25	; 37
   TIMSK0 = (1 << OCIE0A);   		     // Timer 1 Output Compare A Match Interrupt Enable
    1016:	80 93 6e 00 	sts	0x006E, r24
}
    101a:	cf 91       	pop	r28
    101c:	08 95       	ret

0000101e <SCH_Start>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
    101e:	78 94       	sei
}
    1020:	08 95       	ret

00001022 <__vector_14>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER0_COMPA_vect)
{
    1022:	1f 92       	push	r1
    1024:	0f 92       	push	r0
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	0f 92       	push	r0
    102a:	11 24       	eor	r1, r1
    102c:	2f 93       	push	r18
    102e:	3f 93       	push	r19
    1030:	8f 93       	push	r24
    1032:	9f 93       	push	r25
    1034:	af 93       	push	r26
    1036:	bf 93       	push	r27
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	ef 93       	push	r30
    103e:	ff 93       	push	r31
    1040:	eb e0       	ldi	r30, 0x0B	; 11
    1042:	f4 e0       	ldi	r31, 0x04	; 4
    1044:	df 01       	movw	r26, r30
    1046:	16 96       	adiw	r26, 0x06	; 6
  This is the scheduler ISR.  It is called at a rate 
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER0_COMPA_vect)
    1048:	9f 01       	movw	r18, r30
    104a:	2d 5d       	subi	r18, 0xDD	; 221
    104c:	3f 4f       	sbci	r19, 0xFF	; 255
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
    104e:	80 81       	ld	r24, Z
    1050:	91 81       	ldd	r25, Z+1	; 0x01
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	91 f0       	breq	.+36     	; 0x107a <__vector_14+0x58>
      {
         if(SCH_tasks_G[Index].Delay == 0)
    1056:	82 81       	ldd	r24, Z+2	; 0x02
    1058:	93 81       	ldd	r25, Z+3	; 0x03
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	59 f4       	brne	.+22     	; 0x1074 <__vector_14+0x52>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
    105e:	8c 91       	ld	r24, X
    1060:	8f 5f       	subi	r24, 0xFF	; 255
    1062:	8c 93       	st	X, r24

            if(SCH_tasks_G[Index].Period)
    1064:	84 81       	ldd	r24, Z+4	; 0x04
    1066:	95 81       	ldd	r25, Z+5	; 0x05
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	39 f0       	breq	.+14     	; 0x107a <__vector_14+0x58>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	93 83       	std	Z+3, r25	; 0x03
    1070:	82 83       	std	Z+2, r24	; 0x02
    1072:	03 c0       	rjmp	.+6      	; 0x107a <__vector_14+0x58>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	93 83       	std	Z+3, r25	; 0x03
    1078:	82 83       	std	Z+2, r24	; 0x02
    107a:	37 96       	adiw	r30, 0x07	; 7
    107c:	17 96       	adiw	r26, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER0_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
    107e:	e2 17       	cp	r30, r18
    1080:	f3 07       	cpc	r31, r19
    1082:	29 f7       	brne	.-54     	; 0x104e <__vector_14+0x2c>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
    1084:	ff 91       	pop	r31
    1086:	ef 91       	pop	r30
    1088:	df 91       	pop	r29
    108a:	cf 91       	pop	r28
    108c:	bf 91       	pop	r27
    108e:	af 91       	pop	r26
    1090:	9f 91       	pop	r25
    1092:	8f 91       	pop	r24
    1094:	3f 91       	pop	r19
    1096:	2f 91       	pop	r18
    1098:	0f 90       	pop	r0
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	0f 90       	pop	r0
    109e:	1f 90       	pop	r1
    10a0:	18 95       	reti

000010a2 <init_serial>:

#include "serial.h"

void init_serial() {
	//Setting baudrate
	UBRR0H = 0;
    10a2:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 103;
    10a6:	87 e6       	ldi	r24, 0x67	; 103
    10a8:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0A = 0;
    10ac:	10 92 c0 00 	sts	0x00C0, r1
	
	//Set bits for RX and TX
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
    10b0:	88 e1       	ldi	r24, 0x18	; 24
    10b2:	80 93 c1 00 	sts	0x00C1, r24
	
	//Set frame: 8 databits and use 1 stopbit
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
    10b6:	86 e0       	ldi	r24, 0x06	; 6
    10b8:	80 93 c2 00 	sts	0x00C2, r24
}
    10bc:	08 95       	ret

000010be <transmit_data>:

void transmit_data(uint8_t data) {
	//Wait for transmit buffer to be empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
    10be:	e0 ec       	ldi	r30, 0xC0	; 192
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	90 81       	ld	r25, Z
    10c4:	95 ff       	sbrs	r25, 5
    10c6:	fd cf       	rjmp	.-6      	; 0x10c2 <transmit_data+0x4>
	
	//Load new data into transmit buffer
	UDR0 = data;
    10c8:	80 93 c6 00 	sts	0x00C6, r24
}
    10cc:	08 95       	ret

000010ce <write_ser>:

void write_ser(char *data) {
    10ce:	cf 93       	push	r28
    10d0:	df 93       	push	r29
    10d2:	ec 01       	movw	r28, r24
	int i=0;
	
	//Loop until endline character is reached
	while (data[i]!='\0') {
    10d4:	88 81       	ld	r24, Y
    10d6:	88 23       	and	r24, r24
    10d8:	31 f0       	breq	.+12     	; 0x10e6 <write_ser+0x18>
	
	//Load new data into transmit buffer
	UDR0 = data;
}

void write_ser(char *data) {
    10da:	21 96       	adiw	r28, 0x01	; 1
	int i=0;
	
	//Loop until endline character is reached
	while (data[i]!='\0') {
		//Transmit character and go to next (i++)
		transmit_data(data[i++]);
    10dc:	0e 94 5f 08 	call	0x10be	; 0x10be <transmit_data>

void write_ser(char *data) {
	int i=0;
	
	//Loop until endline character is reached
	while (data[i]!='\0') {
    10e0:	89 91       	ld	r24, Y+
    10e2:	88 23       	and	r24, r24
    10e4:	d9 f7       	brne	.-10     	; 0x10dc <write_ser+0xe>
		//Transmit character and go to next (i++)
		transmit_data(data[i++]);
	}
	//transmit newline character so readline() stops reading
	transmit_data('\n');
    10e6:	8a e0       	ldi	r24, 0x0A	; 10
    10e8:	0e 94 5f 08 	call	0x10be	; 0x10be <transmit_data>
}
    10ec:	df 91       	pop	r29
    10ee:	cf 91       	pop	r28
    10f0:	08 95       	ret

000010f2 <receive_data>:

uint8_t receive_data() {
	//Wacht tot er data is
	loop_until_bit_is_set(UCSR0A, RXC0);
    10f2:	e0 ec       	ldi	r30, 0xC0	; 192
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	88 23       	and	r24, r24
    10fa:	ec f7       	brge	.-6      	; 0x10f6 <receive_data+0x4>
	return UDR0;
    10fc:	80 91 c6 00 	lds	r24, 0x00C6
}
    1100:	08 95       	ret

00001102 <read_ser>:

//Copy from serial.c written by Simon van der Meer
void read_ser(char* buf, int maxlength) {
    1102:	cf 92       	push	r12
    1104:	df 92       	push	r13
    1106:	ef 92       	push	r14
    1108:	ff 92       	push	r15
    110a:	0f 93       	push	r16
    110c:	1f 93       	push	r17
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	6c 01       	movw	r12, r24
	int i=0;
    1114:	7c 01       	movw	r14, r24
    1116:	00 e0       	ldi	r16, 0x00	; 0
    1118:	10 e0       	ldi	r17, 0x00	; 0
		
		//Bij een \r (ENTER) karakter uit de while loop gaan en \0 invoeren (einde string)
		if (c=='\r') {
			break; 
		}
		if (i<maxlength-1) {
    111a:	eb 01       	movw	r28, r22
    111c:	21 97       	sbiw	r28, 0x01	; 1
//Copy from serial.c written by Simon van der Meer
void read_ser(char* buf, int maxlength) {
	int i=0;
	int attempt = 0;	
	while(1) {
		uint8_t c = receive_data();
    111e:	0e 94 79 08 	call	0x10f2	; 0x10f2 <receive_data>
		
		//Bij een \r (ENTER) karakter uit de while loop gaan en \0 invoeren (einde string)
		if (c=='\r') {
    1122:	8d 30       	cpi	r24, 0x0D	; 13
    1124:	49 f0       	breq	.+18     	; 0x1138 <read_ser+0x36>
			break; 
		}
		if (i<maxlength-1) {
    1126:	0c 17       	cp	r16, r28
    1128:	1d 07       	cpc	r17, r29
    112a:	cc f7       	brge	.-14     	; 0x111e <read_ser+0x1c>
			buf[i++]=c;
    112c:	f7 01       	movw	r30, r14
    112e:	81 93       	st	Z+, r24
    1130:	7f 01       	movw	r14, r30
    1132:	0f 5f       	subi	r16, 0xFF	; 255
    1134:	1f 4f       	sbci	r17, 0xFF	; 255
    1136:	f3 cf       	rjmp	.-26     	; 0x111e <read_ser+0x1c>
		}
	}
	buf[i]='\0';
    1138:	0c 0d       	add	r16, r12
    113a:	1d 1d       	adc	r17, r13
    113c:	f8 01       	movw	r30, r16
    113e:	10 82       	st	Z, r1
}
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	1f 91       	pop	r17
    1146:	0f 91       	pop	r16
    1148:	ff 90       	pop	r15
    114a:	ef 90       	pop	r14
    114c:	df 90       	pop	r13
    114e:	cf 90       	pop	r12
    1150:	08 95       	ret

00001152 <init_adc_temp>:

void init_adc_temp()
{
	// ref=Vcc, left adjust the result (8 bit resolution),
	// select channel 0 (PC1 = input)
	ADMUX = (1<<REFS0)|(1<<ADLAR);
    1152:	80 e6       	ldi	r24, 0x60	; 96
    1154:	80 93 7c 00 	sts	0x007C, r24
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
    1158:	87 e8       	ldi	r24, 0x87	; 135
    115a:	80 93 7a 00 	sts	0x007A, r24
}
    115e:	08 95       	ret

00001160 <get_adc_value_temp>:

uint8_t get_adc_value_temp()
{
	ADCSRA |= (1<<ADSC); // start conversion
    1160:	ea e7       	ldi	r30, 0x7A	; 122
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	80 64       	ori	r24, 0x40	; 64
    1168:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
    116a:	80 81       	ld	r24, Z
    116c:	86 fd       	sbrc	r24, 6
    116e:	fd cf       	rjmp	.-6      	; 0x116a <get_adc_value_temp+0xa>
	return ADCH; // ms 8 bits
    1170:	80 91 79 00 	lds	r24, 0x0079
}
    1174:	08 95       	ret

00001176 <read_sensor_temp>:

int8_t read_sensor_temp()
{
    1176:	cf 93       	push	r28
	int sensor_temp;
	float voltage;
	int8_t celsius;
	
	init_adc_temp();
    1178:	0e 94 a9 08 	call	0x1152	; 0x1152 <init_adc_temp>
	sensor_temp =  get_adc_value_temp();
    117c:	0e 94 b0 08 	call	0x1160	; 0x1160 <get_adc_value_temp>
	voltage = ((sensor_temp / 256.0)*5.015);
    1180:	68 2f       	mov	r22, r24
    1182:	70 e0       	ldi	r23, 0x00	; 0
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	0e 94 94 09 	call	0x1328	; 0x1328 <__floatsisf>
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	40 e8       	ldi	r20, 0x80	; 128
    1192:	5b e3       	ldi	r21, 0x3B	; 59
    1194:	0e 94 20 0a 	call	0x1440	; 0x1440 <__mulsf3>
    1198:	21 ee       	ldi	r18, 0xE1	; 225
    119a:	3a e7       	ldi	r19, 0x7A	; 122
    119c:	40 ea       	ldi	r20, 0xA0	; 160
    119e:	50 e4       	ldi	r21, 0x40	; 64
    11a0:	0e 94 20 0a 	call	0x1440	; 0x1440 <__mulsf3>
	celsius = ((voltage - 0.5) * 100);
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	40 e0       	ldi	r20, 0x00	; 0
    11aa:	5f e3       	ldi	r21, 0x3F	; 63
    11ac:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__subsf3>
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	48 ec       	ldi	r20, 0xC8	; 200
    11b6:	52 e4       	ldi	r21, 0x42	; 66
    11b8:	0e 94 20 0a 	call	0x1440	; 0x1440 <__mulsf3>
    11bc:	0e 94 61 09 	call	0x12c2	; 0x12c2 <__fixsfsi>
    11c0:	c6 2f       	mov	r28, r22
	
	printf("Temp = %i", celsius);
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <read_sensor_temp+0x4e>
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <read_sensor_temp+0x50>
    11c6:	85 ef       	ldi	r24, 0xF5	; 245
    11c8:	93 e0       	ldi	r25, 0x03	; 3
    11ca:	ed b7       	in	r30, 0x3d	; 61
    11cc:	fe b7       	in	r31, 0x3e	; 62
    11ce:	92 83       	std	Z+2, r25	; 0x02
    11d0:	81 83       	std	Z+1, r24	; 0x01
    11d2:	8c 2f       	mov	r24, r28
    11d4:	99 27       	eor	r25, r25
    11d6:	87 fd       	sbrc	r24, 7
    11d8:	90 95       	com	r25
    11da:	94 83       	std	Z+4, r25	; 0x04
    11dc:	83 83       	std	Z+3, r24	; 0x03
    11de:	0e 94 c6 0a 	call	0x158c	; 0x158c <printf>
	printf("\n");
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	8a e0       	ldi	r24, 0x0A	; 10
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <putchar>
	
	return celsius;
}
    11f2:	8c 2f       	mov	r24, r28
    11f4:	cf 91       	pop	r28
    11f6:	08 95       	ret

000011f8 <__subsf3>:
    11f8:	50 58       	subi	r21, 0x80	; 128

000011fa <__addsf3>:
    11fa:	bb 27       	eor	r27, r27
    11fc:	aa 27       	eor	r26, r26
    11fe:	0e d0       	rcall	.+28     	; 0x121c <__addsf3x>
    1200:	e5 c0       	rjmp	.+458    	; 0x13cc <__fp_round>
    1202:	d6 d0       	rcall	.+428    	; 0x13b0 <__fp_pscA>
    1204:	30 f0       	brcs	.+12     	; 0x1212 <__addsf3+0x18>
    1206:	db d0       	rcall	.+438    	; 0x13be <__fp_pscB>
    1208:	20 f0       	brcs	.+8      	; 0x1212 <__addsf3+0x18>
    120a:	31 f4       	brne	.+12     	; 0x1218 <__addsf3+0x1e>
    120c:	9f 3f       	cpi	r25, 0xFF	; 255
    120e:	11 f4       	brne	.+4      	; 0x1214 <__addsf3+0x1a>
    1210:	1e f4       	brtc	.+6      	; 0x1218 <__addsf3+0x1e>
    1212:	cb c0       	rjmp	.+406    	; 0x13aa <__fp_nan>
    1214:	0e f4       	brtc	.+2      	; 0x1218 <__addsf3+0x1e>
    1216:	e0 95       	com	r30
    1218:	e7 fb       	bst	r30, 7
    121a:	c1 c0       	rjmp	.+386    	; 0x139e <__fp_inf>

0000121c <__addsf3x>:
    121c:	e9 2f       	mov	r30, r25
    121e:	e7 d0       	rcall	.+462    	; 0x13ee <__fp_split3>
    1220:	80 f3       	brcs	.-32     	; 0x1202 <__addsf3+0x8>
    1222:	ba 17       	cp	r27, r26
    1224:	62 07       	cpc	r22, r18
    1226:	73 07       	cpc	r23, r19
    1228:	84 07       	cpc	r24, r20
    122a:	95 07       	cpc	r25, r21
    122c:	18 f0       	brcs	.+6      	; 0x1234 <__addsf3x+0x18>
    122e:	71 f4       	brne	.+28     	; 0x124c <__addsf3x+0x30>
    1230:	9e f5       	brtc	.+102    	; 0x1298 <__addsf3x+0x7c>
    1232:	ff c0       	rjmp	.+510    	; 0x1432 <__fp_zero>
    1234:	0e f4       	brtc	.+2      	; 0x1238 <__addsf3x+0x1c>
    1236:	e0 95       	com	r30
    1238:	0b 2e       	mov	r0, r27
    123a:	ba 2f       	mov	r27, r26
    123c:	a0 2d       	mov	r26, r0
    123e:	0b 01       	movw	r0, r22
    1240:	b9 01       	movw	r22, r18
    1242:	90 01       	movw	r18, r0
    1244:	0c 01       	movw	r0, r24
    1246:	ca 01       	movw	r24, r20
    1248:	a0 01       	movw	r20, r0
    124a:	11 24       	eor	r1, r1
    124c:	ff 27       	eor	r31, r31
    124e:	59 1b       	sub	r21, r25
    1250:	99 f0       	breq	.+38     	; 0x1278 <__addsf3x+0x5c>
    1252:	59 3f       	cpi	r21, 0xF9	; 249
    1254:	50 f4       	brcc	.+20     	; 0x126a <__addsf3x+0x4e>
    1256:	50 3e       	cpi	r21, 0xE0	; 224
    1258:	68 f1       	brcs	.+90     	; 0x12b4 <__addsf3x+0x98>
    125a:	1a 16       	cp	r1, r26
    125c:	f0 40       	sbci	r31, 0x00	; 0
    125e:	a2 2f       	mov	r26, r18
    1260:	23 2f       	mov	r18, r19
    1262:	34 2f       	mov	r19, r20
    1264:	44 27       	eor	r20, r20
    1266:	58 5f       	subi	r21, 0xF8	; 248
    1268:	f3 cf       	rjmp	.-26     	; 0x1250 <__addsf3x+0x34>
    126a:	46 95       	lsr	r20
    126c:	37 95       	ror	r19
    126e:	27 95       	ror	r18
    1270:	a7 95       	ror	r26
    1272:	f0 40       	sbci	r31, 0x00	; 0
    1274:	53 95       	inc	r21
    1276:	c9 f7       	brne	.-14     	; 0x126a <__addsf3x+0x4e>
    1278:	7e f4       	brtc	.+30     	; 0x1298 <__addsf3x+0x7c>
    127a:	1f 16       	cp	r1, r31
    127c:	ba 0b       	sbc	r27, r26
    127e:	62 0b       	sbc	r22, r18
    1280:	73 0b       	sbc	r23, r19
    1282:	84 0b       	sbc	r24, r20
    1284:	ba f0       	brmi	.+46     	; 0x12b4 <__addsf3x+0x98>
    1286:	91 50       	subi	r25, 0x01	; 1
    1288:	a1 f0       	breq	.+40     	; 0x12b2 <__addsf3x+0x96>
    128a:	ff 0f       	add	r31, r31
    128c:	bb 1f       	adc	r27, r27
    128e:	66 1f       	adc	r22, r22
    1290:	77 1f       	adc	r23, r23
    1292:	88 1f       	adc	r24, r24
    1294:	c2 f7       	brpl	.-16     	; 0x1286 <__addsf3x+0x6a>
    1296:	0e c0       	rjmp	.+28     	; 0x12b4 <__addsf3x+0x98>
    1298:	ba 0f       	add	r27, r26
    129a:	62 1f       	adc	r22, r18
    129c:	73 1f       	adc	r23, r19
    129e:	84 1f       	adc	r24, r20
    12a0:	48 f4       	brcc	.+18     	; 0x12b4 <__addsf3x+0x98>
    12a2:	87 95       	ror	r24
    12a4:	77 95       	ror	r23
    12a6:	67 95       	ror	r22
    12a8:	b7 95       	ror	r27
    12aa:	f7 95       	ror	r31
    12ac:	9e 3f       	cpi	r25, 0xFE	; 254
    12ae:	08 f0       	brcs	.+2      	; 0x12b2 <__addsf3x+0x96>
    12b0:	b3 cf       	rjmp	.-154    	; 0x1218 <__addsf3+0x1e>
    12b2:	93 95       	inc	r25
    12b4:	88 0f       	add	r24, r24
    12b6:	08 f0       	brcs	.+2      	; 0x12ba <__addsf3x+0x9e>
    12b8:	99 27       	eor	r25, r25
    12ba:	ee 0f       	add	r30, r30
    12bc:	97 95       	ror	r25
    12be:	87 95       	ror	r24
    12c0:	08 95       	ret

000012c2 <__fixsfsi>:
    12c2:	04 d0       	rcall	.+8      	; 0x12cc <__fixunssfsi>
    12c4:	68 94       	set
    12c6:	b1 11       	cpse	r27, r1
    12c8:	b5 c0       	rjmp	.+362    	; 0x1434 <__fp_szero>
    12ca:	08 95       	ret

000012cc <__fixunssfsi>:
    12cc:	98 d0       	rcall	.+304    	; 0x13fe <__fp_splitA>
    12ce:	88 f0       	brcs	.+34     	; 0x12f2 <__fixunssfsi+0x26>
    12d0:	9f 57       	subi	r25, 0x7F	; 127
    12d2:	90 f0       	brcs	.+36     	; 0x12f8 <__fixunssfsi+0x2c>
    12d4:	b9 2f       	mov	r27, r25
    12d6:	99 27       	eor	r25, r25
    12d8:	b7 51       	subi	r27, 0x17	; 23
    12da:	a0 f0       	brcs	.+40     	; 0x1304 <__fixunssfsi+0x38>
    12dc:	d1 f0       	breq	.+52     	; 0x1312 <__fixunssfsi+0x46>
    12de:	66 0f       	add	r22, r22
    12e0:	77 1f       	adc	r23, r23
    12e2:	88 1f       	adc	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	1a f0       	brmi	.+6      	; 0x12ee <__fixunssfsi+0x22>
    12e8:	ba 95       	dec	r27
    12ea:	c9 f7       	brne	.-14     	; 0x12de <__fixunssfsi+0x12>
    12ec:	12 c0       	rjmp	.+36     	; 0x1312 <__fixunssfsi+0x46>
    12ee:	b1 30       	cpi	r27, 0x01	; 1
    12f0:	81 f0       	breq	.+32     	; 0x1312 <__fixunssfsi+0x46>
    12f2:	9f d0       	rcall	.+318    	; 0x1432 <__fp_zero>
    12f4:	b1 e0       	ldi	r27, 0x01	; 1
    12f6:	08 95       	ret
    12f8:	9c c0       	rjmp	.+312    	; 0x1432 <__fp_zero>
    12fa:	67 2f       	mov	r22, r23
    12fc:	78 2f       	mov	r23, r24
    12fe:	88 27       	eor	r24, r24
    1300:	b8 5f       	subi	r27, 0xF8	; 248
    1302:	39 f0       	breq	.+14     	; 0x1312 <__fixunssfsi+0x46>
    1304:	b9 3f       	cpi	r27, 0xF9	; 249
    1306:	cc f3       	brlt	.-14     	; 0x12fa <__fixunssfsi+0x2e>
    1308:	86 95       	lsr	r24
    130a:	77 95       	ror	r23
    130c:	67 95       	ror	r22
    130e:	b3 95       	inc	r27
    1310:	d9 f7       	brne	.-10     	; 0x1308 <__fixunssfsi+0x3c>
    1312:	3e f4       	brtc	.+14     	; 0x1322 <__fixunssfsi+0x56>
    1314:	90 95       	com	r25
    1316:	80 95       	com	r24
    1318:	70 95       	com	r23
    131a:	61 95       	neg	r22
    131c:	7f 4f       	sbci	r23, 0xFF	; 255
    131e:	8f 4f       	sbci	r24, 0xFF	; 255
    1320:	9f 4f       	sbci	r25, 0xFF	; 255
    1322:	08 95       	ret

00001324 <__floatunsisf>:
    1324:	e8 94       	clt
    1326:	09 c0       	rjmp	.+18     	; 0x133a <__floatsisf+0x12>

00001328 <__floatsisf>:
    1328:	97 fb       	bst	r25, 7
    132a:	3e f4       	brtc	.+14     	; 0x133a <__floatsisf+0x12>
    132c:	90 95       	com	r25
    132e:	80 95       	com	r24
    1330:	70 95       	com	r23
    1332:	61 95       	neg	r22
    1334:	7f 4f       	sbci	r23, 0xFF	; 255
    1336:	8f 4f       	sbci	r24, 0xFF	; 255
    1338:	9f 4f       	sbci	r25, 0xFF	; 255
    133a:	99 23       	and	r25, r25
    133c:	a9 f0       	breq	.+42     	; 0x1368 <__floatsisf+0x40>
    133e:	f9 2f       	mov	r31, r25
    1340:	96 e9       	ldi	r25, 0x96	; 150
    1342:	bb 27       	eor	r27, r27
    1344:	93 95       	inc	r25
    1346:	f6 95       	lsr	r31
    1348:	87 95       	ror	r24
    134a:	77 95       	ror	r23
    134c:	67 95       	ror	r22
    134e:	b7 95       	ror	r27
    1350:	f1 11       	cpse	r31, r1
    1352:	f8 cf       	rjmp	.-16     	; 0x1344 <__floatsisf+0x1c>
    1354:	fa f4       	brpl	.+62     	; 0x1394 <__floatsisf+0x6c>
    1356:	bb 0f       	add	r27, r27
    1358:	11 f4       	brne	.+4      	; 0x135e <__floatsisf+0x36>
    135a:	60 ff       	sbrs	r22, 0
    135c:	1b c0       	rjmp	.+54     	; 0x1394 <__floatsisf+0x6c>
    135e:	6f 5f       	subi	r22, 0xFF	; 255
    1360:	7f 4f       	sbci	r23, 0xFF	; 255
    1362:	8f 4f       	sbci	r24, 0xFF	; 255
    1364:	9f 4f       	sbci	r25, 0xFF	; 255
    1366:	16 c0       	rjmp	.+44     	; 0x1394 <__floatsisf+0x6c>
    1368:	88 23       	and	r24, r24
    136a:	11 f0       	breq	.+4      	; 0x1370 <__floatsisf+0x48>
    136c:	96 e9       	ldi	r25, 0x96	; 150
    136e:	11 c0       	rjmp	.+34     	; 0x1392 <__floatsisf+0x6a>
    1370:	77 23       	and	r23, r23
    1372:	21 f0       	breq	.+8      	; 0x137c <__floatsisf+0x54>
    1374:	9e e8       	ldi	r25, 0x8E	; 142
    1376:	87 2f       	mov	r24, r23
    1378:	76 2f       	mov	r23, r22
    137a:	05 c0       	rjmp	.+10     	; 0x1386 <__floatsisf+0x5e>
    137c:	66 23       	and	r22, r22
    137e:	71 f0       	breq	.+28     	; 0x139c <__floatsisf+0x74>
    1380:	96 e8       	ldi	r25, 0x86	; 134
    1382:	86 2f       	mov	r24, r22
    1384:	70 e0       	ldi	r23, 0x00	; 0
    1386:	60 e0       	ldi	r22, 0x00	; 0
    1388:	2a f0       	brmi	.+10     	; 0x1394 <__floatsisf+0x6c>
    138a:	9a 95       	dec	r25
    138c:	66 0f       	add	r22, r22
    138e:	77 1f       	adc	r23, r23
    1390:	88 1f       	adc	r24, r24
    1392:	da f7       	brpl	.-10     	; 0x138a <__floatsisf+0x62>
    1394:	88 0f       	add	r24, r24
    1396:	96 95       	lsr	r25
    1398:	87 95       	ror	r24
    139a:	97 f9       	bld	r25, 7
    139c:	08 95       	ret

0000139e <__fp_inf>:
    139e:	97 f9       	bld	r25, 7
    13a0:	9f 67       	ori	r25, 0x7F	; 127
    13a2:	80 e8       	ldi	r24, 0x80	; 128
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	60 e0       	ldi	r22, 0x00	; 0
    13a8:	08 95       	ret

000013aa <__fp_nan>:
    13aa:	9f ef       	ldi	r25, 0xFF	; 255
    13ac:	80 ec       	ldi	r24, 0xC0	; 192
    13ae:	08 95       	ret

000013b0 <__fp_pscA>:
    13b0:	00 24       	eor	r0, r0
    13b2:	0a 94       	dec	r0
    13b4:	16 16       	cp	r1, r22
    13b6:	17 06       	cpc	r1, r23
    13b8:	18 06       	cpc	r1, r24
    13ba:	09 06       	cpc	r0, r25
    13bc:	08 95       	ret

000013be <__fp_pscB>:
    13be:	00 24       	eor	r0, r0
    13c0:	0a 94       	dec	r0
    13c2:	12 16       	cp	r1, r18
    13c4:	13 06       	cpc	r1, r19
    13c6:	14 06       	cpc	r1, r20
    13c8:	05 06       	cpc	r0, r21
    13ca:	08 95       	ret

000013cc <__fp_round>:
    13cc:	09 2e       	mov	r0, r25
    13ce:	03 94       	inc	r0
    13d0:	00 0c       	add	r0, r0
    13d2:	11 f4       	brne	.+4      	; 0x13d8 <__fp_round+0xc>
    13d4:	88 23       	and	r24, r24
    13d6:	52 f0       	brmi	.+20     	; 0x13ec <__fp_round+0x20>
    13d8:	bb 0f       	add	r27, r27
    13da:	40 f4       	brcc	.+16     	; 0x13ec <__fp_round+0x20>
    13dc:	bf 2b       	or	r27, r31
    13de:	11 f4       	brne	.+4      	; 0x13e4 <__fp_round+0x18>
    13e0:	60 ff       	sbrs	r22, 0
    13e2:	04 c0       	rjmp	.+8      	; 0x13ec <__fp_round+0x20>
    13e4:	6f 5f       	subi	r22, 0xFF	; 255
    13e6:	7f 4f       	sbci	r23, 0xFF	; 255
    13e8:	8f 4f       	sbci	r24, 0xFF	; 255
    13ea:	9f 4f       	sbci	r25, 0xFF	; 255
    13ec:	08 95       	ret

000013ee <__fp_split3>:
    13ee:	57 fd       	sbrc	r21, 7
    13f0:	90 58       	subi	r25, 0x80	; 128
    13f2:	44 0f       	add	r20, r20
    13f4:	55 1f       	adc	r21, r21
    13f6:	59 f0       	breq	.+22     	; 0x140e <__fp_splitA+0x10>
    13f8:	5f 3f       	cpi	r21, 0xFF	; 255
    13fa:	71 f0       	breq	.+28     	; 0x1418 <__fp_splitA+0x1a>
    13fc:	47 95       	ror	r20

000013fe <__fp_splitA>:
    13fe:	88 0f       	add	r24, r24
    1400:	97 fb       	bst	r25, 7
    1402:	99 1f       	adc	r25, r25
    1404:	61 f0       	breq	.+24     	; 0x141e <__fp_splitA+0x20>
    1406:	9f 3f       	cpi	r25, 0xFF	; 255
    1408:	79 f0       	breq	.+30     	; 0x1428 <__fp_splitA+0x2a>
    140a:	87 95       	ror	r24
    140c:	08 95       	ret
    140e:	12 16       	cp	r1, r18
    1410:	13 06       	cpc	r1, r19
    1412:	14 06       	cpc	r1, r20
    1414:	55 1f       	adc	r21, r21
    1416:	f2 cf       	rjmp	.-28     	; 0x13fc <__fp_split3+0xe>
    1418:	46 95       	lsr	r20
    141a:	f1 df       	rcall	.-30     	; 0x13fe <__fp_splitA>
    141c:	08 c0       	rjmp	.+16     	; 0x142e <__fp_splitA+0x30>
    141e:	16 16       	cp	r1, r22
    1420:	17 06       	cpc	r1, r23
    1422:	18 06       	cpc	r1, r24
    1424:	99 1f       	adc	r25, r25
    1426:	f1 cf       	rjmp	.-30     	; 0x140a <__fp_splitA+0xc>
    1428:	86 95       	lsr	r24
    142a:	71 05       	cpc	r23, r1
    142c:	61 05       	cpc	r22, r1
    142e:	08 94       	sec
    1430:	08 95       	ret

00001432 <__fp_zero>:
    1432:	e8 94       	clt

00001434 <__fp_szero>:
    1434:	bb 27       	eor	r27, r27
    1436:	66 27       	eor	r22, r22
    1438:	77 27       	eor	r23, r23
    143a:	cb 01       	movw	r24, r22
    143c:	97 f9       	bld	r25, 7
    143e:	08 95       	ret

00001440 <__mulsf3>:
    1440:	0b d0       	rcall	.+22     	; 0x1458 <__mulsf3x>
    1442:	c4 cf       	rjmp	.-120    	; 0x13cc <__fp_round>
    1444:	b5 df       	rcall	.-150    	; 0x13b0 <__fp_pscA>
    1446:	28 f0       	brcs	.+10     	; 0x1452 <__mulsf3+0x12>
    1448:	ba df       	rcall	.-140    	; 0x13be <__fp_pscB>
    144a:	18 f0       	brcs	.+6      	; 0x1452 <__mulsf3+0x12>
    144c:	95 23       	and	r25, r21
    144e:	09 f0       	breq	.+2      	; 0x1452 <__mulsf3+0x12>
    1450:	a6 cf       	rjmp	.-180    	; 0x139e <__fp_inf>
    1452:	ab cf       	rjmp	.-170    	; 0x13aa <__fp_nan>
    1454:	11 24       	eor	r1, r1
    1456:	ee cf       	rjmp	.-36     	; 0x1434 <__fp_szero>

00001458 <__mulsf3x>:
    1458:	ca df       	rcall	.-108    	; 0x13ee <__fp_split3>
    145a:	a0 f3       	brcs	.-24     	; 0x1444 <__mulsf3+0x4>

0000145c <__mulsf3_pse>:
    145c:	95 9f       	mul	r25, r21
    145e:	d1 f3       	breq	.-12     	; 0x1454 <__mulsf3+0x14>
    1460:	95 0f       	add	r25, r21
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	55 1f       	adc	r21, r21
    1466:	62 9f       	mul	r22, r18
    1468:	f0 01       	movw	r30, r0
    146a:	72 9f       	mul	r23, r18
    146c:	bb 27       	eor	r27, r27
    146e:	f0 0d       	add	r31, r0
    1470:	b1 1d       	adc	r27, r1
    1472:	63 9f       	mul	r22, r19
    1474:	aa 27       	eor	r26, r26
    1476:	f0 0d       	add	r31, r0
    1478:	b1 1d       	adc	r27, r1
    147a:	aa 1f       	adc	r26, r26
    147c:	64 9f       	mul	r22, r20
    147e:	66 27       	eor	r22, r22
    1480:	b0 0d       	add	r27, r0
    1482:	a1 1d       	adc	r26, r1
    1484:	66 1f       	adc	r22, r22
    1486:	82 9f       	mul	r24, r18
    1488:	22 27       	eor	r18, r18
    148a:	b0 0d       	add	r27, r0
    148c:	a1 1d       	adc	r26, r1
    148e:	62 1f       	adc	r22, r18
    1490:	73 9f       	mul	r23, r19
    1492:	b0 0d       	add	r27, r0
    1494:	a1 1d       	adc	r26, r1
    1496:	62 1f       	adc	r22, r18
    1498:	83 9f       	mul	r24, r19
    149a:	a0 0d       	add	r26, r0
    149c:	61 1d       	adc	r22, r1
    149e:	22 1f       	adc	r18, r18
    14a0:	74 9f       	mul	r23, r20
    14a2:	33 27       	eor	r19, r19
    14a4:	a0 0d       	add	r26, r0
    14a6:	61 1d       	adc	r22, r1
    14a8:	23 1f       	adc	r18, r19
    14aa:	84 9f       	mul	r24, r20
    14ac:	60 0d       	add	r22, r0
    14ae:	21 1d       	adc	r18, r1
    14b0:	82 2f       	mov	r24, r18
    14b2:	76 2f       	mov	r23, r22
    14b4:	6a 2f       	mov	r22, r26
    14b6:	11 24       	eor	r1, r1
    14b8:	9f 57       	subi	r25, 0x7F	; 127
    14ba:	50 40       	sbci	r21, 0x00	; 0
    14bc:	8a f0       	brmi	.+34     	; 0x14e0 <__mulsf3_pse+0x84>
    14be:	e1 f0       	breq	.+56     	; 0x14f8 <__mulsf3_pse+0x9c>
    14c0:	88 23       	and	r24, r24
    14c2:	4a f0       	brmi	.+18     	; 0x14d6 <__mulsf3_pse+0x7a>
    14c4:	ee 0f       	add	r30, r30
    14c6:	ff 1f       	adc	r31, r31
    14c8:	bb 1f       	adc	r27, r27
    14ca:	66 1f       	adc	r22, r22
    14cc:	77 1f       	adc	r23, r23
    14ce:	88 1f       	adc	r24, r24
    14d0:	91 50       	subi	r25, 0x01	; 1
    14d2:	50 40       	sbci	r21, 0x00	; 0
    14d4:	a9 f7       	brne	.-22     	; 0x14c0 <__mulsf3_pse+0x64>
    14d6:	9e 3f       	cpi	r25, 0xFE	; 254
    14d8:	51 05       	cpc	r21, r1
    14da:	70 f0       	brcs	.+28     	; 0x14f8 <__mulsf3_pse+0x9c>
    14dc:	60 cf       	rjmp	.-320    	; 0x139e <__fp_inf>
    14de:	aa cf       	rjmp	.-172    	; 0x1434 <__fp_szero>
    14e0:	5f 3f       	cpi	r21, 0xFF	; 255
    14e2:	ec f3       	brlt	.-6      	; 0x14de <__mulsf3_pse+0x82>
    14e4:	98 3e       	cpi	r25, 0xE8	; 232
    14e6:	dc f3       	brlt	.-10     	; 0x14de <__mulsf3_pse+0x82>
    14e8:	86 95       	lsr	r24
    14ea:	77 95       	ror	r23
    14ec:	67 95       	ror	r22
    14ee:	b7 95       	ror	r27
    14f0:	f7 95       	ror	r31
    14f2:	e7 95       	ror	r30
    14f4:	9f 5f       	subi	r25, 0xFF	; 255
    14f6:	c1 f7       	brne	.-16     	; 0x14e8 <__mulsf3_pse+0x8c>
    14f8:	fe 2b       	or	r31, r30
    14fa:	88 0f       	add	r24, r24
    14fc:	91 1d       	adc	r25, r1
    14fe:	96 95       	lsr	r25
    1500:	87 95       	ror	r24
    1502:	97 f9       	bld	r25, 7
    1504:	08 95       	ret

00001506 <__udivmodhi4>:
    1506:	aa 1b       	sub	r26, r26
    1508:	bb 1b       	sub	r27, r27
    150a:	51 e1       	ldi	r21, 0x11	; 17
    150c:	07 c0       	rjmp	.+14     	; 0x151c <__udivmodhi4_ep>

0000150e <__udivmodhi4_loop>:
    150e:	aa 1f       	adc	r26, r26
    1510:	bb 1f       	adc	r27, r27
    1512:	a6 17       	cp	r26, r22
    1514:	b7 07       	cpc	r27, r23
    1516:	10 f0       	brcs	.+4      	; 0x151c <__udivmodhi4_ep>
    1518:	a6 1b       	sub	r26, r22
    151a:	b7 0b       	sbc	r27, r23

0000151c <__udivmodhi4_ep>:
    151c:	88 1f       	adc	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	5a 95       	dec	r21
    1522:	a9 f7       	brne	.-22     	; 0x150e <__udivmodhi4_loop>
    1524:	80 95       	com	r24
    1526:	90 95       	com	r25
    1528:	bc 01       	movw	r22, r24
    152a:	cd 01       	movw	r24, r26
    152c:	08 95       	ret

0000152e <atoi>:
    152e:	fc 01       	movw	r30, r24
    1530:	88 27       	eor	r24, r24
    1532:	99 27       	eor	r25, r25
    1534:	e8 94       	clt
    1536:	21 91       	ld	r18, Z+
    1538:	20 32       	cpi	r18, 0x20	; 32
    153a:	e9 f3       	breq	.-6      	; 0x1536 <atoi+0x8>
    153c:	29 30       	cpi	r18, 0x09	; 9
    153e:	10 f0       	brcs	.+4      	; 0x1544 <atoi+0x16>
    1540:	2e 30       	cpi	r18, 0x0E	; 14
    1542:	c8 f3       	brcs	.-14     	; 0x1536 <atoi+0x8>
    1544:	2b 32       	cpi	r18, 0x2B	; 43
    1546:	41 f0       	breq	.+16     	; 0x1558 <atoi+0x2a>
    1548:	2d 32       	cpi	r18, 0x2D	; 45
    154a:	39 f4       	brne	.+14     	; 0x155a <atoi+0x2c>
    154c:	68 94       	set
    154e:	04 c0       	rjmp	.+8      	; 0x1558 <atoi+0x2a>
    1550:	0e 94 be 0a 	call	0x157c	; 0x157c <__mulhi_const_10>
    1554:	82 0f       	add	r24, r18
    1556:	91 1d       	adc	r25, r1
    1558:	21 91       	ld	r18, Z+
    155a:	20 53       	subi	r18, 0x30	; 48
    155c:	2a 30       	cpi	r18, 0x0A	; 10
    155e:	c0 f3       	brcs	.-16     	; 0x1550 <atoi+0x22>
    1560:	1e f4       	brtc	.+6      	; 0x1568 <atoi+0x3a>
    1562:	90 95       	com	r25
    1564:	81 95       	neg	r24
    1566:	9f 4f       	sbci	r25, 0xFF	; 255
    1568:	08 95       	ret

0000156a <strcmp>:
    156a:	fb 01       	movw	r30, r22
    156c:	dc 01       	movw	r26, r24
    156e:	8d 91       	ld	r24, X+
    1570:	01 90       	ld	r0, Z+
    1572:	80 19       	sub	r24, r0
    1574:	01 10       	cpse	r0, r1
    1576:	d9 f3       	breq	.-10     	; 0x156e <strcmp+0x4>
    1578:	99 0b       	sbc	r25, r25
    157a:	08 95       	ret

0000157c <__mulhi_const_10>:
    157c:	7a e0       	ldi	r23, 0x0A	; 10
    157e:	97 9f       	mul	r25, r23
    1580:	90 2d       	mov	r25, r0
    1582:	87 9f       	mul	r24, r23
    1584:	80 2d       	mov	r24, r0
    1586:	91 0d       	add	r25, r1
    1588:	11 24       	eor	r1, r1
    158a:	08 95       	ret

0000158c <printf>:
    158c:	a0 e0       	ldi	r26, 0x00	; 0
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	ec ec       	ldi	r30, 0xCC	; 204
    1592:	fa e0       	ldi	r31, 0x0A	; 10
    1594:	0c 94 ac 0d 	jmp	0x1b58	; 0x1b58 <__prologue_saves__+0x20>
    1598:	fe 01       	movw	r30, r28
    159a:	35 96       	adiw	r30, 0x05	; 5
    159c:	61 91       	ld	r22, Z+
    159e:	71 91       	ld	r23, Z+
    15a0:	80 91 30 04 	lds	r24, 0x0430
    15a4:	90 91 31 04 	lds	r25, 0x0431
    15a8:	af 01       	movw	r20, r30
    15aa:	0e 94 04 0b 	call	0x1608	; 0x1608 <vfprintf>
    15ae:	20 96       	adiw	r28, 0x00	; 0
    15b0:	e2 e0       	ldi	r30, 0x02	; 2
    15b2:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <__epilogue_restores__+0x20>

000015b6 <putchar>:
    15b6:	60 91 30 04 	lds	r22, 0x0430
    15ba:	70 91 31 04 	lds	r23, 0x0431
    15be:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <fputc>
    15c2:	08 95       	ret

000015c4 <sprintf>:
    15c4:	ae e0       	ldi	r26, 0x0E	; 14
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e8 ee       	ldi	r30, 0xE8	; 232
    15ca:	fa e0       	ldi	r31, 0x0A	; 10
    15cc:	0c 94 aa 0d 	jmp	0x1b54	; 0x1b54 <__prologue_saves__+0x1c>
    15d0:	0d 89       	ldd	r16, Y+21	; 0x15
    15d2:	1e 89       	ldd	r17, Y+22	; 0x16
    15d4:	86 e0       	ldi	r24, 0x06	; 6
    15d6:	8c 83       	std	Y+4, r24	; 0x04
    15d8:	1a 83       	std	Y+2, r17	; 0x02
    15da:	09 83       	std	Y+1, r16	; 0x01
    15dc:	8f ef       	ldi	r24, 0xFF	; 255
    15de:	9f e7       	ldi	r25, 0x7F	; 127
    15e0:	9e 83       	std	Y+6, r25	; 0x06
    15e2:	8d 83       	std	Y+5, r24	; 0x05
    15e4:	ae 01       	movw	r20, r28
    15e6:	47 5e       	subi	r20, 0xE7	; 231
    15e8:	5f 4f       	sbci	r21, 0xFF	; 255
    15ea:	ce 01       	movw	r24, r28
    15ec:	01 96       	adiw	r24, 0x01	; 1
    15ee:	6f 89       	ldd	r22, Y+23	; 0x17
    15f0:	78 8d       	ldd	r23, Y+24	; 0x18
    15f2:	0e 94 04 0b 	call	0x1608	; 0x1608 <vfprintf>
    15f6:	ef 81       	ldd	r30, Y+7	; 0x07
    15f8:	f8 85       	ldd	r31, Y+8	; 0x08
    15fa:	e0 0f       	add	r30, r16
    15fc:	f1 1f       	adc	r31, r17
    15fe:	10 82       	st	Z, r1
    1600:	2e 96       	adiw	r28, 0x0e	; 14
    1602:	e4 e0       	ldi	r30, 0x04	; 4
    1604:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <__epilogue_restores__+0x1c>

00001608 <vfprintf>:
    1608:	ad e0       	ldi	r26, 0x0D	; 13
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	ea e0       	ldi	r30, 0x0A	; 10
    160e:	fb e0       	ldi	r31, 0x0B	; 11
    1610:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__prologue_saves__>
    1614:	3c 01       	movw	r6, r24
    1616:	7d 87       	std	Y+13, r23	; 0x0d
    1618:	6c 87       	std	Y+12, r22	; 0x0c
    161a:	5a 01       	movw	r10, r20
    161c:	fc 01       	movw	r30, r24
    161e:	17 82       	std	Z+7, r1	; 0x07
    1620:	16 82       	std	Z+6, r1	; 0x06
    1622:	83 81       	ldd	r24, Z+3	; 0x03
    1624:	81 ff       	sbrs	r24, 1
    1626:	c8 c1       	rjmp	.+912    	; 0x19b8 <vfprintf+0x3b0>
    1628:	2e 01       	movw	r4, r28
    162a:	08 94       	sec
    162c:	41 1c       	adc	r4, r1
    162e:	51 1c       	adc	r5, r1
    1630:	f3 01       	movw	r30, r6
    1632:	93 81       	ldd	r25, Z+3	; 0x03
    1634:	ec 85       	ldd	r30, Y+12	; 0x0c
    1636:	fd 85       	ldd	r31, Y+13	; 0x0d
    1638:	93 fd       	sbrc	r25, 3
    163a:	85 91       	lpm	r24, Z+
    163c:	93 ff       	sbrs	r25, 3
    163e:	81 91       	ld	r24, Z+
    1640:	fd 87       	std	Y+13, r31	; 0x0d
    1642:	ec 87       	std	Y+12, r30	; 0x0c
    1644:	88 23       	and	r24, r24
    1646:	09 f4       	brne	.+2      	; 0x164a <vfprintf+0x42>
    1648:	b3 c1       	rjmp	.+870    	; 0x19b0 <vfprintf+0x3a8>
    164a:	85 32       	cpi	r24, 0x25	; 37
    164c:	41 f4       	brne	.+16     	; 0x165e <vfprintf+0x56>
    164e:	93 fd       	sbrc	r25, 3
    1650:	85 91       	lpm	r24, Z+
    1652:	93 ff       	sbrs	r25, 3
    1654:	81 91       	ld	r24, Z+
    1656:	fd 87       	std	Y+13, r31	; 0x0d
    1658:	ec 87       	std	Y+12, r30	; 0x0c
    165a:	85 32       	cpi	r24, 0x25	; 37
    165c:	29 f4       	brne	.+10     	; 0x1668 <vfprintf+0x60>
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	b3 01       	movw	r22, r6
    1662:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <fputc>
    1666:	e4 cf       	rjmp	.-56     	; 0x1630 <vfprintf+0x28>
    1668:	ff 24       	eor	r15, r15
    166a:	ee 24       	eor	r14, r14
    166c:	10 e0       	ldi	r17, 0x00	; 0
    166e:	10 32       	cpi	r17, 0x20	; 32
    1670:	b0 f4       	brcc	.+44     	; 0x169e <vfprintf+0x96>
    1672:	8b 32       	cpi	r24, 0x2B	; 43
    1674:	69 f0       	breq	.+26     	; 0x1690 <vfprintf+0x88>
    1676:	8c 32       	cpi	r24, 0x2C	; 44
    1678:	28 f4       	brcc	.+10     	; 0x1684 <vfprintf+0x7c>
    167a:	80 32       	cpi	r24, 0x20	; 32
    167c:	51 f0       	breq	.+20     	; 0x1692 <vfprintf+0x8a>
    167e:	83 32       	cpi	r24, 0x23	; 35
    1680:	71 f4       	brne	.+28     	; 0x169e <vfprintf+0x96>
    1682:	0b c0       	rjmp	.+22     	; 0x169a <vfprintf+0x92>
    1684:	8d 32       	cpi	r24, 0x2D	; 45
    1686:	39 f0       	breq	.+14     	; 0x1696 <vfprintf+0x8e>
    1688:	80 33       	cpi	r24, 0x30	; 48
    168a:	49 f4       	brne	.+18     	; 0x169e <vfprintf+0x96>
    168c:	11 60       	ori	r17, 0x01	; 1
    168e:	2c c0       	rjmp	.+88     	; 0x16e8 <vfprintf+0xe0>
    1690:	12 60       	ori	r17, 0x02	; 2
    1692:	14 60       	ori	r17, 0x04	; 4
    1694:	29 c0       	rjmp	.+82     	; 0x16e8 <vfprintf+0xe0>
    1696:	18 60       	ori	r17, 0x08	; 8
    1698:	27 c0       	rjmp	.+78     	; 0x16e8 <vfprintf+0xe0>
    169a:	10 61       	ori	r17, 0x10	; 16
    169c:	25 c0       	rjmp	.+74     	; 0x16e8 <vfprintf+0xe0>
    169e:	17 fd       	sbrc	r17, 7
    16a0:	2e c0       	rjmp	.+92     	; 0x16fe <vfprintf+0xf6>
    16a2:	28 2f       	mov	r18, r24
    16a4:	20 53       	subi	r18, 0x30	; 48
    16a6:	2a 30       	cpi	r18, 0x0A	; 10
    16a8:	98 f4       	brcc	.+38     	; 0x16d0 <vfprintf+0xc8>
    16aa:	16 ff       	sbrs	r17, 6
    16ac:	08 c0       	rjmp	.+16     	; 0x16be <vfprintf+0xb6>
    16ae:	8f 2d       	mov	r24, r15
    16b0:	88 0f       	add	r24, r24
    16b2:	f8 2e       	mov	r15, r24
    16b4:	ff 0c       	add	r15, r15
    16b6:	ff 0c       	add	r15, r15
    16b8:	f8 0e       	add	r15, r24
    16ba:	f2 0e       	add	r15, r18
    16bc:	15 c0       	rjmp	.+42     	; 0x16e8 <vfprintf+0xe0>
    16be:	8e 2d       	mov	r24, r14
    16c0:	88 0f       	add	r24, r24
    16c2:	e8 2e       	mov	r14, r24
    16c4:	ee 0c       	add	r14, r14
    16c6:	ee 0c       	add	r14, r14
    16c8:	e8 0e       	add	r14, r24
    16ca:	e2 0e       	add	r14, r18
    16cc:	10 62       	ori	r17, 0x20	; 32
    16ce:	0c c0       	rjmp	.+24     	; 0x16e8 <vfprintf+0xe0>
    16d0:	8e 32       	cpi	r24, 0x2E	; 46
    16d2:	21 f4       	brne	.+8      	; 0x16dc <vfprintf+0xd4>
    16d4:	16 fd       	sbrc	r17, 6
    16d6:	6c c1       	rjmp	.+728    	; 0x19b0 <vfprintf+0x3a8>
    16d8:	10 64       	ori	r17, 0x40	; 64
    16da:	06 c0       	rjmp	.+12     	; 0x16e8 <vfprintf+0xe0>
    16dc:	8c 36       	cpi	r24, 0x6C	; 108
    16de:	11 f4       	brne	.+4      	; 0x16e4 <vfprintf+0xdc>
    16e0:	10 68       	ori	r17, 0x80	; 128
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <vfprintf+0xe0>
    16e4:	88 36       	cpi	r24, 0x68	; 104
    16e6:	59 f4       	brne	.+22     	; 0x16fe <vfprintf+0xf6>
    16e8:	ec 85       	ldd	r30, Y+12	; 0x0c
    16ea:	fd 85       	ldd	r31, Y+13	; 0x0d
    16ec:	93 fd       	sbrc	r25, 3
    16ee:	85 91       	lpm	r24, Z+
    16f0:	93 ff       	sbrs	r25, 3
    16f2:	81 91       	ld	r24, Z+
    16f4:	fd 87       	std	Y+13, r31	; 0x0d
    16f6:	ec 87       	std	Y+12, r30	; 0x0c
    16f8:	88 23       	and	r24, r24
    16fa:	09 f0       	breq	.+2      	; 0x16fe <vfprintf+0xf6>
    16fc:	b8 cf       	rjmp	.-144    	; 0x166e <vfprintf+0x66>
    16fe:	98 2f       	mov	r25, r24
    1700:	95 54       	subi	r25, 0x45	; 69
    1702:	93 30       	cpi	r25, 0x03	; 3
    1704:	18 f0       	brcs	.+6      	; 0x170c <vfprintf+0x104>
    1706:	90 52       	subi	r25, 0x20	; 32
    1708:	93 30       	cpi	r25, 0x03	; 3
    170a:	38 f4       	brcc	.+14     	; 0x171a <vfprintf+0x112>
    170c:	24 e0       	ldi	r18, 0x04	; 4
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	a2 0e       	add	r10, r18
    1712:	b3 1e       	adc	r11, r19
    1714:	3f e3       	ldi	r19, 0x3F	; 63
    1716:	39 83       	std	Y+1, r19	; 0x01
    1718:	0f c0       	rjmp	.+30     	; 0x1738 <vfprintf+0x130>
    171a:	83 36       	cpi	r24, 0x63	; 99
    171c:	31 f0       	breq	.+12     	; 0x172a <vfprintf+0x122>
    171e:	83 37       	cpi	r24, 0x73	; 115
    1720:	81 f0       	breq	.+32     	; 0x1742 <vfprintf+0x13a>
    1722:	83 35       	cpi	r24, 0x53	; 83
    1724:	09 f0       	breq	.+2      	; 0x1728 <vfprintf+0x120>
    1726:	5a c0       	rjmp	.+180    	; 0x17dc <vfprintf+0x1d4>
    1728:	22 c0       	rjmp	.+68     	; 0x176e <vfprintf+0x166>
    172a:	f5 01       	movw	r30, r10
    172c:	80 81       	ld	r24, Z
    172e:	89 83       	std	Y+1, r24	; 0x01
    1730:	22 e0       	ldi	r18, 0x02	; 2
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	a2 0e       	add	r10, r18
    1736:	b3 1e       	adc	r11, r19
    1738:	21 e0       	ldi	r18, 0x01	; 1
    173a:	c2 2e       	mov	r12, r18
    173c:	d1 2c       	mov	r13, r1
    173e:	42 01       	movw	r8, r4
    1740:	14 c0       	rjmp	.+40     	; 0x176a <vfprintf+0x162>
    1742:	92 e0       	ldi	r25, 0x02	; 2
    1744:	29 2e       	mov	r2, r25
    1746:	31 2c       	mov	r3, r1
    1748:	2a 0c       	add	r2, r10
    174a:	3b 1c       	adc	r3, r11
    174c:	f5 01       	movw	r30, r10
    174e:	80 80       	ld	r8, Z
    1750:	91 80       	ldd	r9, Z+1	; 0x01
    1752:	16 ff       	sbrs	r17, 6
    1754:	03 c0       	rjmp	.+6      	; 0x175c <vfprintf+0x154>
    1756:	6f 2d       	mov	r22, r15
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <vfprintf+0x158>
    175c:	6f ef       	ldi	r22, 0xFF	; 255
    175e:	7f ef       	ldi	r23, 0xFF	; 255
    1760:	c4 01       	movw	r24, r8
    1762:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <strnlen>
    1766:	6c 01       	movw	r12, r24
    1768:	51 01       	movw	r10, r2
    176a:	1f 77       	andi	r17, 0x7F	; 127
    176c:	15 c0       	rjmp	.+42     	; 0x1798 <vfprintf+0x190>
    176e:	82 e0       	ldi	r24, 0x02	; 2
    1770:	28 2e       	mov	r2, r24
    1772:	31 2c       	mov	r3, r1
    1774:	2a 0c       	add	r2, r10
    1776:	3b 1c       	adc	r3, r11
    1778:	f5 01       	movw	r30, r10
    177a:	80 80       	ld	r8, Z
    177c:	91 80       	ldd	r9, Z+1	; 0x01
    177e:	16 ff       	sbrs	r17, 6
    1780:	03 c0       	rjmp	.+6      	; 0x1788 <vfprintf+0x180>
    1782:	6f 2d       	mov	r22, r15
    1784:	70 e0       	ldi	r23, 0x00	; 0
    1786:	02 c0       	rjmp	.+4      	; 0x178c <vfprintf+0x184>
    1788:	6f ef       	ldi	r22, 0xFF	; 255
    178a:	7f ef       	ldi	r23, 0xFF	; 255
    178c:	c4 01       	movw	r24, r8
    178e:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <strnlen_P>
    1792:	6c 01       	movw	r12, r24
    1794:	10 68       	ori	r17, 0x80	; 128
    1796:	51 01       	movw	r10, r2
    1798:	13 fd       	sbrc	r17, 3
    179a:	1c c0       	rjmp	.+56     	; 0x17d4 <vfprintf+0x1cc>
    179c:	06 c0       	rjmp	.+12     	; 0x17aa <vfprintf+0x1a2>
    179e:	80 e2       	ldi	r24, 0x20	; 32
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	b3 01       	movw	r22, r6
    17a4:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <fputc>
    17a8:	ea 94       	dec	r14
    17aa:	8e 2d       	mov	r24, r14
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	c8 16       	cp	r12, r24
    17b0:	d9 06       	cpc	r13, r25
    17b2:	a8 f3       	brcs	.-22     	; 0x179e <vfprintf+0x196>
    17b4:	0f c0       	rjmp	.+30     	; 0x17d4 <vfprintf+0x1cc>
    17b6:	f4 01       	movw	r30, r8
    17b8:	17 fd       	sbrc	r17, 7
    17ba:	85 91       	lpm	r24, Z+
    17bc:	17 ff       	sbrs	r17, 7
    17be:	81 91       	ld	r24, Z+
    17c0:	4f 01       	movw	r8, r30
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	b3 01       	movw	r22, r6
    17c6:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <fputc>
    17ca:	e1 10       	cpse	r14, r1
    17cc:	ea 94       	dec	r14
    17ce:	08 94       	sec
    17d0:	c1 08       	sbc	r12, r1
    17d2:	d1 08       	sbc	r13, r1
    17d4:	c1 14       	cp	r12, r1
    17d6:	d1 04       	cpc	r13, r1
    17d8:	71 f7       	brne	.-36     	; 0x17b6 <vfprintf+0x1ae>
    17da:	e7 c0       	rjmp	.+462    	; 0x19aa <vfprintf+0x3a2>
    17dc:	84 36       	cpi	r24, 0x64	; 100
    17de:	11 f0       	breq	.+4      	; 0x17e4 <vfprintf+0x1dc>
    17e0:	89 36       	cpi	r24, 0x69	; 105
    17e2:	51 f5       	brne	.+84     	; 0x1838 <vfprintf+0x230>
    17e4:	f5 01       	movw	r30, r10
    17e6:	17 ff       	sbrs	r17, 7
    17e8:	07 c0       	rjmp	.+14     	; 0x17f8 <vfprintf+0x1f0>
    17ea:	80 81       	ld	r24, Z
    17ec:	91 81       	ldd	r25, Z+1	; 0x01
    17ee:	a2 81       	ldd	r26, Z+2	; 0x02
    17f0:	b3 81       	ldd	r27, Z+3	; 0x03
    17f2:	24 e0       	ldi	r18, 0x04	; 4
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	08 c0       	rjmp	.+16     	; 0x1808 <vfprintf+0x200>
    17f8:	80 81       	ld	r24, Z
    17fa:	91 81       	ldd	r25, Z+1	; 0x01
    17fc:	aa 27       	eor	r26, r26
    17fe:	97 fd       	sbrc	r25, 7
    1800:	a0 95       	com	r26
    1802:	ba 2f       	mov	r27, r26
    1804:	22 e0       	ldi	r18, 0x02	; 2
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	a2 0e       	add	r10, r18
    180a:	b3 1e       	adc	r11, r19
    180c:	01 2f       	mov	r16, r17
    180e:	0f 76       	andi	r16, 0x6F	; 111
    1810:	b7 ff       	sbrs	r27, 7
    1812:	08 c0       	rjmp	.+16     	; 0x1824 <vfprintf+0x21c>
    1814:	b0 95       	com	r27
    1816:	a0 95       	com	r26
    1818:	90 95       	com	r25
    181a:	81 95       	neg	r24
    181c:	9f 4f       	sbci	r25, 0xFF	; 255
    181e:	af 4f       	sbci	r26, 0xFF	; 255
    1820:	bf 4f       	sbci	r27, 0xFF	; 255
    1822:	00 68       	ori	r16, 0x80	; 128
    1824:	bc 01       	movw	r22, r24
    1826:	cd 01       	movw	r24, r26
    1828:	a2 01       	movw	r20, r4
    182a:	2a e0       	ldi	r18, 0x0A	; 10
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__ultoa_invert>
    1832:	d8 2e       	mov	r13, r24
    1834:	d4 18       	sub	r13, r4
    1836:	3f c0       	rjmp	.+126    	; 0x18b6 <vfprintf+0x2ae>
    1838:	85 37       	cpi	r24, 0x75	; 117
    183a:	21 f4       	brne	.+8      	; 0x1844 <vfprintf+0x23c>
    183c:	1f 7e       	andi	r17, 0xEF	; 239
    183e:	2a e0       	ldi	r18, 0x0A	; 10
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	20 c0       	rjmp	.+64     	; 0x1884 <vfprintf+0x27c>
    1844:	19 7f       	andi	r17, 0xF9	; 249
    1846:	8f 36       	cpi	r24, 0x6F	; 111
    1848:	a9 f0       	breq	.+42     	; 0x1874 <vfprintf+0x26c>
    184a:	80 37       	cpi	r24, 0x70	; 112
    184c:	20 f4       	brcc	.+8      	; 0x1856 <vfprintf+0x24e>
    184e:	88 35       	cpi	r24, 0x58	; 88
    1850:	09 f0       	breq	.+2      	; 0x1854 <vfprintf+0x24c>
    1852:	ae c0       	rjmp	.+348    	; 0x19b0 <vfprintf+0x3a8>
    1854:	0b c0       	rjmp	.+22     	; 0x186c <vfprintf+0x264>
    1856:	80 37       	cpi	r24, 0x70	; 112
    1858:	21 f0       	breq	.+8      	; 0x1862 <vfprintf+0x25a>
    185a:	88 37       	cpi	r24, 0x78	; 120
    185c:	09 f0       	breq	.+2      	; 0x1860 <vfprintf+0x258>
    185e:	a8 c0       	rjmp	.+336    	; 0x19b0 <vfprintf+0x3a8>
    1860:	01 c0       	rjmp	.+2      	; 0x1864 <vfprintf+0x25c>
    1862:	10 61       	ori	r17, 0x10	; 16
    1864:	14 ff       	sbrs	r17, 4
    1866:	09 c0       	rjmp	.+18     	; 0x187a <vfprintf+0x272>
    1868:	14 60       	ori	r17, 0x04	; 4
    186a:	07 c0       	rjmp	.+14     	; 0x187a <vfprintf+0x272>
    186c:	14 ff       	sbrs	r17, 4
    186e:	08 c0       	rjmp	.+16     	; 0x1880 <vfprintf+0x278>
    1870:	16 60       	ori	r17, 0x06	; 6
    1872:	06 c0       	rjmp	.+12     	; 0x1880 <vfprintf+0x278>
    1874:	28 e0       	ldi	r18, 0x08	; 8
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	05 c0       	rjmp	.+10     	; 0x1884 <vfprintf+0x27c>
    187a:	20 e1       	ldi	r18, 0x10	; 16
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <vfprintf+0x27c>
    1880:	20 e1       	ldi	r18, 0x10	; 16
    1882:	32 e0       	ldi	r19, 0x02	; 2
    1884:	f5 01       	movw	r30, r10
    1886:	17 ff       	sbrs	r17, 7
    1888:	07 c0       	rjmp	.+14     	; 0x1898 <vfprintf+0x290>
    188a:	60 81       	ld	r22, Z
    188c:	71 81       	ldd	r23, Z+1	; 0x01
    188e:	82 81       	ldd	r24, Z+2	; 0x02
    1890:	93 81       	ldd	r25, Z+3	; 0x03
    1892:	44 e0       	ldi	r20, 0x04	; 4
    1894:	50 e0       	ldi	r21, 0x00	; 0
    1896:	06 c0       	rjmp	.+12     	; 0x18a4 <vfprintf+0x29c>
    1898:	60 81       	ld	r22, Z
    189a:	71 81       	ldd	r23, Z+1	; 0x01
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	42 e0       	ldi	r20, 0x02	; 2
    18a2:	50 e0       	ldi	r21, 0x00	; 0
    18a4:	a4 0e       	add	r10, r20
    18a6:	b5 1e       	adc	r11, r21
    18a8:	a2 01       	movw	r20, r4
    18aa:	0e 94 3e 0d 	call	0x1a7c	; 0x1a7c <__ultoa_invert>
    18ae:	d8 2e       	mov	r13, r24
    18b0:	d4 18       	sub	r13, r4
    18b2:	01 2f       	mov	r16, r17
    18b4:	0f 77       	andi	r16, 0x7F	; 127
    18b6:	06 ff       	sbrs	r16, 6
    18b8:	09 c0       	rjmp	.+18     	; 0x18cc <vfprintf+0x2c4>
    18ba:	0e 7f       	andi	r16, 0xFE	; 254
    18bc:	df 14       	cp	r13, r15
    18be:	30 f4       	brcc	.+12     	; 0x18cc <vfprintf+0x2c4>
    18c0:	04 ff       	sbrs	r16, 4
    18c2:	06 c0       	rjmp	.+12     	; 0x18d0 <vfprintf+0x2c8>
    18c4:	02 fd       	sbrc	r16, 2
    18c6:	04 c0       	rjmp	.+8      	; 0x18d0 <vfprintf+0x2c8>
    18c8:	0f 7e       	andi	r16, 0xEF	; 239
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <vfprintf+0x2c8>
    18cc:	1d 2d       	mov	r17, r13
    18ce:	01 c0       	rjmp	.+2      	; 0x18d2 <vfprintf+0x2ca>
    18d0:	1f 2d       	mov	r17, r15
    18d2:	80 2f       	mov	r24, r16
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	04 ff       	sbrs	r16, 4
    18d8:	0c c0       	rjmp	.+24     	; 0x18f2 <vfprintf+0x2ea>
    18da:	fe 01       	movw	r30, r28
    18dc:	ed 0d       	add	r30, r13
    18de:	f1 1d       	adc	r31, r1
    18e0:	20 81       	ld	r18, Z
    18e2:	20 33       	cpi	r18, 0x30	; 48
    18e4:	11 f4       	brne	.+4      	; 0x18ea <vfprintf+0x2e2>
    18e6:	09 7e       	andi	r16, 0xE9	; 233
    18e8:	09 c0       	rjmp	.+18     	; 0x18fc <vfprintf+0x2f4>
    18ea:	02 ff       	sbrs	r16, 2
    18ec:	06 c0       	rjmp	.+12     	; 0x18fa <vfprintf+0x2f2>
    18ee:	1e 5f       	subi	r17, 0xFE	; 254
    18f0:	05 c0       	rjmp	.+10     	; 0x18fc <vfprintf+0x2f4>
    18f2:	86 78       	andi	r24, 0x86	; 134
    18f4:	90 70       	andi	r25, 0x00	; 0
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	09 f0       	breq	.+2      	; 0x18fc <vfprintf+0x2f4>
    18fa:	1f 5f       	subi	r17, 0xFF	; 255
    18fc:	80 2e       	mov	r8, r16
    18fe:	99 24       	eor	r9, r9
    1900:	03 fd       	sbrc	r16, 3
    1902:	12 c0       	rjmp	.+36     	; 0x1928 <vfprintf+0x320>
    1904:	00 ff       	sbrs	r16, 0
    1906:	0d c0       	rjmp	.+26     	; 0x1922 <vfprintf+0x31a>
    1908:	fd 2c       	mov	r15, r13
    190a:	1e 15       	cp	r17, r14
    190c:	50 f4       	brcc	.+20     	; 0x1922 <vfprintf+0x31a>
    190e:	fe 0c       	add	r15, r14
    1910:	f1 1a       	sub	r15, r17
    1912:	1e 2d       	mov	r17, r14
    1914:	06 c0       	rjmp	.+12     	; 0x1922 <vfprintf+0x31a>
    1916:	80 e2       	ldi	r24, 0x20	; 32
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	b3 01       	movw	r22, r6
    191c:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <fputc>
    1920:	1f 5f       	subi	r17, 0xFF	; 255
    1922:	1e 15       	cp	r17, r14
    1924:	c0 f3       	brcs	.-16     	; 0x1916 <vfprintf+0x30e>
    1926:	04 c0       	rjmp	.+8      	; 0x1930 <vfprintf+0x328>
    1928:	1e 15       	cp	r17, r14
    192a:	10 f4       	brcc	.+4      	; 0x1930 <vfprintf+0x328>
    192c:	e1 1a       	sub	r14, r17
    192e:	01 c0       	rjmp	.+2      	; 0x1932 <vfprintf+0x32a>
    1930:	ee 24       	eor	r14, r14
    1932:	84 fe       	sbrs	r8, 4
    1934:	0f c0       	rjmp	.+30     	; 0x1954 <vfprintf+0x34c>
    1936:	80 e3       	ldi	r24, 0x30	; 48
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	b3 01       	movw	r22, r6
    193c:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <fputc>
    1940:	82 fe       	sbrs	r8, 2
    1942:	1f c0       	rjmp	.+62     	; 0x1982 <vfprintf+0x37a>
    1944:	81 fe       	sbrs	r8, 1
    1946:	03 c0       	rjmp	.+6      	; 0x194e <vfprintf+0x346>
    1948:	88 e5       	ldi	r24, 0x58	; 88
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	10 c0       	rjmp	.+32     	; 0x196e <vfprintf+0x366>
    194e:	88 e7       	ldi	r24, 0x78	; 120
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	0d c0       	rjmp	.+26     	; 0x196e <vfprintf+0x366>
    1954:	c4 01       	movw	r24, r8
    1956:	86 78       	andi	r24, 0x86	; 134
    1958:	90 70       	andi	r25, 0x00	; 0
    195a:	00 97       	sbiw	r24, 0x00	; 0
    195c:	91 f0       	breq	.+36     	; 0x1982 <vfprintf+0x37a>
    195e:	81 fc       	sbrc	r8, 1
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <vfprintf+0x35e>
    1962:	80 e2       	ldi	r24, 0x20	; 32
    1964:	01 c0       	rjmp	.+2      	; 0x1968 <vfprintf+0x360>
    1966:	8b e2       	ldi	r24, 0x2B	; 43
    1968:	07 fd       	sbrc	r16, 7
    196a:	8d e2       	ldi	r24, 0x2D	; 45
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	b3 01       	movw	r22, r6
    1970:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <fputc>
    1974:	06 c0       	rjmp	.+12     	; 0x1982 <vfprintf+0x37a>
    1976:	80 e3       	ldi	r24, 0x30	; 48
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	b3 01       	movw	r22, r6
    197c:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <fputc>
    1980:	fa 94       	dec	r15
    1982:	df 14       	cp	r13, r15
    1984:	c0 f3       	brcs	.-16     	; 0x1976 <vfprintf+0x36e>
    1986:	da 94       	dec	r13
    1988:	f2 01       	movw	r30, r4
    198a:	ed 0d       	add	r30, r13
    198c:	f1 1d       	adc	r31, r1
    198e:	80 81       	ld	r24, Z
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	b3 01       	movw	r22, r6
    1994:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <fputc>
    1998:	dd 20       	and	r13, r13
    199a:	a9 f7       	brne	.-22     	; 0x1986 <vfprintf+0x37e>
    199c:	06 c0       	rjmp	.+12     	; 0x19aa <vfprintf+0x3a2>
    199e:	80 e2       	ldi	r24, 0x20	; 32
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	b3 01       	movw	r22, r6
    19a4:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <fputc>
    19a8:	ea 94       	dec	r14
    19aa:	ee 20       	and	r14, r14
    19ac:	c1 f7       	brne	.-16     	; 0x199e <vfprintf+0x396>
    19ae:	40 ce       	rjmp	.-896    	; 0x1630 <vfprintf+0x28>
    19b0:	f3 01       	movw	r30, r6
    19b2:	86 81       	ldd	r24, Z+6	; 0x06
    19b4:	97 81       	ldd	r25, Z+7	; 0x07
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <vfprintf+0x3b4>
    19b8:	8f ef       	ldi	r24, 0xFF	; 255
    19ba:	9f ef       	ldi	r25, 0xFF	; 255
    19bc:	2d 96       	adiw	r28, 0x0d	; 13
    19be:	e2 e1       	ldi	r30, 0x12	; 18
    19c0:	0c 94 b8 0d 	jmp	0x1b70	; 0x1b70 <__epilogue_restores__>

000019c4 <__eerd_byte_m328p>:
    19c4:	f9 99       	sbic	0x1f, 1	; 31
    19c6:	fe cf       	rjmp	.-4      	; 0x19c4 <__eerd_byte_m328p>
    19c8:	92 bd       	out	0x22, r25	; 34
    19ca:	81 bd       	out	0x21, r24	; 33
    19cc:	f8 9a       	sbi	0x1f, 0	; 31
    19ce:	99 27       	eor	r25, r25
    19d0:	80 b5       	in	r24, 0x20	; 32
    19d2:	08 95       	ret

000019d4 <__eeupd_byte_m328p>:
    19d4:	26 2f       	mov	r18, r22

000019d6 <__eeupd_r18_m328p>:
    19d6:	f9 99       	sbic	0x1f, 1	; 31
    19d8:	fe cf       	rjmp	.-4      	; 0x19d6 <__eeupd_r18_m328p>
    19da:	92 bd       	out	0x22, r25	; 34
    19dc:	81 bd       	out	0x21, r24	; 33
    19de:	f8 9a       	sbi	0x1f, 0	; 31
    19e0:	01 97       	sbiw	r24, 0x01	; 1
    19e2:	00 b4       	in	r0, 0x20	; 32
    19e4:	02 16       	cp	r0, r18
    19e6:	39 f0       	breq	.+14     	; 0x19f6 <__eeupd_r18_m328p+0x20>
    19e8:	1f ba       	out	0x1f, r1	; 31
    19ea:	20 bd       	out	0x20, r18	; 32
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	fa 9a       	sbi	0x1f, 2	; 31
    19f2:	f9 9a       	sbi	0x1f, 1	; 31
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	08 95       	ret

000019f8 <strnlen_P>:
    19f8:	fc 01       	movw	r30, r24
    19fa:	05 90       	lpm	r0, Z+
    19fc:	61 50       	subi	r22, 0x01	; 1
    19fe:	70 40       	sbci	r23, 0x00	; 0
    1a00:	01 10       	cpse	r0, r1
    1a02:	d8 f7       	brcc	.-10     	; 0x19fa <strnlen_P+0x2>
    1a04:	80 95       	com	r24
    1a06:	90 95       	com	r25
    1a08:	8e 0f       	add	r24, r30
    1a0a:	9f 1f       	adc	r25, r31
    1a0c:	08 95       	ret

00001a0e <strnlen>:
    1a0e:	fc 01       	movw	r30, r24
    1a10:	61 50       	subi	r22, 0x01	; 1
    1a12:	70 40       	sbci	r23, 0x00	; 0
    1a14:	01 90       	ld	r0, Z+
    1a16:	01 10       	cpse	r0, r1
    1a18:	d8 f7       	brcc	.-10     	; 0x1a10 <strnlen+0x2>
    1a1a:	80 95       	com	r24
    1a1c:	90 95       	com	r25
    1a1e:	8e 0f       	add	r24, r30
    1a20:	9f 1f       	adc	r25, r31
    1a22:	08 95       	ret

00001a24 <fputc>:
    1a24:	0f 93       	push	r16
    1a26:	1f 93       	push	r17
    1a28:	cf 93       	push	r28
    1a2a:	df 93       	push	r29
    1a2c:	8c 01       	movw	r16, r24
    1a2e:	eb 01       	movw	r28, r22
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	81 ff       	sbrs	r24, 1
    1a34:	1b c0       	rjmp	.+54     	; 0x1a6c <fputc+0x48>
    1a36:	82 ff       	sbrs	r24, 2
    1a38:	0d c0       	rjmp	.+26     	; 0x1a54 <fputc+0x30>
    1a3a:	2e 81       	ldd	r18, Y+6	; 0x06
    1a3c:	3f 81       	ldd	r19, Y+7	; 0x07
    1a3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a40:	9d 81       	ldd	r25, Y+5	; 0x05
    1a42:	28 17       	cp	r18, r24
    1a44:	39 07       	cpc	r19, r25
    1a46:	64 f4       	brge	.+24     	; 0x1a60 <fputc+0x3c>
    1a48:	e8 81       	ld	r30, Y
    1a4a:	f9 81       	ldd	r31, Y+1	; 0x01
    1a4c:	01 93       	st	Z+, r16
    1a4e:	f9 83       	std	Y+1, r31	; 0x01
    1a50:	e8 83       	st	Y, r30
    1a52:	06 c0       	rjmp	.+12     	; 0x1a60 <fputc+0x3c>
    1a54:	e8 85       	ldd	r30, Y+8	; 0x08
    1a56:	f9 85       	ldd	r31, Y+9	; 0x09
    1a58:	80 2f       	mov	r24, r16
    1a5a:	09 95       	icall
    1a5c:	00 97       	sbiw	r24, 0x00	; 0
    1a5e:	31 f4       	brne	.+12     	; 0x1a6c <fputc+0x48>
    1a60:	8e 81       	ldd	r24, Y+6	; 0x06
    1a62:	9f 81       	ldd	r25, Y+7	; 0x07
    1a64:	01 96       	adiw	r24, 0x01	; 1
    1a66:	9f 83       	std	Y+7, r25	; 0x07
    1a68:	8e 83       	std	Y+6, r24	; 0x06
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <fputc+0x4c>
    1a6c:	0f ef       	ldi	r16, 0xFF	; 255
    1a6e:	1f ef       	ldi	r17, 0xFF	; 255
    1a70:	c8 01       	movw	r24, r16
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	1f 91       	pop	r17
    1a78:	0f 91       	pop	r16
    1a7a:	08 95       	ret

00001a7c <__ultoa_invert>:
    1a7c:	fa 01       	movw	r30, r20
    1a7e:	aa 27       	eor	r26, r26
    1a80:	28 30       	cpi	r18, 0x08	; 8
    1a82:	51 f1       	breq	.+84     	; 0x1ad8 <__ultoa_invert+0x5c>
    1a84:	20 31       	cpi	r18, 0x10	; 16
    1a86:	81 f1       	breq	.+96     	; 0x1ae8 <__ultoa_invert+0x6c>
    1a88:	e8 94       	clt
    1a8a:	6f 93       	push	r22
    1a8c:	6e 7f       	andi	r22, 0xFE	; 254
    1a8e:	6e 5f       	subi	r22, 0xFE	; 254
    1a90:	7f 4f       	sbci	r23, 0xFF	; 255
    1a92:	8f 4f       	sbci	r24, 0xFF	; 255
    1a94:	9f 4f       	sbci	r25, 0xFF	; 255
    1a96:	af 4f       	sbci	r26, 0xFF	; 255
    1a98:	b1 e0       	ldi	r27, 0x01	; 1
    1a9a:	3e d0       	rcall	.+124    	; 0x1b18 <__ultoa_invert+0x9c>
    1a9c:	b4 e0       	ldi	r27, 0x04	; 4
    1a9e:	3c d0       	rcall	.+120    	; 0x1b18 <__ultoa_invert+0x9c>
    1aa0:	67 0f       	add	r22, r23
    1aa2:	78 1f       	adc	r23, r24
    1aa4:	89 1f       	adc	r24, r25
    1aa6:	9a 1f       	adc	r25, r26
    1aa8:	a1 1d       	adc	r26, r1
    1aaa:	68 0f       	add	r22, r24
    1aac:	79 1f       	adc	r23, r25
    1aae:	8a 1f       	adc	r24, r26
    1ab0:	91 1d       	adc	r25, r1
    1ab2:	a1 1d       	adc	r26, r1
    1ab4:	6a 0f       	add	r22, r26
    1ab6:	71 1d       	adc	r23, r1
    1ab8:	81 1d       	adc	r24, r1
    1aba:	91 1d       	adc	r25, r1
    1abc:	a1 1d       	adc	r26, r1
    1abe:	20 d0       	rcall	.+64     	; 0x1b00 <__ultoa_invert+0x84>
    1ac0:	09 f4       	brne	.+2      	; 0x1ac4 <__ultoa_invert+0x48>
    1ac2:	68 94       	set
    1ac4:	3f 91       	pop	r19
    1ac6:	2a e0       	ldi	r18, 0x0A	; 10
    1ac8:	26 9f       	mul	r18, r22
    1aca:	11 24       	eor	r1, r1
    1acc:	30 19       	sub	r19, r0
    1ace:	30 5d       	subi	r19, 0xD0	; 208
    1ad0:	31 93       	st	Z+, r19
    1ad2:	de f6       	brtc	.-74     	; 0x1a8a <__ultoa_invert+0xe>
    1ad4:	cf 01       	movw	r24, r30
    1ad6:	08 95       	ret
    1ad8:	46 2f       	mov	r20, r22
    1ada:	47 70       	andi	r20, 0x07	; 7
    1adc:	40 5d       	subi	r20, 0xD0	; 208
    1ade:	41 93       	st	Z+, r20
    1ae0:	b3 e0       	ldi	r27, 0x03	; 3
    1ae2:	0f d0       	rcall	.+30     	; 0x1b02 <__ultoa_invert+0x86>
    1ae4:	c9 f7       	brne	.-14     	; 0x1ad8 <__ultoa_invert+0x5c>
    1ae6:	f6 cf       	rjmp	.-20     	; 0x1ad4 <__ultoa_invert+0x58>
    1ae8:	46 2f       	mov	r20, r22
    1aea:	4f 70       	andi	r20, 0x0F	; 15
    1aec:	40 5d       	subi	r20, 0xD0	; 208
    1aee:	4a 33       	cpi	r20, 0x3A	; 58
    1af0:	18 f0       	brcs	.+6      	; 0x1af8 <__ultoa_invert+0x7c>
    1af2:	49 5d       	subi	r20, 0xD9	; 217
    1af4:	31 fd       	sbrc	r19, 1
    1af6:	40 52       	subi	r20, 0x20	; 32
    1af8:	41 93       	st	Z+, r20
    1afa:	02 d0       	rcall	.+4      	; 0x1b00 <__ultoa_invert+0x84>
    1afc:	a9 f7       	brne	.-22     	; 0x1ae8 <__ultoa_invert+0x6c>
    1afe:	ea cf       	rjmp	.-44     	; 0x1ad4 <__ultoa_invert+0x58>
    1b00:	b4 e0       	ldi	r27, 0x04	; 4
    1b02:	a6 95       	lsr	r26
    1b04:	97 95       	ror	r25
    1b06:	87 95       	ror	r24
    1b08:	77 95       	ror	r23
    1b0a:	67 95       	ror	r22
    1b0c:	ba 95       	dec	r27
    1b0e:	c9 f7       	brne	.-14     	; 0x1b02 <__ultoa_invert+0x86>
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	61 05       	cpc	r22, r1
    1b14:	71 05       	cpc	r23, r1
    1b16:	08 95       	ret
    1b18:	9b 01       	movw	r18, r22
    1b1a:	ac 01       	movw	r20, r24
    1b1c:	0a 2e       	mov	r0, r26
    1b1e:	06 94       	lsr	r0
    1b20:	57 95       	ror	r21
    1b22:	47 95       	ror	r20
    1b24:	37 95       	ror	r19
    1b26:	27 95       	ror	r18
    1b28:	ba 95       	dec	r27
    1b2a:	c9 f7       	brne	.-14     	; 0x1b1e <__ultoa_invert+0xa2>
    1b2c:	62 0f       	add	r22, r18
    1b2e:	73 1f       	adc	r23, r19
    1b30:	84 1f       	adc	r24, r20
    1b32:	95 1f       	adc	r25, r21
    1b34:	a0 1d       	adc	r26, r0
    1b36:	08 95       	ret

00001b38 <__prologue_saves__>:
    1b38:	2f 92       	push	r2
    1b3a:	3f 92       	push	r3
    1b3c:	4f 92       	push	r4
    1b3e:	5f 92       	push	r5
    1b40:	6f 92       	push	r6
    1b42:	7f 92       	push	r7
    1b44:	8f 92       	push	r8
    1b46:	9f 92       	push	r9
    1b48:	af 92       	push	r10
    1b4a:	bf 92       	push	r11
    1b4c:	cf 92       	push	r12
    1b4e:	df 92       	push	r13
    1b50:	ef 92       	push	r14
    1b52:	ff 92       	push	r15
    1b54:	0f 93       	push	r16
    1b56:	1f 93       	push	r17
    1b58:	cf 93       	push	r28
    1b5a:	df 93       	push	r29
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
    1b60:	ca 1b       	sub	r28, r26
    1b62:	db 0b       	sbc	r29, r27
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	09 94       	ijmp

00001b70 <__epilogue_restores__>:
    1b70:	2a 88       	ldd	r2, Y+18	; 0x12
    1b72:	39 88       	ldd	r3, Y+17	; 0x11
    1b74:	48 88       	ldd	r4, Y+16	; 0x10
    1b76:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b78:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b7a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b7c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b7e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b80:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b82:	b9 84       	ldd	r11, Y+9	; 0x09
    1b84:	c8 84       	ldd	r12, Y+8	; 0x08
    1b86:	df 80       	ldd	r13, Y+7	; 0x07
    1b88:	ee 80       	ldd	r14, Y+6	; 0x06
    1b8a:	fd 80       	ldd	r15, Y+5	; 0x05
    1b8c:	0c 81       	ldd	r16, Y+4	; 0x04
    1b8e:	1b 81       	ldd	r17, Y+3	; 0x03
    1b90:	aa 81       	ldd	r26, Y+2	; 0x02
    1b92:	b9 81       	ldd	r27, Y+1	; 0x01
    1b94:	ce 0f       	add	r28, r30
    1b96:	d1 1d       	adc	r29, r1
    1b98:	0f b6       	in	r0, 0x3f	; 63
    1b9a:	f8 94       	cli
    1b9c:	de bf       	out	0x3e, r29	; 62
    1b9e:	0f be       	out	0x3f, r0	; 63
    1ba0:	cd bf       	out	0x3d, r28	; 61
    1ba2:	ed 01       	movw	r28, r26
    1ba4:	08 95       	ret

00001ba6 <_exit>:
    1ba6:	f8 94       	cli

00001ba8 <__stop_program>:
    1ba8:	ff cf       	rjmp	.-2      	; 0x1ba8 <__stop_program>
