
Control_Unit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000306  00800100  000019de  00001a72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800406  00800406  00001d78  2**0
                  ALLOC
  3 .stab         000025e0  00000000  00000000  00001d78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008fe  00000000  00000000  00004358  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  00004c58  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e9f  00000000  00000000  00004e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d7e  00000000  00000000  00006d37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001436  00000000  00000000  00007ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005a4  00000000  00000000  00008eec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006db  00000000  00000000  00009490  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bdc  00000000  00000000  00009b6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000a747  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	14 e0       	ldi	r17, 0x04	; 4
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee ed       	ldi	r30, 0xDE	; 222
      7c:	f9 e1       	ldi	r31, 0x19	; 25
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 30       	cpi	r26, 0x06	; 6
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	14 e0       	ldi	r17, 0x04	; 4
      8c:	a6 e0       	ldi	r26, 0x06	; 6
      8e:	b4 e0       	ldi	r27, 0x04	; 4
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a9 31       	cpi	r26, 0x19	; 25
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 ed 0c 	jmp	0x19da	; 0x19da <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include "Leds.h"
#include "protocolhandeler.h"

int main (void)
{
	init_dist();
      a6:	0e 94 8c 00 	call	0x118	; 0x118 <init_dist>
	init_serial();
      aa:	0e 94 6b 07 	call	0xed6	; 0xed6 <init_serial>
	init_shutter();
      ae:	0e 94 cb 00 	call	0x196	; 0x196 <init_shutter>
	
	while(1)
	{
		read_command();
      b2:	0e 94 43 02 	call	0x486	; 0x486 <read_command>
		init_leds();
      b6:	0e 94 56 01 	call	0x2ac	; 0x2ac <init_leds>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ba:	8f ef       	ldi	r24, 0xFF	; 255
      bc:	93 ed       	ldi	r25, 0xD3	; 211
      be:	a0 e3       	ldi	r26, 0x30	; 48
      c0:	81 50       	subi	r24, 0x01	; 1
      c2:	90 40       	sbci	r25, 0x00	; 0
      c4:	a0 40       	sbci	r26, 0x00	; 0
      c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x1a>
      c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x24>
      ca:	00 00       	nop
      cc:	f2 cf       	rjmp	.-28     	; 0xb2 <main+0xc>

000000ce <init_ports>:

void init_ports(void)
{
	
	//Set PD2 (Trigger) to output and PD3 (Echo) to input
	DDRD = 0b00000100;
      ce:	84 e0       	ldi	r24, 0x04	; 4
      d0:	8a b9       	out	0x0a, r24	; 10
}
      d2:	08 95       	ret

000000d4 <init_timer>:

void init_timer(void)
// prescaling : max time = 2^16/16E6 = 4.1 ms, 4.1 >> 2.3, so no prescaling required
// normal mode, no prescale, stop timer
{
	TCCR1A = 0;
      d4:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = _BV(CS10);
      d8:	81 e0       	ldi	r24, 0x01	; 1
      da:	80 93 81 00 	sts	0x0081, r24
}
      de:	08 95       	ret

000000e0 <stop_timer>:

void stop_timer()
{
	//Stop timer and reset value
	TCCR1B = 0;
      e0:	10 92 81 00 	sts	0x0081, r1
	TCNT1 = 0;
      e4:	10 92 85 00 	sts	0x0085, r1
      e8:	10 92 84 00 	sts	0x0084, r1
}
      ec:	08 95       	ret

000000ee <init_ext_int>:

void init_ext_int(void)
{
	// any change triggers ext interrupt 1
	EICRA = (1 << ISC10);
      ee:	84 e0       	ldi	r24, 0x04	; 4
      f0:	80 93 69 00 	sts	0x0069, r24
	EIMSK = (1 << INT1);
      f4:	82 e0       	ldi	r24, 0x02	; 2
      f6:	8d bb       	out	0x1d, r24	; 29
}
      f8:	08 95       	ret

000000fa <calc_cm>:

uint16_t calc_cm(uint16_t counter)
{
	/* First set cycles to uS and divide by 58 to get cm */
	return counter / 16 / 58;
      fa:	60 ea       	ldi	r22, 0xA0	; 160
      fc:	73 e0       	ldi	r23, 0x03	; 3
      fe:	0e 94 9d 09 	call	0x133a	; 0x133a <__udivmodhi4>
     102:	86 2f       	mov	r24, r22
     104:	97 2f       	mov	r25, r23
}
     106:	08 95       	ret

00000108 <sendPulse>:

void sendPulse()
{
	PORTD = 4;
     108:	84 e0       	ldi	r24, 0x04	; 4
     10a:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     10c:	85 e3       	ldi	r24, 0x35	; 53
     10e:	8a 95       	dec	r24
     110:	f1 f7       	brne	.-4      	; 0x10e <sendPulse+0x6>
     112:	00 00       	nop
	_delay_us(10);
	PORTD = (0<<PORTD0);
     114:	1b b8       	out	0x0b, r1	; 11
}
     116:	08 95       	ret

00000118 <init_dist>:

void init_dist()
{
	init_ports();
     118:	0e 94 67 00 	call	0xce	; 0xce <init_ports>
	init_ext_int();
     11c:	0e 94 77 00 	call	0xee	; 0xee <init_ext_int>
	sei();
     120:	78 94       	sei
}
     122:	08 95       	ret

00000124 <read_sensor_dist>:

int read_sensor_dist(void)
{
	sendPulse();
     124:	0e 94 84 00 	call	0x108	; 0x108 <sendPulse>
	stop_timer();
     128:	0e 94 70 00 	call	0xe0	; 0xe0 <stop_timer>
	uint16_t dist = calc_cm(gv_counter);
     12c:	80 91 09 04 	lds	r24, 0x0409
     130:	90 91 0a 04 	lds	r25, 0x040A
     134:	0e 94 7d 00 	call	0xfa	; 0xfa <calc_cm>
	
	return dist;
}
     138:	08 95       	ret

0000013a <__vector_2>:

ISR (INT1_vect)
{	
     13a:	1f 92       	push	r1
     13c:	0f 92       	push	r0
     13e:	0f b6       	in	r0, 0x3f	; 63
     140:	0f 92       	push	r0
     142:	11 24       	eor	r1, r1
     144:	2f 93       	push	r18
     146:	3f 93       	push	r19
     148:	4f 93       	push	r20
     14a:	5f 93       	push	r21
     14c:	6f 93       	push	r22
     14e:	7f 93       	push	r23
     150:	8f 93       	push	r24
     152:	9f 93       	push	r25
     154:	af 93       	push	r26
     156:	bf 93       	push	r27
     158:	ef 93       	push	r30
     15a:	ff 93       	push	r31
	init_timer();
     15c:	0e 94 6a 00 	call	0xd4	; 0xd4 <init_timer>
	while (bit_is_set(PIND, PD3))
     160:	4b 99       	sbic	0x09, 3	; 9
     162:	fe cf       	rjmp	.-4      	; 0x160 <__vector_2+0x26>
	{
		//Wait for PIND to go back down, hence echo is finished
	}
	gv_counter = TCNT1;	
     164:	80 91 84 00 	lds	r24, 0x0084
     168:	90 91 85 00 	lds	r25, 0x0085
     16c:	90 93 0a 04 	sts	0x040A, r25
     170:	80 93 09 04 	sts	0x0409, r24
     174:	ff 91       	pop	r31
     176:	ef 91       	pop	r30
     178:	bf 91       	pop	r27
     17a:	af 91       	pop	r26
     17c:	9f 91       	pop	r25
     17e:	8f 91       	pop	r24
     180:	7f 91       	pop	r23
     182:	6f 91       	pop	r22
     184:	5f 91       	pop	r21
     186:	4f 91       	pop	r20
     188:	3f 91       	pop	r19
     18a:	2f 91       	pop	r18
     18c:	0f 90       	pop	r0
     18e:	0f be       	out	0x3f, r0	; 63
     190:	0f 90       	pop	r0
     192:	1f 90       	pop	r1
     194:	18 95       	reti

00000196 <init_shutter>:
uint8_t sensor_dist; //read_dist

void init_shutter()
{
	//set DDRB. PD 0 - PD 2 = output (leds).
	DDRB = 0x0F;
     196:	8f e0       	ldi	r24, 0x0F	; 15
     198:	84 b9       	out	0x04, r24	; 4
	set_ths_dist(30);
     19a:	8e e1       	ldi	r24, 0x1E	; 30
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 a9 01 	call	0x352	; 0x352 <set_ths_dist>
	set_ths_light(150);
     1a2:	86 e9       	ldi	r24, 0x96	; 150
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	0e 94 a3 01 	call	0x346	; 0x346 <set_ths_light>
	set_ths_temp(18);
     1aa:	82 e1       	ldi	r24, 0x12	; 18
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0e 94 9d 01 	call	0x33a	; 0x33a <set_ths_temp>
	set_shutter_mode(1);
     1b2:	81 e0       	ldi	r24, 0x01	; 1
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	0e 94 91 01 	call	0x322	; 0x322 <set_shutter_mode>
	set_shutter_state(0);
     1ba:	80 e0       	ldi	r24, 0x00	; 0
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	0e 94 97 01 	call	0x32e	; 0x32e <set_shutter_state>
	uint8_t arduino_name[20] = {'A','r','d','u','i','n','o'};
}
     1c2:	08 95       	ret

000001c4 <moving>:

uint8_t moving()
{
	uint8_t opening_closing;
	if(ths_dist > sensor_dist & sensor_dist > ths_dist_min)
     1c4:	90 91 0d 04 	lds	r25, 0x040D
     1c8:	21 e0       	ldi	r18, 0x01	; 1
     1ca:	80 91 0c 04 	lds	r24, 0x040C
     1ce:	98 17       	cp	r25, r24
     1d0:	08 f0       	brcs	.+2      	; 0x1d4 <moving+0x10>
     1d2:	20 e0       	ldi	r18, 0x00	; 0
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	30 91 03 01 	lds	r19, 0x0103
     1da:	39 17       	cp	r19, r25
     1dc:	08 f0       	brcs	.+2      	; 0x1e0 <moving+0x1c>
     1de:	80 e0       	ldi	r24, 0x00	; 0
	{
		opening_closing = 0;
		//stopped
	}
	return opening_closing;
}
     1e0:	82 23       	and	r24, r18
     1e2:	08 95       	ret

000001e4 <auto_regulator>:
void auto_regulator()
{
	static uint8_t light_set = 0;
	static uint8_t temp_set = 0;
	
	ths_temp = get_ths_temp(); //get_ths_temp()
     1e4:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <get_ths_temp>
     1e8:	90 93 11 04 	sts	0x0411, r25
     1ec:	80 93 10 04 	sts	0x0410, r24
	ths_light = get_ths_light(); //get_ths_light
     1f0:	0e 94 de 01 	call	0x3bc	; 0x3bc <get_ths_light>
     1f4:	80 93 0b 04 	sts	0x040B, r24
	ths_dist = get_ths_dist(); //get_ths_dist
     1f8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <get_ths_dist>
     1fc:	80 93 0c 04 	sts	0x040C, r24
	
	// if moving is 0 =  if fully closed or opened, check if readings are above or below the thresholds. 
	if (moving() == 0)
     200:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <moving>
     204:	88 23       	and	r24, r24
     206:	09 f0       	breq	.+2      	; 0x20a <auto_regulator+0x26>
     208:	43 c0       	rjmp	.+134    	; 0x290 <auto_regulator+0xac>
	{
		//if sensor higher than threshhold
		if (sensor_light > ths_light)
     20a:	20 91 12 04 	lds	r18, 0x0412
     20e:	40 91 0b 04 	lds	r20, 0x040B
     212:	42 17       	cp	r20, r18
     214:	10 f4       	brcc	.+4      	; 0x21a <auto_regulator+0x36>
		{
			light_set = 0;
     216:	10 92 06 04 	sts	0x0406, r1
		}
		//if sensor lower than ths and light isn't set
		if(sensor_light < (ths_light-25) & ~light_set)
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	49 51       	subi	r20, 0x19	; 25
     220:	50 40       	sbci	r21, 0x00	; 0
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	24 17       	cp	r18, r20
     228:	35 07       	cpc	r19, r21
     22a:	14 f0       	brlt	.+4      	; 0x230 <auto_regulator+0x4c>
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	20 91 06 04 	lds	r18, 0x0406
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	20 95       	com	r18
     238:	30 95       	com	r19
     23a:	82 23       	and	r24, r18
     23c:	93 23       	and	r25, r19
     23e:	00 97       	sbiw	r24, 0x00	; 0
     240:	19 f0       	breq	.+6      	; 0x248 <auto_regulator+0x64>
		{
			light_set = 1;
     242:	81 e0       	ldi	r24, 0x01	; 1
     244:	80 93 06 04 	sts	0x0406, r24
		}
		if (celsius > ths_temp);
		{
			temp_set = 0;
     248:	10 92 07 04 	sts	0x0407, r1
		}
		if (celsius < (ths_temp - 2) & ~temp_set)
     24c:	20 91 10 04 	lds	r18, 0x0410
     250:	30 91 11 04 	lds	r19, 0x0411
     254:	22 50       	subi	r18, 0x02	; 2
     256:	30 40       	sbci	r19, 0x00	; 0
     258:	80 91 0e 04 	lds	r24, 0x040E
     25c:	90 91 0f 04 	lds	r25, 0x040F
     260:	82 17       	cp	r24, r18
     262:	93 07       	cpc	r25, r19
     264:	74 f4       	brge	.+28     	; 0x282 <auto_regulator+0x9e>
		{
			temp_set = 1;
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	80 93 07 04 	sts	0x0407, r24
		
		/*
		if light sensor is higher than ths_light and celsius is higher than ths_temp.
		turn on red light = closed
		*/
		if (light_set & temp_set)
     26c:	80 91 06 04 	lds	r24, 0x0406
     270:	80 ff       	sbrs	r24, 0
     272:	07 c0       	rjmp	.+14     	; 0x282 <auto_regulator+0x9e>
		{
			PORTB = 4; //PB2 = green light = closed
     274:	84 e0       	ldi	r24, 0x04	; 4
     276:	85 b9       	out	0x05, r24	; 5
			set_shutter_state(0);
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 97 01 	call	0x32e	; 0x32e <set_shutter_state>
     280:	08 95       	ret
		}
		
		else
		{
			PORTB = 1; //PB0 = red light = open
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	85 b9       	out	0x05, r24	; 5
			set_shutter_state(1);
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 97 01 	call	0x32e	; 0x32e <set_shutter_state>
     28e:	08 95       	ret
		}
	}
	else
	{
		PORTB ^= 2;
     290:	95 b1       	in	r25, 0x05	; 5
     292:	82 e0       	ldi	r24, 0x02	; 2
     294:	89 27       	eor	r24, r25
     296:	85 b9       	out	0x05, r24	; 5
     298:	08 95       	ret

0000029a <manual_regulator>:
}

void manual_regulator()
{
	//if closed
	if (moving() == 0)
     29a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <moving>
     29e:	88 23       	and	r24, r24
     2a0:	21 f4       	brne	.+8      	; 0x2aa <manual_regulator+0x10>
	{
		PORTB ^= 2;
     2a2:	95 b1       	in	r25, 0x05	; 5
     2a4:	82 e0       	ldi	r24, 0x02	; 2
     2a6:	89 27       	eor	r24, r25
     2a8:	85 b9       	out	0x05, r24	; 5
     2aa:	08 95       	ret

000002ac <init_leds>:
}

void init_leds()
{
	int mode;
	mode = get_shutter_mode(); //get_shutter_mode
     2ac:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <get_shutter_mode>
	
	if (mode == 1)
     2b0:	81 30       	cpi	r24, 0x01	; 1
     2b2:	91 05       	cpc	r25, r1
     2b4:	89 f4       	brne	.+34     	; 0x2d8 <init_leds+0x2c>
	{
		celsius = read_sensor_temp(); //read_celsuis
     2b6:	0e 94 d5 07 	call	0xfaa	; 0xfaa <read_sensor_temp>
     2ba:	90 93 0f 04 	sts	0x040F, r25
     2be:	80 93 0e 04 	sts	0x040E, r24
		sensor_dist = read_sensor_dist(); //read_dist
     2c2:	0e 94 92 00 	call	0x124	; 0x124 <read_sensor_dist>
     2c6:	80 93 0d 04 	sts	0x040D, r24
		sensor_light = read_sensor_light(); //read_light
     2ca:	0e 94 87 01 	call	0x30e	; 0x30e <read_sensor_light>
     2ce:	80 93 12 04 	sts	0x0412, r24
		auto_regulator();
     2d2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <auto_regulator>
     2d6:	08 95       	ret
	}
	else if (mode == 0)
     2d8:	00 97       	sbiw	r24, 0x00	; 0
     2da:	31 f4       	brne	.+12     	; 0x2e8 <init_leds+0x3c>
	{
		sensor_dist = read_sensor_dist();
     2dc:	0e 94 92 00 	call	0x124	; 0x124 <read_sensor_dist>
     2e0:	80 93 0d 04 	sts	0x040D, r24
		manual_regulator();
     2e4:	0e 94 4d 01 	call	0x29a	; 0x29a <manual_regulator>
     2e8:	08 95       	ret

000002ea <init_adc_light>:

void init_adc_light()
{
	// ref=Vcc, left adjust the result (8 bit resolution),
	// select channel 0 (PC1 = input)
	ADMUX = (1<<REFS0)|(1<<ADLAR)|(1<<0);
     2ea:	81 e6       	ldi	r24, 0x61	; 97
     2ec:	80 93 7c 00 	sts	0x007C, r24
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     2f0:	87 e8       	ldi	r24, 0x87	; 135
     2f2:	80 93 7a 00 	sts	0x007A, r24
}
     2f6:	08 95       	ret

000002f8 <get_adc_value_light>:

uint8_t get_adc_value_light()
{
	ADCSRA |= (1<<ADSC); // start conversion
     2f8:	ea e7       	ldi	r30, 0x7A	; 122
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	80 81       	ld	r24, Z
     2fe:	80 64       	ori	r24, 0x40	; 64
     300:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     302:	80 81       	ld	r24, Z
     304:	86 fd       	sbrc	r24, 6
     306:	fd cf       	rjmp	.-6      	; 0x302 <get_adc_value_light+0xa>
	return ADCH; // ms 8 bits
     308:	80 91 79 00 	lds	r24, 0x0079
}
     30c:	08 95       	ret

0000030e <read_sensor_light>:

int8_t read_sensor_light()
{
	int sensor_light;
	init_adc_light();
     30e:	0e 94 75 01 	call	0x2ea	; 0x2ea <init_adc_light>
	sensor_light = get_adc_value_light();
     312:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <get_adc_value_light>
	return sensor_light;
	

     316:	08 95       	ret

00000318 <get_shutter_state>:
	return eeprom_read_byte((uint8_t*)shutter_mode_adr);
}

uint8_t get_shutter_state()
{
	return eeprom_read_byte((uint8_t*)shutter_state_adr);
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__eerd_byte_m328p>
}
     320:	08 95       	ret

00000322 <set_shutter_mode>:
#include "serial.h"
#include "protocolhandeler.h"

/*Setters*/
void set_shutter_mode(uint8_t shutter_mode)
{
     322:	68 2f       	mov	r22, r24
	eeprom_update_byte((uint8_t*)shutter_mode_adr, shutter_mode);
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 04 0c 	call	0x1808	; 0x1808 <__eeupd_byte_m328p>
}
     32c:	08 95       	ret

0000032e <set_shutter_state>:

void set_shutter_state(uint8_t shutter_state)
{
     32e:	68 2f       	mov	r22, r24
	eeprom_update_byte((uint8_t*)shutter_state_adr, shutter_state);
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 04 0c 	call	0x1808	; 0x1808 <__eeupd_byte_m328p>
}
     338:	08 95       	ret

0000033a <set_ths_temp>:

void set_ths_temp(int16_t ths_temp)
{
     33a:	68 2f       	mov	r22, r24
	eeprom_update_byte((int16_t*)ths_temp_adr, ths_temp);
     33c:	82 e0       	ldi	r24, 0x02	; 2
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0e 94 04 0c 	call	0x1808	; 0x1808 <__eeupd_byte_m328p>
}
     344:	08 95       	ret

00000346 <set_ths_light>:

void set_ths_light(uint8_t ths_light)
{
     346:	68 2f       	mov	r22, r24
	eeprom_update_byte((uint8_t*)ths_light_adr, ths_light);
     348:	83 e0       	ldi	r24, 0x03	; 3
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 04 0c 	call	0x1808	; 0x1808 <__eeupd_byte_m328p>
}
     350:	08 95       	ret

00000352 <set_ths_dist>:

void set_ths_dist(uint8_t ths_dist)
{
     352:	68 2f       	mov	r22, r24
	eeprom_update_byte((uint8_t*)ths_dist_adr, ths_dist);
     354:	84 e0       	ldi	r24, 0x04	; 4
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	0e 94 04 0c 	call	0x1808	; 0x1808 <__eeupd_byte_m328p>
}
     35c:	08 95       	ret

0000035e <set_arduino_name>:

set_arduino_name(char* str)
{
     35e:	0f 93       	push	r16
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
     364:	8c 01       	movw	r16, r24
	uint8_t i = 0;
     366:	c0 e0       	ldi	r28, 0x00	; 0
	while(strlen(str)>i)
     368:	08 c0       	rjmp	.+16     	; 0x37a <set_arduino_name+0x1c>
	{
		eeprom_update_byte((char*)name_start_adr+i, str[i]);
     36a:	f8 01       	movw	r30, r16
     36c:	e8 0f       	add	r30, r24
     36e:	f9 1f       	adc	r31, r25
     370:	05 96       	adiw	r24, 0x05	; 5
     372:	60 81       	ld	r22, Z
     374:	0e 94 04 0c 	call	0x1808	; 0x1808 <__eeupd_byte_m328p>
		i++;
     378:	cf 5f       	subi	r28, 0xFF	; 255
}

set_arduino_name(char* str)
{
	uint8_t i = 0;
	while(strlen(str)>i)
     37a:	e0 2f       	mov	r30, r16
     37c:	f1 2f       	mov	r31, r17
     37e:	df 01       	movw	r26, r30
     380:	0d 90       	ld	r0, X+
     382:	00 20       	and	r0, r0
     384:	e9 f7       	brne	.-6      	; 0x380 <set_arduino_name+0x22>
     386:	11 97       	sbiw	r26, 0x01	; 1
     388:	ae 1b       	sub	r26, r30
     38a:	bf 0b       	sbc	r27, r31
     38c:	8c 2f       	mov	r24, r28
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	8a 17       	cp	r24, r26
     392:	9b 07       	cpc	r25, r27
     394:	50 f3       	brcs	.-44     	; 0x36a <set_arduino_name+0xc>
	{
		eeprom_update_byte((char*)name_start_adr+i, str[i]);
		i++;
	}
	eeprom_update_byte((char*)name_start_adr+i, '\0');
     396:	05 96       	adiw	r24, 0x05	; 5
     398:	60 e0       	ldi	r22, 0x00	; 0
     39a:	0e 94 04 0c 	call	0x1808	; 0x1808 <__eeupd_byte_m328p>
}
     39e:	cf 91       	pop	r28
     3a0:	1f 91       	pop	r17
     3a2:	0f 91       	pop	r16
     3a4:	08 95       	ret

000003a6 <get_shutter_mode>:

/*Getters*/
uint8_t get_shutter_mode()
{
	return eeprom_read_byte((uint8_t*)shutter_mode_adr);
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__eerd_byte_m328p>
}
     3ae:	08 95       	ret

000003b0 <get_ths_temp>:
	return eeprom_read_byte((uint8_t*)shutter_state_adr);
}

int16_t get_ths_temp()
{
	return eeprom_read_byte((uint16_t*)ths_temp_adr);
     3b0:	82 e0       	ldi	r24, 0x02	; 2
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__eerd_byte_m328p>
}
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	08 95       	ret

000003bc <get_ths_light>:

uint8_t get_ths_light()
{
	return eeprom_read_byte((uint8_t*)ths_light_adr);
     3bc:	83 e0       	ldi	r24, 0x03	; 3
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__eerd_byte_m328p>
}
     3c4:	08 95       	ret

000003c6 <get_ths_dist>:

uint8_t get_ths_dist()
{
	return eeprom_read_byte((uint8_t*)ths_dist_adr);
     3c6:	84 e0       	ldi	r24, 0x04	; 4
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__eerd_byte_m328p>
}
     3ce:	08 95       	ret

000003d0 <get_arduino_name>:

char* get_arduino_name()
{
     3d0:	ff 92       	push	r15
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	cd b7       	in	r28, 0x3d	; 61
     3dc:	de b7       	in	r29, 0x3e	; 62
     3de:	64 97       	sbiw	r28, 0x14	; 20
     3e0:	0f b6       	in	r0, 0x3f	; 63
     3e2:	f8 94       	cli
     3e4:	de bf       	out	0x3e, r29	; 62
     3e6:	0f be       	out	0x3f, r0	; 63
     3e8:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0;
     3ea:	ff 24       	eor	r15, r15
	uint8_t str[20];
	do
	{
		str[i] = eeprom_read_byte((char*)name_start_adr+i);
     3ec:	0f 2d       	mov	r16, r15
     3ee:	10 e0       	ldi	r17, 0x00	; 0
     3f0:	c8 01       	movw	r24, r16
     3f2:	05 96       	adiw	r24, 0x05	; 5
     3f4:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <__eerd_byte_m328p>
     3f8:	e1 e0       	ldi	r30, 0x01	; 1
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	ec 0f       	add	r30, r28
     3fe:	fd 1f       	adc	r31, r29
     400:	e0 0f       	add	r30, r16
     402:	f1 1f       	adc	r31, r17
     404:	80 83       	st	Z, r24
		i++;
     406:	f3 94       	inc	r15
	}while(str[i-1] != '\0');
     408:	fe 01       	movw	r30, r28
     40a:	ef 0d       	add	r30, r15
     40c:	f1 1d       	adc	r31, r1
     40e:	80 81       	ld	r24, Z
     410:	88 23       	and	r24, r24
     412:	61 f7       	brne	.-40     	; 0x3ec <get_arduino_name+0x1c>
	return str;
}
     414:	ce 01       	movw	r24, r28
     416:	01 96       	adiw	r24, 0x01	; 1
     418:	64 96       	adiw	r28, 0x14	; 20
     41a:	0f b6       	in	r0, 0x3f	; 63
     41c:	f8 94       	cli
     41e:	de bf       	out	0x3e, r29	; 62
     420:	0f be       	out	0x3f, r0	; 63
     422:	cd bf       	out	0x3d, r28	; 61
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	ff 90       	pop	r15
     42e:	08 95       	ret

00000430 <open_screen>:

int open_screen()
{
	if (get_shutter_state() != OPEN)
     430:	0e 94 8c 01 	call	0x318	; 0x318 <get_shutter_state>
     434:	81 30       	cpi	r24, 0x01	; 1
     436:	31 f0       	breq	.+12     	; 0x444 <open_screen+0x14>
	{
		set_shutter_state(1);
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	0e 94 97 01 	call	0x32e	; 0x32e <set_shutter_state>
		return 1;
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	08 95       	ret
	}
	return 0;
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	90 e0       	ldi	r25, 0x00	; 0
}
     448:	08 95       	ret

0000044a <close_screen>:

int close_screen()
{
	if (get_shutter_state() != CLOSED)
     44a:	0e 94 8c 01 	call	0x318	; 0x318 <get_shutter_state>
     44e:	88 23       	and	r24, r24
     450:	31 f0       	breq	.+12     	; 0x45e <close_screen+0x14>
	{
		set_shutter_state(0);
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	0e 94 97 01 	call	0x32e	; 0x32e <set_shutter_state>
		return 1;
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	08 95       	ret
	}
	return 0;
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	90 e0       	ldi	r25, 0x00	; 0
}
     462:	08 95       	ret

00000464 <numbers_only>:
{
	while (*s) {
		if (isdigit(*s++) == 0) return 0;
	}

	return 1;
     464:	e8 2f       	mov	r30, r24
     466:	f9 2f       	mov	r31, r25
}

//Source: https://stackoverflow.com/questions/14422775/how-to-check-a-given-string-contains-only-number-or-not-in-c
int numbers_only(const char *s)
{
	while (*s) {
     468:	05 c0       	rjmp	.+10     	; 0x474 <numbers_only+0x10>
		if (isdigit(*s++) == 0) return 0;
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	c0 97       	sbiw	r24, 0x30	; 48
     46e:	8a 30       	cpi	r24, 0x0A	; 10
     470:	91 05       	cpc	r25, r1
     472:	30 f4       	brcc	.+12     	; 0x480 <numbers_only+0x1c>
}

//Source: https://stackoverflow.com/questions/14422775/how-to-check-a-given-string-contains-only-number-or-not-in-c
int numbers_only(const char *s)
{
	while (*s) {
     474:	81 91       	ld	r24, Z+
     476:	88 23       	and	r24, r24
     478:	c1 f7       	brne	.-16     	; 0x46a <numbers_only+0x6>
		if (isdigit(*s++) == 0) return 0;
	}

	return 1;
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	08 95       	ret

//Source: https://stackoverflow.com/questions/14422775/how-to-check-a-given-string-contains-only-number-or-not-in-c
int numbers_only(const char *s)
{
	while (*s) {
		if (isdigit(*s++) == 0) return 0;
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	90 e0       	ldi	r25, 0x00	; 0
	}

	return 1;
}
     484:	08 95       	ret

00000486 <read_command>:

void read_command()
{
     486:	af 92       	push	r10
     488:	bf 92       	push	r11
     48a:	cf 92       	push	r12
     48c:	df 92       	push	r13
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	c4 5b       	subi	r28, 0xB4	; 180
     4a0:	d0 40       	sbci	r29, 0x00	; 0
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	f8 94       	cli
     4a6:	de bf       	out	0x3e, r29	; 62
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	cd bf       	out	0x3d, r28	; 61
	char arg[20];
	char inputbuffer[30];
	char response[100];

	//Reading command
	read_ser(inputbuffer, sizeof(inputbuffer));
     4ac:	ce 01       	movw	r24, r28
     4ae:	c3 96       	adiw	r24, 0x33	; 51
     4b0:	6e e1       	ldi	r22, 0x1E	; 30
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	0e 94 9b 07 	call	0xf36	; 0xf36 <read_ser>

	int i = 0;
	while (inputbuffer[i] != ' ' && inputbuffer[i] != '\0')
     4b8:	2b a9       	sts	0x4b, r18
     4ba:	20 32       	cpi	r18, 0x20	; 32
     4bc:	81 f0       	breq	.+32     	; 0x4de <read_command+0x58>
     4be:	22 23       	and	r18, r18
     4c0:	89 f0       	breq	.+34     	; 0x4e4 <read_command+0x5e>
     4c2:	de 01       	movw	r26, r28
     4c4:	11 96       	adiw	r26, 0x01	; 1
     4c6:	fe 01       	movw	r30, r28
     4c8:	f4 96       	adiw	r30, 0x34	; 52
	char response[100];

	//Reading command
	read_ser(inputbuffer, sizeof(inputbuffer));

	int i = 0;
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	90 e0       	ldi	r25, 0x00	; 0
	while (inputbuffer[i] != ' ' && inputbuffer[i] != '\0')
	{
		commando[i] = inputbuffer[i];
     4ce:	2d 93       	st	X+, r18
		i++;
     4d0:	01 96       	adiw	r24, 0x01	; 1

	//Reading command
	read_ser(inputbuffer, sizeof(inputbuffer));

	int i = 0;
	while (inputbuffer[i] != ' ' && inputbuffer[i] != '\0')
     4d2:	21 91       	ld	r18, Z+
     4d4:	20 32       	cpi	r18, 0x20	; 32
     4d6:	41 f0       	breq	.+16     	; 0x4e8 <read_command+0x62>
     4d8:	22 23       	and	r18, r18
     4da:	c9 f7       	brne	.-14     	; 0x4ce <read_command+0x48>
     4dc:	05 c0       	rjmp	.+10     	; 0x4e8 <read_command+0x62>
	char response[100];

	//Reading command
	read_ser(inputbuffer, sizeof(inputbuffer));

	int i = 0;
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <read_command+0x62>
     4e4:	80 e0       	ldi	r24, 0x00	; 0
     4e6:	90 e0       	ldi	r25, 0x00	; 0
	while (inputbuffer[i] != ' ' && inputbuffer[i] != '\0')
	{
		commando[i] = inputbuffer[i];
		i++;
	}
	commando[i] = '\0';
     4e8:	fe 01       	movw	r30, r28
     4ea:	e8 0f       	add	r30, r24
     4ec:	f9 1f       	adc	r31, r25
     4ee:	11 82       	std	Z+1, r1	; 0x01

	i++; //Spatie skippen
	int j = 0;

	while (inputbuffer[i] != ' ' && inputbuffer[i] != '\0')
     4f0:	fe 01       	movw	r30, r28
     4f2:	e8 0f       	add	r30, r24
     4f4:	f9 1f       	adc	r31, r25
     4f6:	44 a9       	sts	0x44, r20
     4f8:	40 32       	cpi	r20, 0x20	; 32
     4fa:	99 f0       	breq	.+38     	; 0x522 <read_command+0x9c>
     4fc:	44 23       	and	r20, r20
     4fe:	a1 f0       	breq	.+40     	; 0x528 <read_command+0xa2>
     500:	fe 01       	movw	r30, r28
     502:	7f 96       	adiw	r30, 0x1f	; 31
     504:	8c 0f       	add	r24, r28
     506:	9d 1f       	adc	r25, r29
	}

	return 1;
}

void read_command()
     508:	dc 01       	movw	r26, r24
     50a:	d5 96       	adiw	r26, 0x35	; 53
		i++;
	}
	commando[i] = '\0';

	i++; //Spatie skippen
	int j = 0;
     50c:	20 e0       	ldi	r18, 0x00	; 0
     50e:	30 e0       	ldi	r19, 0x00	; 0

	while (inputbuffer[i] != ' ' && inputbuffer[i] != '\0')
	{
		arg[j] = inputbuffer[i];
     510:	41 93       	st	Z+, r20
		i++;
		j++;
     512:	2f 5f       	subi	r18, 0xFF	; 255
     514:	3f 4f       	sbci	r19, 0xFF	; 255
	commando[i] = '\0';

	i++; //Spatie skippen
	int j = 0;

	while (inputbuffer[i] != ' ' && inputbuffer[i] != '\0')
     516:	4d 91       	ld	r20, X+
     518:	40 32       	cpi	r20, 0x20	; 32
     51a:	41 f0       	breq	.+16     	; 0x52c <read_command+0xa6>
     51c:	44 23       	and	r20, r20
     51e:	c1 f7       	brne	.-16     	; 0x510 <read_command+0x8a>
     520:	05 c0       	rjmp	.+10     	; 0x52c <read_command+0xa6>
		i++;
	}
	commando[i] = '\0';

	i++; //Spatie skippen
	int j = 0;
     522:	20 e0       	ldi	r18, 0x00	; 0
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	02 c0       	rjmp	.+4      	; 0x52c <read_command+0xa6>
     528:	20 e0       	ldi	r18, 0x00	; 0
     52a:	30 e0       	ldi	r19, 0x00	; 0
		arg[j] = inputbuffer[i];
		i++;
		j++;
	}

	arg[j] = '\0';
     52c:	2c 0f       	add	r18, r28
     52e:	3d 1f       	adc	r19, r29
     530:	d9 01       	movw	r26, r18
     532:	5f 96       	adiw	r26, 0x1f	; 31
     534:	1c 92       	st	X, r1

	//Handshake to verify we are indeed Groot
	if (strcmp(commando, "WHO_ARE_YOU") == 0)
     536:	ce 01       	movw	r24, r28
     538:	01 96       	adiw	r24, 0x01	; 1
     53a:	64 e0       	ldi	r22, 0x04	; 4
     53c:	71 e0       	ldi	r23, 0x01	; 1
     53e:	0e 94 cf 09 	call	0x139e	; 0x139e <strcmp>
     542:	28 2f       	mov	r18, r24
     544:	39 2f       	mov	r19, r25
     546:	21 15       	cp	r18, r1
     548:	31 05       	cpc	r19, r1
     54a:	21 f4       	brne	.+8      	; 0x554 <read_command+0xce>
	{
		write_ser("I AM GROOT");
     54c:	80 e1       	ldi	r24, 0x10	; 16
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
	}

	//Provide controller with all default settings
	if (strcmp(commando, "GET_SETTINGS")==0)
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	6b e1       	ldi	r22, 0x1B	; 27
     55a:	71 e0       	ldi	r23, 0x01	; 1
     55c:	0e 94 cf 09 	call	0x139e	; 0x139e <strcmp>
     560:	28 2f       	mov	r18, r24
     562:	39 2f       	mov	r19, r25
     564:	21 15       	cp	r18, r1
     566:	31 05       	cpc	r19, r1
     568:	d9 f5       	brne	.+118    	; 0x5e0 <read_command+0x15a>
	{
		sprintf(response, "%s %i %i %i %i", get_arduino_name(), get_shutter_mode(), get_shutter_state(), get_ths_temp(), get_ths_dist());
     56a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <get_arduino_name>
     56e:	6c 01       	movw	r12, r24
     570:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <get_shutter_mode>
     574:	f8 2e       	mov	r15, r24
     576:	0e 94 8c 01 	call	0x318	; 0x318 <get_shutter_state>
     57a:	e8 2e       	mov	r14, r24
     57c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <get_ths_temp>
     580:	5c 01       	movw	r10, r24
     582:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <get_ths_dist>
     586:	ed b7       	in	r30, 0x3d	; 61
     588:	fe b7       	in	r31, 0x3e	; 62
     58a:	3e 97       	sbiw	r30, 0x0e	; 14
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	f8 94       	cli
     590:	fe bf       	out	0x3e, r31	; 62
     592:	0f be       	out	0x3f, r0	; 63
     594:	ed bf       	out	0x3d, r30	; 61
     596:	31 96       	adiw	r30, 0x01	; 1
     598:	8e 01       	movw	r16, r28
     59a:	0f 5a       	subi	r16, 0xAF	; 175
     59c:	1f 4f       	sbci	r17, 0xFF	; 255
     59e:	ad b7       	in	r26, 0x3d	; 61
     5a0:	be b7       	in	r27, 0x3e	; 62
     5a2:	12 96       	adiw	r26, 0x02	; 2
     5a4:	1c 93       	st	X, r17
     5a6:	0e 93       	st	-X, r16
     5a8:	11 97       	sbiw	r26, 0x01	; 1
     5aa:	28 e2       	ldi	r18, 0x28	; 40
     5ac:	31 e0       	ldi	r19, 0x01	; 1
     5ae:	33 83       	std	Z+3, r19	; 0x03
     5b0:	22 83       	std	Z+2, r18	; 0x02
     5b2:	d5 82       	std	Z+5, r13	; 0x05
     5b4:	c4 82       	std	Z+4, r12	; 0x04
     5b6:	f6 82       	std	Z+6, r15	; 0x06
     5b8:	17 82       	std	Z+7, r1	; 0x07
     5ba:	e0 86       	std	Z+8, r14	; 0x08
     5bc:	11 86       	std	Z+9, r1	; 0x09
     5be:	b3 86       	std	Z+11, r11	; 0x0b
     5c0:	a2 86       	std	Z+10, r10	; 0x0a
     5c2:	84 87       	std	Z+12, r24	; 0x0c
     5c4:	15 86       	std	Z+13, r1	; 0x0d
     5c6:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <sprintf>
		write_ser(response);
     5ca:	ed b7       	in	r30, 0x3d	; 61
     5cc:	fe b7       	in	r31, 0x3e	; 62
     5ce:	3e 96       	adiw	r30, 0x0e	; 14
     5d0:	0f b6       	in	r0, 0x3f	; 63
     5d2:	f8 94       	cli
     5d4:	fe bf       	out	0x3e, r31	; 62
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	ed bf       	out	0x3d, r30	; 61
     5da:	c8 01       	movw	r24, r16
     5dc:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
	}

	//If tree to handle all GETTERS
	if (strcmp(commando, "get_adruino_name") == 0)
     5e0:	ce 01       	movw	r24, r28
     5e2:	01 96       	adiw	r24, 0x01	; 1
     5e4:	67 e3       	ldi	r22, 0x37	; 55
     5e6:	71 e0       	ldi	r23, 0x01	; 1
     5e8:	0e 94 cf 09 	call	0x139e	; 0x139e <strcmp>
     5ec:	28 2f       	mov	r18, r24
     5ee:	39 2f       	mov	r19, r25
     5f0:	21 15       	cp	r18, r1
     5f2:	31 05       	cpc	r19, r1
     5f4:	59 f5       	brne	.+86     	; 0x64c <read_command+0x1c6>
	{
		if (get_arduino_name() !=NULL)
     5f6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <get_arduino_name>
     5fa:	00 97       	sbiw	r24, 0x00	; 0
     5fc:	19 f1       	breq	.+70     	; 0x644 <read_command+0x1be>
		{
			sprintf(response, "OK %s", get_arduino_name());
     5fe:	00 d0       	rcall	.+0      	; 0x600 <read_command+0x17a>
     600:	00 d0       	rcall	.+0      	; 0x602 <read_command+0x17c>
     602:	00 d0       	rcall	.+0      	; 0x604 <read_command+0x17e>
     604:	ed b7       	in	r30, 0x3d	; 61
     606:	fe b7       	in	r31, 0x3e	; 62
     608:	31 96       	adiw	r30, 0x01	; 1
     60a:	8e 01       	movw	r16, r28
     60c:	0f 5a       	subi	r16, 0xAF	; 175
     60e:	1f 4f       	sbci	r17, 0xFF	; 255
     610:	ad b7       	in	r26, 0x3d	; 61
     612:	be b7       	in	r27, 0x3e	; 62
     614:	12 96       	adiw	r26, 0x02	; 2
     616:	1c 93       	st	X, r17
     618:	0e 93       	st	-X, r16
     61a:	11 97       	sbiw	r26, 0x01	; 1
     61c:	28 e4       	ldi	r18, 0x48	; 72
     61e:	31 e0       	ldi	r19, 0x01	; 1
     620:	33 83       	std	Z+3, r19	; 0x03
     622:	22 83       	std	Z+2, r18	; 0x02
     624:	95 83       	std	Z+5, r25	; 0x05
     626:	84 83       	std	Z+4, r24	; 0x04
     628:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <sprintf>
			write_ser(response);
     62c:	ed b7       	in	r30, 0x3d	; 61
     62e:	fe b7       	in	r31, 0x3e	; 62
     630:	36 96       	adiw	r30, 0x06	; 6
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	f8 94       	cli
     636:	fe bf       	out	0x3e, r31	; 62
     638:	0f be       	out	0x3f, r0	; 63
     63a:	ed bf       	out	0x3d, r30	; 61
     63c:	c8 01       	movw	r24, r16
     63e:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
     642:	04 c0       	rjmp	.+8      	; 0x64c <read_command+0x1c6>
		}
		else
		{
			write_ser("ERROR 601: Name is not set");
     644:	8e e4       	ldi	r24, 0x4E	; 78
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
		}
	}

	if (strcmp(commando, "GET_STATE") == 0)
     64c:	ce 01       	movw	r24, r28
     64e:	01 96       	adiw	r24, 0x01	; 1
     650:	69 e6       	ldi	r22, 0x69	; 105
     652:	71 e0       	ldi	r23, 0x01	; 1
     654:	0e 94 cf 09 	call	0x139e	; 0x139e <strcmp>
     658:	28 2f       	mov	r18, r24
     65a:	39 2f       	mov	r19, r25
     65c:	21 15       	cp	r18, r1
     65e:	31 05       	cpc	r19, r1
     660:	09 f0       	breq	.+2      	; 0x664 <read_command+0x1de>
     662:	49 c0       	rjmp	.+146    	; 0x6f6 <read_command+0x270>
	{
		if (get_shutter_state() == OPEN || get_shutter_state == CLOSED)
     664:	0e 94 8c 01 	call	0x318	; 0x318 <get_shutter_state>
     668:	81 30       	cpi	r24, 0x01	; 1
     66a:	19 f5       	brne	.+70     	; 0x6b2 <read_command+0x22c>
		{
			sprintf(response, "OK %i", get_shutter_state());
     66c:	00 d0       	rcall	.+0      	; 0x66e <read_command+0x1e8>
     66e:	00 d0       	rcall	.+0      	; 0x670 <read_command+0x1ea>
     670:	00 d0       	rcall	.+0      	; 0x672 <read_command+0x1ec>
     672:	ed b7       	in	r30, 0x3d	; 61
     674:	fe b7       	in	r31, 0x3e	; 62
     676:	31 96       	adiw	r30, 0x01	; 1
     678:	8e 01       	movw	r16, r28
     67a:	0f 5a       	subi	r16, 0xAF	; 175
     67c:	1f 4f       	sbci	r17, 0xFF	; 255
     67e:	ad b7       	in	r26, 0x3d	; 61
     680:	be b7       	in	r27, 0x3e	; 62
     682:	12 96       	adiw	r26, 0x02	; 2
     684:	1c 93       	st	X, r17
     686:	0e 93       	st	-X, r16
     688:	11 97       	sbiw	r26, 0x01	; 1
     68a:	23 e7       	ldi	r18, 0x73	; 115
     68c:	31 e0       	ldi	r19, 0x01	; 1
     68e:	33 83       	std	Z+3, r19	; 0x03
     690:	22 83       	std	Z+2, r18	; 0x02
     692:	84 83       	std	Z+4, r24	; 0x04
     694:	15 82       	std	Z+5, r1	; 0x05
     696:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <sprintf>
			write_ser(response);
     69a:	ed b7       	in	r30, 0x3d	; 61
     69c:	fe b7       	in	r31, 0x3e	; 62
     69e:	36 96       	adiw	r30, 0x06	; 6
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	fe bf       	out	0x3e, r31	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	ed bf       	out	0x3d, r30	; 61
     6aa:	c8 01       	movw	r24, r16
     6ac:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
     6b0:	22 c0       	rjmp	.+68     	; 0x6f6 <read_command+0x270>
		}
		else
		{
			sprintf(response, "ERROR 601: Unrecognized screenstate %i", get_shutter_state());
     6b2:	00 d0       	rcall	.+0      	; 0x6b4 <read_command+0x22e>
     6b4:	00 d0       	rcall	.+0      	; 0x6b6 <read_command+0x230>
     6b6:	00 d0       	rcall	.+0      	; 0x6b8 <read_command+0x232>
     6b8:	ed b7       	in	r30, 0x3d	; 61
     6ba:	fe b7       	in	r31, 0x3e	; 62
     6bc:	31 96       	adiw	r30, 0x01	; 1
     6be:	8e 01       	movw	r16, r28
     6c0:	0f 5a       	subi	r16, 0xAF	; 175
     6c2:	1f 4f       	sbci	r17, 0xFF	; 255
     6c4:	ad b7       	in	r26, 0x3d	; 61
     6c6:	be b7       	in	r27, 0x3e	; 62
     6c8:	12 96       	adiw	r26, 0x02	; 2
     6ca:	1c 93       	st	X, r17
     6cc:	0e 93       	st	-X, r16
     6ce:	11 97       	sbiw	r26, 0x01	; 1
     6d0:	29 e7       	ldi	r18, 0x79	; 121
     6d2:	31 e0       	ldi	r19, 0x01	; 1
     6d4:	33 83       	std	Z+3, r19	; 0x03
     6d6:	22 83       	std	Z+2, r18	; 0x02
     6d8:	84 83       	std	Z+4, r24	; 0x04
     6da:	15 82       	std	Z+5, r1	; 0x05
     6dc:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <sprintf>
			write_ser(response);
     6e0:	ed b7       	in	r30, 0x3d	; 61
     6e2:	fe b7       	in	r31, 0x3e	; 62
     6e4:	36 96       	adiw	r30, 0x06	; 6
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	f8 94       	cli
     6ea:	fe bf       	out	0x3e, r31	; 62
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	ed bf       	out	0x3d, r30	; 61
     6f0:	c8 01       	movw	r24, r16
     6f2:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
		}
	}

	if (strcmp(commando, "GET_MODE") == 0)
     6f6:	ce 01       	movw	r24, r28
     6f8:	01 96       	adiw	r24, 0x01	; 1
     6fa:	60 ea       	ldi	r22, 0xA0	; 160
     6fc:	71 e0       	ldi	r23, 0x01	; 1
     6fe:	0e 94 cf 09 	call	0x139e	; 0x139e <strcmp>
     702:	28 2f       	mov	r18, r24
     704:	39 2f       	mov	r19, r25
     706:	21 15       	cp	r18, r1
     708:	31 05       	cpc	r19, r1
     70a:	09 f0       	breq	.+2      	; 0x70e <read_command+0x288>
     70c:	4b c0       	rjmp	.+150    	; 0x7a4 <read_command+0x31e>
	{
		if (get_shutter_mode()==MANUAL || get_shutter_mode() == AUTO)
     70e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <get_shutter_mode>
     712:	88 23       	and	r24, r24
     714:	11 f0       	breq	.+4      	; 0x71a <read_command+0x294>
     716:	81 30       	cpi	r24, 0x01	; 1
     718:	19 f5       	brne	.+70     	; 0x760 <read_command+0x2da>
		{
			sprintf(response, "OK %i", get_shutter_mode());
     71a:	00 d0       	rcall	.+0      	; 0x71c <read_command+0x296>
     71c:	00 d0       	rcall	.+0      	; 0x71e <read_command+0x298>
     71e:	00 d0       	rcall	.+0      	; 0x720 <read_command+0x29a>
     720:	ed b7       	in	r30, 0x3d	; 61
     722:	fe b7       	in	r31, 0x3e	; 62
     724:	31 96       	adiw	r30, 0x01	; 1
     726:	8e 01       	movw	r16, r28
     728:	0f 5a       	subi	r16, 0xAF	; 175
     72a:	1f 4f       	sbci	r17, 0xFF	; 255
     72c:	ad b7       	in	r26, 0x3d	; 61
     72e:	be b7       	in	r27, 0x3e	; 62
     730:	12 96       	adiw	r26, 0x02	; 2
     732:	1c 93       	st	X, r17
     734:	0e 93       	st	-X, r16
     736:	11 97       	sbiw	r26, 0x01	; 1
     738:	23 e7       	ldi	r18, 0x73	; 115
     73a:	31 e0       	ldi	r19, 0x01	; 1
     73c:	33 83       	std	Z+3, r19	; 0x03
     73e:	22 83       	std	Z+2, r18	; 0x02
     740:	84 83       	std	Z+4, r24	; 0x04
     742:	15 82       	std	Z+5, r1	; 0x05
     744:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <sprintf>
			write_ser(response);
     748:	ed b7       	in	r30, 0x3d	; 61
     74a:	fe b7       	in	r31, 0x3e	; 62
     74c:	36 96       	adiw	r30, 0x06	; 6
     74e:	0f b6       	in	r0, 0x3f	; 63
     750:	f8 94       	cli
     752:	fe bf       	out	0x3e, r31	; 62
     754:	0f be       	out	0x3f, r0	; 63
     756:	ed bf       	out	0x3d, r30	; 61
     758:	c8 01       	movw	r24, r16
     75a:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
     75e:	22 c0       	rjmp	.+68     	; 0x7a4 <read_command+0x31e>
		}
		else
		{
			sprintf(response, "ERROR 601: Unrecognized mode %i", get_shutter_mode());
     760:	00 d0       	rcall	.+0      	; 0x762 <read_command+0x2dc>
     762:	00 d0       	rcall	.+0      	; 0x764 <read_command+0x2de>
     764:	00 d0       	rcall	.+0      	; 0x766 <read_command+0x2e0>
     766:	ed b7       	in	r30, 0x3d	; 61
     768:	fe b7       	in	r31, 0x3e	; 62
     76a:	31 96       	adiw	r30, 0x01	; 1
     76c:	8e 01       	movw	r16, r28
     76e:	0f 5a       	subi	r16, 0xAF	; 175
     770:	1f 4f       	sbci	r17, 0xFF	; 255
     772:	ad b7       	in	r26, 0x3d	; 61
     774:	be b7       	in	r27, 0x3e	; 62
     776:	12 96       	adiw	r26, 0x02	; 2
     778:	1c 93       	st	X, r17
     77a:	0e 93       	st	-X, r16
     77c:	11 97       	sbiw	r26, 0x01	; 1
     77e:	29 ea       	ldi	r18, 0xA9	; 169
     780:	31 e0       	ldi	r19, 0x01	; 1
     782:	33 83       	std	Z+3, r19	; 0x03
     784:	22 83       	std	Z+2, r18	; 0x02
     786:	84 83       	std	Z+4, r24	; 0x04
     788:	15 82       	std	Z+5, r1	; 0x05
     78a:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <sprintf>
			write_ser(response);
     78e:	ed b7       	in	r30, 0x3d	; 61
     790:	fe b7       	in	r31, 0x3e	; 62
     792:	36 96       	adiw	r30, 0x06	; 6
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	f8 94       	cli
     798:	fe bf       	out	0x3e, r31	; 62
     79a:	0f be       	out	0x3f, r0	; 63
     79c:	ed bf       	out	0x3d, r30	; 61
     79e:	c8 01       	movw	r24, r16
     7a0:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
		}
	}

	if (strcmp(commando, "GET_THS_TEMP") == 0)
     7a4:	ce 01       	movw	r24, r28
     7a6:	01 96       	adiw	r24, 0x01	; 1
     7a8:	69 ec       	ldi	r22, 0xC9	; 201
     7aa:	71 e0       	ldi	r23, 0x01	; 1
     7ac:	0e 94 cf 09 	call	0x139e	; 0x139e <strcmp>
     7b0:	28 2f       	mov	r18, r24
     7b2:	39 2f       	mov	r19, r25
     7b4:	21 15       	cp	r18, r1
     7b6:	31 05       	cpc	r19, r1
     7b8:	b1 f5       	brne	.+108    	; 0x826 <read_command+0x3a0>
	{
		if (get_ths_temp()!=NULL)
     7ba:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <get_ths_temp>
     7be:	00 97       	sbiw	r24, 0x00	; 0
     7c0:	19 f1       	breq	.+70     	; 0x808 <read_command+0x382>
		{
			sprintf(response, "OK %i", get_ths_temp());
     7c2:	00 d0       	rcall	.+0      	; 0x7c4 <read_command+0x33e>
     7c4:	00 d0       	rcall	.+0      	; 0x7c6 <read_command+0x340>
     7c6:	00 d0       	rcall	.+0      	; 0x7c8 <read_command+0x342>
     7c8:	ed b7       	in	r30, 0x3d	; 61
     7ca:	fe b7       	in	r31, 0x3e	; 62
     7cc:	31 96       	adiw	r30, 0x01	; 1
     7ce:	8e 01       	movw	r16, r28
     7d0:	0f 5a       	subi	r16, 0xAF	; 175
     7d2:	1f 4f       	sbci	r17, 0xFF	; 255
     7d4:	ad b7       	in	r26, 0x3d	; 61
     7d6:	be b7       	in	r27, 0x3e	; 62
     7d8:	12 96       	adiw	r26, 0x02	; 2
     7da:	1c 93       	st	X, r17
     7dc:	0e 93       	st	-X, r16
     7de:	11 97       	sbiw	r26, 0x01	; 1
     7e0:	23 e7       	ldi	r18, 0x73	; 115
     7e2:	31 e0       	ldi	r19, 0x01	; 1
     7e4:	33 83       	std	Z+3, r19	; 0x03
     7e6:	22 83       	std	Z+2, r18	; 0x02
     7e8:	95 83       	std	Z+5, r25	; 0x05
     7ea:	84 83       	std	Z+4, r24	; 0x04
     7ec:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <sprintf>
			write_ser(response);
     7f0:	ed b7       	in	r30, 0x3d	; 61
     7f2:	fe b7       	in	r31, 0x3e	; 62
     7f4:	36 96       	adiw	r30, 0x06	; 6
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	fe bf       	out	0x3e, r31	; 62
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	ed bf       	out	0x3d, r30	; 61
     800:	c8 01       	movw	r24, r16
     802:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
     806:	0f c0       	rjmp	.+30     	; 0x826 <read_command+0x3a0>
		}
		else
		{
			sprintf(response, "ERROR 442: Could not read value");
     808:	de 01       	movw	r26, r28
     80a:	af 5a       	subi	r26, 0xAF	; 175
     80c:	bf 4f       	sbci	r27, 0xFF	; 255
     80e:	e6 ed       	ldi	r30, 0xD6	; 214
     810:	f1 e0       	ldi	r31, 0x01	; 1
     812:	80 e2       	ldi	r24, 0x20	; 32
     814:	01 90       	ld	r0, Z+
     816:	0d 92       	st	X+, r0
     818:	81 50       	subi	r24, 0x01	; 1
     81a:	e1 f7       	brne	.-8      	; 0x814 <read_command+0x38e>
			write_ser(response);
     81c:	ce 01       	movw	r24, r28
     81e:	8f 5a       	subi	r24, 0xAF	; 175
     820:	9f 4f       	sbci	r25, 0xFF	; 255
     822:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
		}
	}

	if (strcmp(commando, "GET_THS_DIST") == 0)
     826:	ce 01       	movw	r24, r28
     828:	01 96       	adiw	r24, 0x01	; 1
     82a:	66 ef       	ldi	r22, 0xF6	; 246
     82c:	71 e0       	ldi	r23, 0x01	; 1
     82e:	0e 94 cf 09 	call	0x139e	; 0x139e <strcmp>
     832:	28 2f       	mov	r18, r24
     834:	39 2f       	mov	r19, r25
     836:	21 15       	cp	r18, r1
     838:	31 05       	cpc	r19, r1
     83a:	b9 f5       	brne	.+110    	; 0x8aa <read_command+0x424>
	{
		if (get_ths_dist()!=NULL)
     83c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <get_ths_dist>
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	00 97       	sbiw	r24, 0x00	; 0
     844:	19 f1       	breq	.+70     	; 0x88c <read_command+0x406>
		{
			sprintf(response, "OK %i", get_ths_dist());
     846:	00 d0       	rcall	.+0      	; 0x848 <read_command+0x3c2>
     848:	00 d0       	rcall	.+0      	; 0x84a <read_command+0x3c4>
     84a:	00 d0       	rcall	.+0      	; 0x84c <read_command+0x3c6>
     84c:	ed b7       	in	r30, 0x3d	; 61
     84e:	fe b7       	in	r31, 0x3e	; 62
     850:	31 96       	adiw	r30, 0x01	; 1
     852:	8e 01       	movw	r16, r28
     854:	0f 5a       	subi	r16, 0xAF	; 175
     856:	1f 4f       	sbci	r17, 0xFF	; 255
     858:	ad b7       	in	r26, 0x3d	; 61
     85a:	be b7       	in	r27, 0x3e	; 62
     85c:	12 96       	adiw	r26, 0x02	; 2
     85e:	1c 93       	st	X, r17
     860:	0e 93       	st	-X, r16
     862:	11 97       	sbiw	r26, 0x01	; 1
     864:	23 e7       	ldi	r18, 0x73	; 115
     866:	31 e0       	ldi	r19, 0x01	; 1
     868:	33 83       	std	Z+3, r19	; 0x03
     86a:	22 83       	std	Z+2, r18	; 0x02
     86c:	95 83       	std	Z+5, r25	; 0x05
     86e:	84 83       	std	Z+4, r24	; 0x04
     870:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <sprintf>
			write_ser(response);
     874:	ed b7       	in	r30, 0x3d	; 61
     876:	fe b7       	in	r31, 0x3e	; 62
     878:	36 96       	adiw	r30, 0x06	; 6
     87a:	0f b6       	in	r0, 0x3f	; 63
     87c:	f8 94       	cli
     87e:	fe bf       	out	0x3e, r31	; 62
     880:	0f be       	out	0x3f, r0	; 63
     882:	ed bf       	out	0x3d, r30	; 61
     884:	c8 01       	movw	r24, r16
     886:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
     88a:	0f c0       	rjmp	.+30     	; 0x8aa <read_command+0x424>
		}
		else
		{
			sprintf(response, "ERROR 444: Could not read value");
     88c:	de 01       	movw	r26, r28
     88e:	af 5a       	subi	r26, 0xAF	; 175
     890:	bf 4f       	sbci	r27, 0xFF	; 255
     892:	e3 e0       	ldi	r30, 0x03	; 3
     894:	f2 e0       	ldi	r31, 0x02	; 2
     896:	80 e2       	ldi	r24, 0x20	; 32
     898:	01 90       	ld	r0, Z+
     89a:	0d 92       	st	X+, r0
     89c:	81 50       	subi	r24, 0x01	; 1
     89e:	e1 f7       	brne	.-8      	; 0x898 <read_command+0x412>
			write_ser(response);
     8a0:	ce 01       	movw	r24, r28
     8a2:	8f 5a       	subi	r24, 0xAF	; 175
     8a4:	9f 4f       	sbci	r25, 0xFF	; 255
     8a6:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
		}
	}

	if (strcmp(commando, "GET_SENSOR_TEMP") == 0)
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	63 e2       	ldi	r22, 0x23	; 35
     8b0:	72 e0       	ldi	r23, 0x02	; 2
     8b2:	0e 94 cf 09 	call	0x139e	; 0x139e <strcmp>
     8b6:	28 2f       	mov	r18, r24
     8b8:	39 2f       	mov	r19, r25
     8ba:	21 15       	cp	r18, r1
     8bc:	31 05       	cpc	r19, r1
     8be:	09 f0       	breq	.+2      	; 0x8c2 <read_command+0x43c>
     8c0:	52 c0       	rjmp	.+164    	; 0x966 <__stack+0x67>
	{
		if (read_sensor_temp()!=NULL && read_sensor_temp() <= 50)
     8c2:	0e 94 d5 07 	call	0xfaa	; 0xfaa <read_sensor_temp>
     8c6:	00 97       	sbiw	r24, 0x00	; 0
     8c8:	51 f1       	breq	.+84     	; 0x91e <__stack+0x1f>
     8ca:	0e 94 d5 07 	call	0xfaa	; 0xfaa <read_sensor_temp>
     8ce:	83 33       	cpi	r24, 0x33	; 51
     8d0:	91 05       	cpc	r25, r1
     8d2:	2c f5       	brge	.+74     	; 0x91e <__stack+0x1f>
		{
			sprintf(response, "OK %i", read_sensor_temp());
     8d4:	0e 94 d5 07 	call	0xfaa	; 0xfaa <read_sensor_temp>
     8d8:	00 d0       	rcall	.+0      	; 0x8da <read_command+0x454>
     8da:	00 d0       	rcall	.+0      	; 0x8dc <read_command+0x456>
     8dc:	00 d0       	rcall	.+0      	; 0x8de <read_command+0x458>
     8de:	ed b7       	in	r30, 0x3d	; 61
     8e0:	fe b7       	in	r31, 0x3e	; 62
     8e2:	31 96       	adiw	r30, 0x01	; 1
     8e4:	8e 01       	movw	r16, r28
     8e6:	0f 5a       	subi	r16, 0xAF	; 175
     8e8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ea:	ad b7       	in	r26, 0x3d	; 61
     8ec:	be b7       	in	r27, 0x3e	; 62
     8ee:	12 96       	adiw	r26, 0x02	; 2
     8f0:	1c 93       	st	X, r17
     8f2:	0e 93       	st	-X, r16
     8f4:	11 97       	sbiw	r26, 0x01	; 1
     8f6:	23 e7       	ldi	r18, 0x73	; 115
     8f8:	31 e0       	ldi	r19, 0x01	; 1
     8fa:	33 83       	std	Z+3, r19	; 0x03
     8fc:	22 83       	std	Z+2, r18	; 0x02
     8fe:	95 83       	std	Z+5, r25	; 0x05
     900:	84 83       	std	Z+4, r24	; 0x04
     902:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <sprintf>
			write_ser(response);
     906:	ed b7       	in	r30, 0x3d	; 61
     908:	fe b7       	in	r31, 0x3e	; 62
     90a:	36 96       	adiw	r30, 0x06	; 6
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	f8 94       	cli
     910:	fe bf       	out	0x3e, r31	; 62
     912:	0f be       	out	0x3f, r0	; 63
     914:	ed bf       	out	0x3d, r30	; 61
     916:	c8 01       	movw	r24, r16
     918:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
     91c:	24 c0       	rjmp	.+72     	; 0x966 <__stack+0x67>
		}
		else
		{
			sprintf(response, "ERROR 442: Unrealistic value %i. Sensor might be defect", read_sensor_temp());
     91e:	0e 94 d5 07 	call	0xfaa	; 0xfaa <read_sensor_temp>
     922:	00 d0       	rcall	.+0      	; 0x924 <__stack+0x25>
     924:	00 d0       	rcall	.+0      	; 0x926 <__stack+0x27>
     926:	00 d0       	rcall	.+0      	; 0x928 <__stack+0x29>
     928:	ed b7       	in	r30, 0x3d	; 61
     92a:	fe b7       	in	r31, 0x3e	; 62
     92c:	31 96       	adiw	r30, 0x01	; 1
     92e:	8e 01       	movw	r16, r28
     930:	0f 5a       	subi	r16, 0xAF	; 175
     932:	1f 4f       	sbci	r17, 0xFF	; 255
     934:	ad b7       	in	r26, 0x3d	; 61
     936:	be b7       	in	r27, 0x3e	; 62
     938:	12 96       	adiw	r26, 0x02	; 2
     93a:	1c 93       	st	X, r17
     93c:	0e 93       	st	-X, r16
     93e:	11 97       	sbiw	r26, 0x01	; 1
     940:	23 e3       	ldi	r18, 0x33	; 51
     942:	32 e0       	ldi	r19, 0x02	; 2
     944:	33 83       	std	Z+3, r19	; 0x03
     946:	22 83       	std	Z+2, r18	; 0x02
     948:	95 83       	std	Z+5, r25	; 0x05
     94a:	84 83       	std	Z+4, r24	; 0x04
     94c:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <sprintf>
			write_ser(response);
     950:	ed b7       	in	r30, 0x3d	; 61
     952:	fe b7       	in	r31, 0x3e	; 62
     954:	36 96       	adiw	r30, 0x06	; 6
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	f8 94       	cli
     95a:	fe bf       	out	0x3e, r31	; 62
     95c:	0f be       	out	0x3f, r0	; 63
     95e:	ed bf       	out	0x3d, r30	; 61
     960:	c8 01       	movw	r24, r16
     962:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
		}
	}

	if (strcmp(commando, "GET_SENSOR_LIGHT") == 0)
     966:	ce 01       	movw	r24, r28
     968:	01 96       	adiw	r24, 0x01	; 1
     96a:	6b e6       	ldi	r22, 0x6B	; 107
     96c:	72 e0       	ldi	r23, 0x02	; 2
     96e:	0e 94 cf 09 	call	0x139e	; 0x139e <strcmp>
     972:	28 2f       	mov	r18, r24
     974:	39 2f       	mov	r19, r25
     976:	21 15       	cp	r18, r1
     978:	31 05       	cpc	r19, r1
     97a:	09 f0       	breq	.+2      	; 0x97e <__stack+0x7f>
     97c:	53 c0       	rjmp	.+166    	; 0xa24 <__stack+0x125>
	{
		if (read_sensor_light()!=NULL && read_sensor_light() <= 255)
     97e:	0e 94 87 01 	call	0x30e	; 0x30e <read_sensor_light>
     982:	00 97       	sbiw	r24, 0x00	; 0
     984:	59 f1       	breq	.+86     	; 0x9dc <__stack+0xdd>
     986:	0e 94 87 01 	call	0x30e	; 0x30e <read_sensor_light>
     98a:	8f 3f       	cpi	r24, 0xFF	; 255
     98c:	91 05       	cpc	r25, r1
     98e:	09 f0       	breq	.+2      	; 0x992 <__stack+0x93>
     990:	2c f5       	brge	.+74     	; 0x9dc <__stack+0xdd>
		{
			sprintf(response, "OK %i", read_sensor_light());
     992:	0e 94 87 01 	call	0x30e	; 0x30e <read_sensor_light>
     996:	00 d0       	rcall	.+0      	; 0x998 <__stack+0x99>
     998:	00 d0       	rcall	.+0      	; 0x99a <__stack+0x9b>
     99a:	00 d0       	rcall	.+0      	; 0x99c <__stack+0x9d>
     99c:	ed b7       	in	r30, 0x3d	; 61
     99e:	fe b7       	in	r31, 0x3e	; 62
     9a0:	31 96       	adiw	r30, 0x01	; 1
     9a2:	8e 01       	movw	r16, r28
     9a4:	0f 5a       	subi	r16, 0xAF	; 175
     9a6:	1f 4f       	sbci	r17, 0xFF	; 255
     9a8:	ad b7       	in	r26, 0x3d	; 61
     9aa:	be b7       	in	r27, 0x3e	; 62
     9ac:	12 96       	adiw	r26, 0x02	; 2
     9ae:	1c 93       	st	X, r17
     9b0:	0e 93       	st	-X, r16
     9b2:	11 97       	sbiw	r26, 0x01	; 1
     9b4:	23 e7       	ldi	r18, 0x73	; 115
     9b6:	31 e0       	ldi	r19, 0x01	; 1
     9b8:	33 83       	std	Z+3, r19	; 0x03
     9ba:	22 83       	std	Z+2, r18	; 0x02
     9bc:	95 83       	std	Z+5, r25	; 0x05
     9be:	84 83       	std	Z+4, r24	; 0x04
     9c0:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <sprintf>
			write_ser(response);
     9c4:	ed b7       	in	r30, 0x3d	; 61
     9c6:	fe b7       	in	r31, 0x3e	; 62
     9c8:	36 96       	adiw	r30, 0x06	; 6
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	f8 94       	cli
     9ce:	fe bf       	out	0x3e, r31	; 62
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	ed bf       	out	0x3d, r30	; 61
     9d4:	c8 01       	movw	r24, r16
     9d6:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
     9da:	24 c0       	rjmp	.+72     	; 0xa24 <__stack+0x125>
		}
		else
		{
			sprintf(response, "ERROR 443: Unrealistic value %i. Sensor might be defect", read_sensor_light());
     9dc:	0e 94 87 01 	call	0x30e	; 0x30e <read_sensor_light>
     9e0:	00 d0       	rcall	.+0      	; 0x9e2 <__stack+0xe3>
     9e2:	00 d0       	rcall	.+0      	; 0x9e4 <__stack+0xe5>
     9e4:	00 d0       	rcall	.+0      	; 0x9e6 <__stack+0xe7>
     9e6:	ed b7       	in	r30, 0x3d	; 61
     9e8:	fe b7       	in	r31, 0x3e	; 62
     9ea:	31 96       	adiw	r30, 0x01	; 1
     9ec:	8e 01       	movw	r16, r28
     9ee:	0f 5a       	subi	r16, 0xAF	; 175
     9f0:	1f 4f       	sbci	r17, 0xFF	; 255
     9f2:	ad b7       	in	r26, 0x3d	; 61
     9f4:	be b7       	in	r27, 0x3e	; 62
     9f6:	12 96       	adiw	r26, 0x02	; 2
     9f8:	1c 93       	st	X, r17
     9fa:	0e 93       	st	-X, r16
     9fc:	11 97       	sbiw	r26, 0x01	; 1
     9fe:	2c e7       	ldi	r18, 0x7C	; 124
     a00:	32 e0       	ldi	r19, 0x02	; 2
     a02:	33 83       	std	Z+3, r19	; 0x03
     a04:	22 83       	std	Z+2, r18	; 0x02
     a06:	95 83       	std	Z+5, r25	; 0x05
     a08:	84 83       	std	Z+4, r24	; 0x04
     a0a:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <sprintf>
			write_ser(response);
     a0e:	ed b7       	in	r30, 0x3d	; 61
     a10:	fe b7       	in	r31, 0x3e	; 62
     a12:	36 96       	adiw	r30, 0x06	; 6
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	f8 94       	cli
     a18:	fe bf       	out	0x3e, r31	; 62
     a1a:	0f be       	out	0x3f, r0	; 63
     a1c:	ed bf       	out	0x3d, r30	; 61
     a1e:	c8 01       	movw	r24, r16
     a20:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
		}
	}

	//If tree to handle all SETTERS
	if (strcmp(commando, "SET_NAME") == 0)
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	64 eb       	ldi	r22, 0xB4	; 180
     a2a:	72 e0       	ldi	r23, 0x02	; 2
     a2c:	0e 94 cf 09 	call	0x139e	; 0x139e <strcmp>
     a30:	28 2f       	mov	r18, r24
     a32:	39 2f       	mov	r19, r25
     a34:	21 15       	cp	r18, r1
     a36:	31 05       	cpc	r19, r1
     a38:	09 f0       	breq	.+2      	; 0xa3c <__stack+0x13d>
     a3a:	5b c0       	rjmp	.+182    	; 0xaf2 <__stack+0x1f3>
	{
		if (strlen(arg) > 0 && strlen(arg) <= 20)
     a3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a3e:	88 23       	and	r24, r24
     a40:	a1 f1       	breq	.+104    	; 0xaaa <__stack+0x1ab>
     a42:	de 01       	movw	r26, r28
     a44:	5f 96       	adiw	r26, 0x1f	; 31
     a46:	fd 01       	movw	r30, r26
     a48:	01 90       	ld	r0, Z+
     a4a:	00 20       	and	r0, r0
     a4c:	e9 f7       	brne	.-6      	; 0xa48 <__stack+0x149>
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	ea 1b       	sub	r30, r26
     a52:	fb 0b       	sbc	r31, r27
     a54:	e5 31       	cpi	r30, 0x15	; 21
     a56:	f1 05       	cpc	r31, r1
     a58:	40 f5       	brcc	.+80     	; 0xaaa <__stack+0x1ab>
		{
			set_arduino_name(arg);
     a5a:	cd 01       	movw	r24, r26
     a5c:	0e 94 af 01 	call	0x35e	; 0x35e <set_arduino_name>
			sprintf(response, "OK %s", get_arduino_name());
     a60:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <get_arduino_name>
     a64:	00 d0       	rcall	.+0      	; 0xa66 <__stack+0x167>
     a66:	00 d0       	rcall	.+0      	; 0xa68 <__stack+0x169>
     a68:	00 d0       	rcall	.+0      	; 0xa6a <__stack+0x16b>
     a6a:	ed b7       	in	r30, 0x3d	; 61
     a6c:	fe b7       	in	r31, 0x3e	; 62
     a6e:	31 96       	adiw	r30, 0x01	; 1
     a70:	8e 01       	movw	r16, r28
     a72:	0f 5a       	subi	r16, 0xAF	; 175
     a74:	1f 4f       	sbci	r17, 0xFF	; 255
     a76:	ad b7       	in	r26, 0x3d	; 61
     a78:	be b7       	in	r27, 0x3e	; 62
     a7a:	12 96       	adiw	r26, 0x02	; 2
     a7c:	1c 93       	st	X, r17
     a7e:	0e 93       	st	-X, r16
     a80:	11 97       	sbiw	r26, 0x01	; 1
     a82:	28 e4       	ldi	r18, 0x48	; 72
     a84:	31 e0       	ldi	r19, 0x01	; 1
     a86:	33 83       	std	Z+3, r19	; 0x03
     a88:	22 83       	std	Z+2, r18	; 0x02
     a8a:	95 83       	std	Z+5, r25	; 0x05
     a8c:	84 83       	std	Z+4, r24	; 0x04
     a8e:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <sprintf>
			write_ser(response);
     a92:	ed b7       	in	r30, 0x3d	; 61
     a94:	fe b7       	in	r31, 0x3e	; 62
     a96:	36 96       	adiw	r30, 0x06	; 6
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	fe bf       	out	0x3e, r31	; 62
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	ed bf       	out	0x3d, r30	; 61
     aa2:	c8 01       	movw	r24, r16
     aa4:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
     aa8:	24 c0       	rjmp	.+72     	; 0xaf2 <__stack+0x1f3>
		}
		else
		{
			sprintf(response, "ERROR 605: Value %s not within limit 0-20", arg);
     aaa:	00 d0       	rcall	.+0      	; 0xaac <__stack+0x1ad>
     aac:	00 d0       	rcall	.+0      	; 0xaae <__stack+0x1af>
     aae:	00 d0       	rcall	.+0      	; 0xab0 <__stack+0x1b1>
     ab0:	ed b7       	in	r30, 0x3d	; 61
     ab2:	fe b7       	in	r31, 0x3e	; 62
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	8e 01       	movw	r16, r28
     ab8:	0f 5a       	subi	r16, 0xAF	; 175
     aba:	1f 4f       	sbci	r17, 0xFF	; 255
     abc:	ad b7       	in	r26, 0x3d	; 61
     abe:	be b7       	in	r27, 0x3e	; 62
     ac0:	12 96       	adiw	r26, 0x02	; 2
     ac2:	1c 93       	st	X, r17
     ac4:	0e 93       	st	-X, r16
     ac6:	11 97       	sbiw	r26, 0x01	; 1
     ac8:	8d eb       	ldi	r24, 0xBD	; 189
     aca:	92 e0       	ldi	r25, 0x02	; 2
     acc:	93 83       	std	Z+3, r25	; 0x03
     ace:	82 83       	std	Z+2, r24	; 0x02
     ad0:	ce 01       	movw	r24, r28
     ad2:	4f 96       	adiw	r24, 0x1f	; 31
     ad4:	95 83       	std	Z+5, r25	; 0x05
     ad6:	84 83       	std	Z+4, r24	; 0x04
     ad8:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <sprintf>
			write_ser(response);
     adc:	ed b7       	in	r30, 0x3d	; 61
     ade:	fe b7       	in	r31, 0x3e	; 62
     ae0:	36 96       	adiw	r30, 0x06	; 6
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	f8 94       	cli
     ae6:	fe bf       	out	0x3e, r31	; 62
     ae8:	0f be       	out	0x3f, r0	; 63
     aea:	ed bf       	out	0x3d, r30	; 61
     aec:	c8 01       	movw	r24, r16
     aee:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
		}
	}

	if (strcmp(commando, "SET_THS_TEMP") == 0)
     af2:	ce 01       	movw	r24, r28
     af4:	01 96       	adiw	r24, 0x01	; 1
     af6:	67 ee       	ldi	r22, 0xE7	; 231
     af8:	72 e0       	ldi	r23, 0x02	; 2
     afa:	0e 94 cf 09 	call	0x139e	; 0x139e <strcmp>
     afe:	28 2f       	mov	r18, r24
     b00:	39 2f       	mov	r19, r25
     b02:	21 15       	cp	r18, r1
     b04:	31 05       	cpc	r19, r1
     b06:	09 f0       	breq	.+2      	; 0xb0a <__stack+0x20b>
     b08:	5a c0       	rjmp	.+180    	; 0xbbe <__stack+0x2bf>
	{
		if(numbers_only(arg)==1 && atoi(arg) <= 50)
     b0a:	ce 01       	movw	r24, r28
     b0c:	4f 96       	adiw	r24, 0x1f	; 31
     b0e:	0e 94 32 02 	call	0x464	; 0x464 <numbers_only>
     b12:	81 30       	cpi	r24, 0x01	; 1
     b14:	91 05       	cpc	r25, r1
     b16:	79 f5       	brne	.+94     	; 0xb76 <__stack+0x277>
     b18:	ce 01       	movw	r24, r28
     b1a:	4f 96       	adiw	r24, 0x1f	; 31
     b1c:	0e 94 b1 09 	call	0x1362	; 0x1362 <atoi>
     b20:	83 33       	cpi	r24, 0x33	; 51
     b22:	91 05       	cpc	r25, r1
     b24:	44 f5       	brge	.+80     	; 0xb76 <__stack+0x277>
		{
			uint8_t val = atoi(arg);
			set_ths_temp(val);
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	0e 94 9d 01 	call	0x33a	; 0x33a <set_ths_temp>
			sprintf(response, "OK %i", get_ths_temp());
     b2c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <get_ths_temp>
     b30:	00 d0       	rcall	.+0      	; 0xb32 <__stack+0x233>
     b32:	00 d0       	rcall	.+0      	; 0xb34 <__stack+0x235>
     b34:	00 d0       	rcall	.+0      	; 0xb36 <__stack+0x237>
     b36:	ed b7       	in	r30, 0x3d	; 61
     b38:	fe b7       	in	r31, 0x3e	; 62
     b3a:	31 96       	adiw	r30, 0x01	; 1
     b3c:	8e 01       	movw	r16, r28
     b3e:	0f 5a       	subi	r16, 0xAF	; 175
     b40:	1f 4f       	sbci	r17, 0xFF	; 255
     b42:	ad b7       	in	r26, 0x3d	; 61
     b44:	be b7       	in	r27, 0x3e	; 62
     b46:	12 96       	adiw	r26, 0x02	; 2
     b48:	1c 93       	st	X, r17
     b4a:	0e 93       	st	-X, r16
     b4c:	11 97       	sbiw	r26, 0x01	; 1
     b4e:	23 e7       	ldi	r18, 0x73	; 115
     b50:	31 e0       	ldi	r19, 0x01	; 1
     b52:	33 83       	std	Z+3, r19	; 0x03
     b54:	22 83       	std	Z+2, r18	; 0x02
     b56:	95 83       	std	Z+5, r25	; 0x05
     b58:	84 83       	std	Z+4, r24	; 0x04
     b5a:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <sprintf>
			write_ser(response);
     b5e:	ed b7       	in	r30, 0x3d	; 61
     b60:	fe b7       	in	r31, 0x3e	; 62
     b62:	36 96       	adiw	r30, 0x06	; 6
     b64:	0f b6       	in	r0, 0x3f	; 63
     b66:	f8 94       	cli
     b68:	fe bf       	out	0x3e, r31	; 62
     b6a:	0f be       	out	0x3f, r0	; 63
     b6c:	ed bf       	out	0x3d, r30	; 61
     b6e:	c8 01       	movw	r24, r16
     b70:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
	}

	if (strcmp(commando, "SET_THS_TEMP") == 0)
	{
		if(numbers_only(arg)==1 && atoi(arg) <= 50)
		{
     b74:	24 c0       	rjmp	.+72     	; 0xbbe <__stack+0x2bf>
			sprintf(response, "OK %i", get_ths_temp());
			write_ser(response);
		}
		else
		{
			sprintf(response, "ERROR 106: Invalid value %s", arg);
     b76:	00 d0       	rcall	.+0      	; 0xb78 <__stack+0x279>
     b78:	00 d0       	rcall	.+0      	; 0xb7a <__stack+0x27b>
     b7a:	00 d0       	rcall	.+0      	; 0xb7c <__stack+0x27d>
     b7c:	ed b7       	in	r30, 0x3d	; 61
     b7e:	fe b7       	in	r31, 0x3e	; 62
     b80:	31 96       	adiw	r30, 0x01	; 1
     b82:	8e 01       	movw	r16, r28
     b84:	0f 5a       	subi	r16, 0xAF	; 175
     b86:	1f 4f       	sbci	r17, 0xFF	; 255
     b88:	ad b7       	in	r26, 0x3d	; 61
     b8a:	be b7       	in	r27, 0x3e	; 62
     b8c:	12 96       	adiw	r26, 0x02	; 2
     b8e:	1c 93       	st	X, r17
     b90:	0e 93       	st	-X, r16
     b92:	11 97       	sbiw	r26, 0x01	; 1
     b94:	84 ef       	ldi	r24, 0xF4	; 244
     b96:	92 e0       	ldi	r25, 0x02	; 2
     b98:	93 83       	std	Z+3, r25	; 0x03
     b9a:	82 83       	std	Z+2, r24	; 0x02
     b9c:	ce 01       	movw	r24, r28
     b9e:	4f 96       	adiw	r24, 0x1f	; 31
     ba0:	95 83       	std	Z+5, r25	; 0x05
     ba2:	84 83       	std	Z+4, r24	; 0x04
     ba4:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <sprintf>
			write_ser(response);
     ba8:	ed b7       	in	r30, 0x3d	; 61
     baa:	fe b7       	in	r31, 0x3e	; 62
     bac:	36 96       	adiw	r30, 0x06	; 6
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	fe bf       	out	0x3e, r31	; 62
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	ed bf       	out	0x3d, r30	; 61
     bb8:	c8 01       	movw	r24, r16
     bba:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
		}
	}

	if (strcmp(commando, "SET_THS_DIST") == 0)
     bbe:	ce 01       	movw	r24, r28
     bc0:	01 96       	adiw	r24, 0x01	; 1
     bc2:	60 e1       	ldi	r22, 0x10	; 16
     bc4:	73 e0       	ldi	r23, 0x03	; 3
     bc6:	0e 94 cf 09 	call	0x139e	; 0x139e <strcmp>
     bca:	28 2f       	mov	r18, r24
     bcc:	39 2f       	mov	r19, r25
     bce:	21 15       	cp	r18, r1
     bd0:	31 05       	cpc	r19, r1
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <__stack+0x2d7>
     bd4:	5c c0       	rjmp	.+184    	; 0xc8e <__stack+0x38f>
	{
		if(numbers_only(arg)==1 && atoi(arg) >= 3 && atoi(arg) <= 30)
     bd6:	ce 01       	movw	r24, r28
     bd8:	4f 96       	adiw	r24, 0x1f	; 31
     bda:	0e 94 32 02 	call	0x464	; 0x464 <numbers_only>
     bde:	81 30       	cpi	r24, 0x01	; 1
     be0:	91 05       	cpc	r25, r1
     be2:	89 f5       	brne	.+98     	; 0xc46 <__stack+0x347>
     be4:	ce 01       	movw	r24, r28
     be6:	4f 96       	adiw	r24, 0x1f	; 31
     be8:	0e 94 b1 09 	call	0x1362	; 0x1362 <atoi>
     bec:	83 30       	cpi	r24, 0x03	; 3
     bee:	91 05       	cpc	r25, r1
     bf0:	54 f1       	brlt	.+84     	; 0xc46 <__stack+0x347>
     bf2:	8f 31       	cpi	r24, 0x1F	; 31
     bf4:	91 05       	cpc	r25, r1
     bf6:	3c f5       	brge	.+78     	; 0xc46 <__stack+0x347>
		{
			uint8_t val = atoi(arg);
			set_ths_dist(val);
     bf8:	0e 94 a9 01 	call	0x352	; 0x352 <set_ths_dist>
			sprintf(response, "OK %i", get_ths_dist());
     bfc:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <get_ths_dist>
     c00:	00 d0       	rcall	.+0      	; 0xc02 <__stack+0x303>
     c02:	00 d0       	rcall	.+0      	; 0xc04 <__stack+0x305>
     c04:	00 d0       	rcall	.+0      	; 0xc06 <__stack+0x307>
     c06:	ed b7       	in	r30, 0x3d	; 61
     c08:	fe b7       	in	r31, 0x3e	; 62
     c0a:	31 96       	adiw	r30, 0x01	; 1
     c0c:	8e 01       	movw	r16, r28
     c0e:	0f 5a       	subi	r16, 0xAF	; 175
     c10:	1f 4f       	sbci	r17, 0xFF	; 255
     c12:	ad b7       	in	r26, 0x3d	; 61
     c14:	be b7       	in	r27, 0x3e	; 62
     c16:	12 96       	adiw	r26, 0x02	; 2
     c18:	1c 93       	st	X, r17
     c1a:	0e 93       	st	-X, r16
     c1c:	11 97       	sbiw	r26, 0x01	; 1
     c1e:	23 e7       	ldi	r18, 0x73	; 115
     c20:	31 e0       	ldi	r19, 0x01	; 1
     c22:	33 83       	std	Z+3, r19	; 0x03
     c24:	22 83       	std	Z+2, r18	; 0x02
     c26:	84 83       	std	Z+4, r24	; 0x04
     c28:	15 82       	std	Z+5, r1	; 0x05
     c2a:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <sprintf>
			write_ser(response);
     c2e:	ed b7       	in	r30, 0x3d	; 61
     c30:	fe b7       	in	r31, 0x3e	; 62
     c32:	36 96       	adiw	r30, 0x06	; 6
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	fe bf       	out	0x3e, r31	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	ed bf       	out	0x3d, r30	; 61
     c3e:	c8 01       	movw	r24, r16
     c40:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
	}

	if (strcmp(commando, "SET_THS_DIST") == 0)
	{
		if(numbers_only(arg)==1 && atoi(arg) >= 3 && atoi(arg) <= 30)
		{
     c44:	24 c0       	rjmp	.+72     	; 0xc8e <__stack+0x38f>
			sprintf(response, "OK %i", get_ths_dist());
			write_ser(response);
		}
		else
		{
			sprintf(response, "ERROR 107: Invalid value %s", arg);
     c46:	00 d0       	rcall	.+0      	; 0xc48 <__stack+0x349>
     c48:	00 d0       	rcall	.+0      	; 0xc4a <__stack+0x34b>
     c4a:	00 d0       	rcall	.+0      	; 0xc4c <__stack+0x34d>
     c4c:	ed b7       	in	r30, 0x3d	; 61
     c4e:	fe b7       	in	r31, 0x3e	; 62
     c50:	31 96       	adiw	r30, 0x01	; 1
     c52:	8e 01       	movw	r16, r28
     c54:	0f 5a       	subi	r16, 0xAF	; 175
     c56:	1f 4f       	sbci	r17, 0xFF	; 255
     c58:	ad b7       	in	r26, 0x3d	; 61
     c5a:	be b7       	in	r27, 0x3e	; 62
     c5c:	12 96       	adiw	r26, 0x02	; 2
     c5e:	1c 93       	st	X, r17
     c60:	0e 93       	st	-X, r16
     c62:	11 97       	sbiw	r26, 0x01	; 1
     c64:	8d e1       	ldi	r24, 0x1D	; 29
     c66:	93 e0       	ldi	r25, 0x03	; 3
     c68:	93 83       	std	Z+3, r25	; 0x03
     c6a:	82 83       	std	Z+2, r24	; 0x02
     c6c:	ce 01       	movw	r24, r28
     c6e:	4f 96       	adiw	r24, 0x1f	; 31
     c70:	95 83       	std	Z+5, r25	; 0x05
     c72:	84 83       	std	Z+4, r24	; 0x04
     c74:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <sprintf>
			write_ser(response);
     c78:	ed b7       	in	r30, 0x3d	; 61
     c7a:	fe b7       	in	r31, 0x3e	; 62
     c7c:	36 96       	adiw	r30, 0x06	; 6
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	f8 94       	cli
     c82:	fe bf       	out	0x3e, r31	; 62
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	ed bf       	out	0x3d, r30	; 61
     c88:	c8 01       	movw	r24, r16
     c8a:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
		}
	}

	if (strcmp(commando, "SET_STATE") == 0)
     c8e:	ce 01       	movw	r24, r28
     c90:	01 96       	adiw	r24, 0x01	; 1
     c92:	69 e3       	ldi	r22, 0x39	; 57
     c94:	73 e0       	ldi	r23, 0x03	; 3
     c96:	0e 94 cf 09 	call	0x139e	; 0x139e <strcmp>
     c9a:	28 2f       	mov	r18, r24
     c9c:	39 2f       	mov	r19, r25
     c9e:	21 15       	cp	r18, r1
     ca0:	31 05       	cpc	r19, r1
     ca2:	09 f0       	breq	.+2      	; 0xca6 <__stack+0x3a7>
     ca4:	6e c0       	rjmp	.+220    	; 0xd82 <__stack+0x483>
	{
		if (strcmp(arg, "OPEN") == 0)
     ca6:	ce 01       	movw	r24, r28
     ca8:	4f 96       	adiw	r24, 0x1f	; 31
     caa:	63 e4       	ldi	r22, 0x43	; 67
     cac:	73 e0       	ldi	r23, 0x03	; 3
     cae:	0e 94 cf 09 	call	0x139e	; 0x139e <strcmp>
     cb2:	28 2f       	mov	r18, r24
     cb4:	39 2f       	mov	r19, r25
     cb6:	21 15       	cp	r18, r1
     cb8:	31 05       	cpc	r19, r1
     cba:	61 f5       	brne	.+88     	; 0xd14 <__stack+0x415>
		{
			if (get_shutter_state()!=OPEN && open_screen() == 1)
     cbc:	0e 94 8c 01 	call	0x318	; 0x318 <get_shutter_state>
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	a9 f0       	breq	.+42     	; 0xcee <__stack+0x3ef>
     cc4:	0e 94 18 02 	call	0x430	; 0x430 <open_screen>
     cc8:	81 30       	cpi	r24, 0x01	; 1
     cca:	91 05       	cpc	r25, r1
     ccc:	81 f4       	brne	.+32     	; 0xcee <__stack+0x3ef>
			{
				sprintf(response, "OK OPENING");
     cce:	de 01       	movw	r26, r28
     cd0:	af 5a       	subi	r26, 0xAF	; 175
     cd2:	bf 4f       	sbci	r27, 0xFF	; 255
     cd4:	e8 e4       	ldi	r30, 0x48	; 72
     cd6:	f3 e0       	ldi	r31, 0x03	; 3
     cd8:	8b e0       	ldi	r24, 0x0B	; 11
     cda:	01 90       	ld	r0, Z+
     cdc:	0d 92       	st	X+, r0
     cde:	81 50       	subi	r24, 0x01	; 1
     ce0:	e1 f7       	brne	.-8      	; 0xcda <__stack+0x3db>
				write_ser(response);
     ce2:	ce 01       	movw	r24, r28
     ce4:	8f 5a       	subi	r24, 0xAF	; 175
     ce6:	9f 4f       	sbci	r25, 0xFF	; 255
     ce8:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
     cec:	13 c0       	rjmp	.+38     	; 0xd14 <__stack+0x415>
			}
			else if (open_screen() == 0)
     cee:	0e 94 18 02 	call	0x430	; 0x430 <open_screen>
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	79 f4       	brne	.+30     	; 0xd14 <__stack+0x415>
			{
				sprintf(response, "ERROR 105: Could not open screen");
     cf6:	de 01       	movw	r26, r28
     cf8:	af 5a       	subi	r26, 0xAF	; 175
     cfa:	bf 4f       	sbci	r27, 0xFF	; 255
     cfc:	e3 e5       	ldi	r30, 0x53	; 83
     cfe:	f3 e0       	ldi	r31, 0x03	; 3
     d00:	81 e2       	ldi	r24, 0x21	; 33
     d02:	01 90       	ld	r0, Z+
     d04:	0d 92       	st	X+, r0
     d06:	81 50       	subi	r24, 0x01	; 1
     d08:	e1 f7       	brne	.-8      	; 0xd02 <__stack+0x403>
				write_ser(response);
     d0a:	ce 01       	movw	r24, r28
     d0c:	8f 5a       	subi	r24, 0xAF	; 175
     d0e:	9f 4f       	sbci	r25, 0xFF	; 255
     d10:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
			}
		}

		if (strcmp(arg, "CLOSED") == 0)
     d14:	ce 01       	movw	r24, r28
     d16:	4f 96       	adiw	r24, 0x1f	; 31
     d18:	64 e7       	ldi	r22, 0x74	; 116
     d1a:	73 e0       	ldi	r23, 0x03	; 3
     d1c:	0e 94 cf 09 	call	0x139e	; 0x139e <strcmp>
     d20:	28 2f       	mov	r18, r24
     d22:	39 2f       	mov	r19, r25
     d24:	21 15       	cp	r18, r1
     d26:	31 05       	cpc	r19, r1
     d28:	61 f5       	brne	.+88     	; 0xd82 <__stack+0x483>
		{
			if (get_shutter_state()!=CLOSED && close_screen() == 1)
     d2a:	0e 94 8c 01 	call	0x318	; 0x318 <get_shutter_state>
     d2e:	88 23       	and	r24, r24
     d30:	a9 f0       	breq	.+42     	; 0xd5c <__stack+0x45d>
     d32:	0e 94 25 02 	call	0x44a	; 0x44a <close_screen>
     d36:	81 30       	cpi	r24, 0x01	; 1
     d38:	91 05       	cpc	r25, r1
     d3a:	81 f4       	brne	.+32     	; 0xd5c <__stack+0x45d>
			{
				sprintf(response, "OK CLOSING");
     d3c:	de 01       	movw	r26, r28
     d3e:	af 5a       	subi	r26, 0xAF	; 175
     d40:	bf 4f       	sbci	r27, 0xFF	; 255
     d42:	eb e7       	ldi	r30, 0x7B	; 123
     d44:	f3 e0       	ldi	r31, 0x03	; 3
     d46:	8b e0       	ldi	r24, 0x0B	; 11
     d48:	01 90       	ld	r0, Z+
     d4a:	0d 92       	st	X+, r0
     d4c:	81 50       	subi	r24, 0x01	; 1
     d4e:	e1 f7       	brne	.-8      	; 0xd48 <__stack+0x449>
				write_ser(response);
     d50:	ce 01       	movw	r24, r28
     d52:	8f 5a       	subi	r24, 0xAF	; 175
     d54:	9f 4f       	sbci	r25, 0xFF	; 255
     d56:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
     d5a:	13 c0       	rjmp	.+38     	; 0xd82 <__stack+0x483>
			}
			else if (close_screen() == 0)
     d5c:	0e 94 25 02 	call	0x44a	; 0x44a <close_screen>
     d60:	00 97       	sbiw	r24, 0x00	; 0
     d62:	79 f4       	brne	.+30     	; 0xd82 <__stack+0x483>
			{
				sprintf(response, "ERROR 105: Could not close screen");
     d64:	de 01       	movw	r26, r28
     d66:	af 5a       	subi	r26, 0xAF	; 175
     d68:	bf 4f       	sbci	r27, 0xFF	; 255
     d6a:	e6 e8       	ldi	r30, 0x86	; 134
     d6c:	f3 e0       	ldi	r31, 0x03	; 3
     d6e:	82 e2       	ldi	r24, 0x22	; 34
     d70:	01 90       	ld	r0, Z+
     d72:	0d 92       	st	X+, r0
     d74:	81 50       	subi	r24, 0x01	; 1
     d76:	e1 f7       	brne	.-8      	; 0xd70 <__stack+0x471>
				write_ser(response);
     d78:	ce 01       	movw	r24, r28
     d7a:	8f 5a       	subi	r24, 0xAF	; 175
     d7c:	9f 4f       	sbci	r25, 0xFF	; 255
     d7e:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
			}
		}
	}

	if (strcmp(commando, "SET_MODE") == 0)
     d82:	ce 01       	movw	r24, r28
     d84:	01 96       	adiw	r24, 0x01	; 1
     d86:	68 ea       	ldi	r22, 0xA8	; 168
     d88:	73 e0       	ldi	r23, 0x03	; 3
     d8a:	0e 94 cf 09 	call	0x139e	; 0x139e <strcmp>
     d8e:	28 2f       	mov	r18, r24
     d90:	39 2f       	mov	r19, r25
     d92:	21 15       	cp	r18, r1
     d94:	31 05       	cpc	r19, r1
     d96:	09 f0       	breq	.+2      	; 0xd9a <__stack+0x49b>
     d98:	8c c0       	rjmp	.+280    	; 0xeb2 <__stack+0x5b3>
	{
		if (strcmp(arg, "MANUAL") == 0)
     d9a:	ce 01       	movw	r24, r28
     d9c:	4f 96       	adiw	r24, 0x1f	; 31
     d9e:	61 eb       	ldi	r22, 0xB1	; 177
     da0:	73 e0       	ldi	r23, 0x03	; 3
     da2:	0e 94 cf 09 	call	0x139e	; 0x139e <strcmp>
     da6:	28 2f       	mov	r18, r24
     da8:	39 2f       	mov	r19, r25
     daa:	21 15       	cp	r18, r1
     dac:	31 05       	cpc	r19, r1
     dae:	d9 f5       	brne	.+118    	; 0xe26 <__stack+0x527>
		{
			if (get_shutter_mode()!=MANUAL)
     db0:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <get_shutter_mode>
     db4:	88 23       	and	r24, r24
     db6:	99 f0       	breq	.+38     	; 0xdde <__stack+0x4df>
			{
				set_shutter_mode(MANUAL);
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	0e 94 91 01 	call	0x322	; 0x322 <set_shutter_mode>
				sprintf(response, "OK MODE MANUAL");
     dbe:	de 01       	movw	r26, r28
     dc0:	af 5a       	subi	r26, 0xAF	; 175
     dc2:	bf 4f       	sbci	r27, 0xFF	; 255
     dc4:	e8 eb       	ldi	r30, 0xB8	; 184
     dc6:	f3 e0       	ldi	r31, 0x03	; 3
     dc8:	8f e0       	ldi	r24, 0x0F	; 15
     dca:	01 90       	ld	r0, Z+
     dcc:	0d 92       	st	X+, r0
     dce:	81 50       	subi	r24, 0x01	; 1
     dd0:	e1 f7       	brne	.-8      	; 0xdca <__stack+0x4cb>
				write_ser(response);
     dd2:	ce 01       	movw	r24, r28
     dd4:	8f 5a       	subi	r24, 0xAF	; 175
     dd6:	9f 4f       	sbci	r25, 0xFF	; 255
     dd8:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
     ddc:	24 c0       	rjmp	.+72     	; 0xe26 <__stack+0x527>
			}
			else
			{
				sprintf(response, "ERROR 441: Could not set modus %s", arg);
     dde:	00 d0       	rcall	.+0      	; 0xde0 <__stack+0x4e1>
     de0:	00 d0       	rcall	.+0      	; 0xde2 <__stack+0x4e3>
     de2:	00 d0       	rcall	.+0      	; 0xde4 <__stack+0x4e5>
     de4:	ed b7       	in	r30, 0x3d	; 61
     de6:	fe b7       	in	r31, 0x3e	; 62
     de8:	31 96       	adiw	r30, 0x01	; 1
     dea:	8e 01       	movw	r16, r28
     dec:	0f 5a       	subi	r16, 0xAF	; 175
     dee:	1f 4f       	sbci	r17, 0xFF	; 255
     df0:	ad b7       	in	r26, 0x3d	; 61
     df2:	be b7       	in	r27, 0x3e	; 62
     df4:	12 96       	adiw	r26, 0x02	; 2
     df6:	1c 93       	st	X, r17
     df8:	0e 93       	st	-X, r16
     dfa:	11 97       	sbiw	r26, 0x01	; 1
     dfc:	87 ec       	ldi	r24, 0xC7	; 199
     dfe:	93 e0       	ldi	r25, 0x03	; 3
     e00:	93 83       	std	Z+3, r25	; 0x03
     e02:	82 83       	std	Z+2, r24	; 0x02
     e04:	ce 01       	movw	r24, r28
     e06:	4f 96       	adiw	r24, 0x1f	; 31
     e08:	95 83       	std	Z+5, r25	; 0x05
     e0a:	84 83       	std	Z+4, r24	; 0x04
     e0c:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <sprintf>
				write_ser(response);
     e10:	ed b7       	in	r30, 0x3d	; 61
     e12:	fe b7       	in	r31, 0x3e	; 62
     e14:	36 96       	adiw	r30, 0x06	; 6
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	fe bf       	out	0x3e, r31	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	ed bf       	out	0x3d, r30	; 61
     e20:	c8 01       	movw	r24, r16
     e22:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
			}
		}

		if (strcmp(arg, "AUTO") == 0)
     e26:	ce 01       	movw	r24, r28
     e28:	4f 96       	adiw	r24, 0x1f	; 31
     e2a:	69 ee       	ldi	r22, 0xE9	; 233
     e2c:	73 e0       	ldi	r23, 0x03	; 3
     e2e:	0e 94 cf 09 	call	0x139e	; 0x139e <strcmp>
     e32:	28 2f       	mov	r18, r24
     e34:	39 2f       	mov	r19, r25
     e36:	21 15       	cp	r18, r1
     e38:	31 05       	cpc	r19, r1
     e3a:	d9 f5       	brne	.+118    	; 0xeb2 <__stack+0x5b3>
		{
			if (get_shutter_mode()!=AUTO)
     e3c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <get_shutter_mode>
     e40:	81 30       	cpi	r24, 0x01	; 1
     e42:	99 f0       	breq	.+38     	; 0xe6a <__stack+0x56b>
			{
				set_shutter_mode(AUTO);
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	0e 94 91 01 	call	0x322	; 0x322 <set_shutter_mode>
				sprintf(response, "OK MODE AUTO");
     e4a:	de 01       	movw	r26, r28
     e4c:	af 5a       	subi	r26, 0xAF	; 175
     e4e:	bf 4f       	sbci	r27, 0xFF	; 255
     e50:	ee ee       	ldi	r30, 0xEE	; 238
     e52:	f3 e0       	ldi	r31, 0x03	; 3
     e54:	8d e0       	ldi	r24, 0x0D	; 13
     e56:	01 90       	ld	r0, Z+
     e58:	0d 92       	st	X+, r0
     e5a:	81 50       	subi	r24, 0x01	; 1
     e5c:	e1 f7       	brne	.-8      	; 0xe56 <__stack+0x557>
				write_ser(response);
     e5e:	ce 01       	movw	r24, r28
     e60:	8f 5a       	subi	r24, 0xAF	; 175
     e62:	9f 4f       	sbci	r25, 0xFF	; 255
     e64:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
     e68:	24 c0       	rjmp	.+72     	; 0xeb2 <__stack+0x5b3>
			}
			else
			{
				sprintf(response, "ERROR 441: Could not set modus %s", arg);
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <__stack+0x56d>
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <__stack+0x56f>
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <__stack+0x571>
     e70:	ed b7       	in	r30, 0x3d	; 61
     e72:	fe b7       	in	r31, 0x3e	; 62
     e74:	31 96       	adiw	r30, 0x01	; 1
     e76:	8e 01       	movw	r16, r28
     e78:	0f 5a       	subi	r16, 0xAF	; 175
     e7a:	1f 4f       	sbci	r17, 0xFF	; 255
     e7c:	ad b7       	in	r26, 0x3d	; 61
     e7e:	be b7       	in	r27, 0x3e	; 62
     e80:	12 96       	adiw	r26, 0x02	; 2
     e82:	1c 93       	st	X, r17
     e84:	0e 93       	st	-X, r16
     e86:	11 97       	sbiw	r26, 0x01	; 1
     e88:	87 ec       	ldi	r24, 0xC7	; 199
     e8a:	93 e0       	ldi	r25, 0x03	; 3
     e8c:	93 83       	std	Z+3, r25	; 0x03
     e8e:	82 83       	std	Z+2, r24	; 0x02
     e90:	ce 01       	movw	r24, r28
     e92:	4f 96       	adiw	r24, 0x1f	; 31
     e94:	95 83       	std	Z+5, r25	; 0x05
     e96:	84 83       	std	Z+4, r24	; 0x04
     e98:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <sprintf>
				write_ser(response);
     e9c:	ed b7       	in	r30, 0x3d	; 61
     e9e:	fe b7       	in	r31, 0x3e	; 62
     ea0:	36 96       	adiw	r30, 0x06	; 6
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	fe bf       	out	0x3e, r31	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	ed bf       	out	0x3d, r30	; 61
     eac:	c8 01       	movw	r24, r16
     eae:	0e 94 81 07 	call	0xf02	; 0xf02 <write_ser>
			}
		}
	}
     eb2:	cc 54       	subi	r28, 0x4C	; 76
     eb4:	df 4f       	sbci	r29, 0xFF	; 255
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	1f 91       	pop	r17
     ec6:	0f 91       	pop	r16
     ec8:	ff 90       	pop	r15
     eca:	ef 90       	pop	r14
     ecc:	df 90       	pop	r13
     ece:	cf 90       	pop	r12
     ed0:	bf 90       	pop	r11
     ed2:	af 90       	pop	r10
     ed4:	08 95       	ret

00000ed6 <init_serial>:

#include "serial.h"

void init_serial() {
	//Setting baudrate
	UBRR0H = 0;
     ed6:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 103;
     eda:	87 e6       	ldi	r24, 0x67	; 103
     edc:	80 93 c4 00 	sts	0x00C4, r24
	
	UCSR0A = 0;
     ee0:	10 92 c0 00 	sts	0x00C0, r1
	
	//Set bits for RX and TX
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
     ee4:	88 e1       	ldi	r24, 0x18	; 24
     ee6:	80 93 c1 00 	sts	0x00C1, r24
	
	//Set frame: 8 databits and use 1 stopbit
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
     eea:	86 e0       	ldi	r24, 0x06	; 6
     eec:	80 93 c2 00 	sts	0x00C2, r24
}
     ef0:	08 95       	ret

00000ef2 <transmit_data>:

void transmit_data(uint8_t data) {
	//Wait for transmit buffer to be empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
     ef2:	e0 ec       	ldi	r30, 0xC0	; 192
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	90 81       	ld	r25, Z
     ef8:	95 ff       	sbrs	r25, 5
     efa:	fd cf       	rjmp	.-6      	; 0xef6 <transmit_data+0x4>
	
	//Load new data into transmit buffer
	UDR0 = data;
     efc:	80 93 c6 00 	sts	0x00C6, r24
}
     f00:	08 95       	ret

00000f02 <write_ser>:

void write_ser(char *data) {
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	ec 01       	movw	r28, r24
	int i=0;
	
	//Loop until endline character is reached
	while (data[i]!='\0') {
     f08:	88 81       	ld	r24, Y
     f0a:	88 23       	and	r24, r24
     f0c:	31 f0       	breq	.+12     	; 0xf1a <write_ser+0x18>
	
	//Load new data into transmit buffer
	UDR0 = data;
}

void write_ser(char *data) {
     f0e:	21 96       	adiw	r28, 0x01	; 1
	int i=0;
	
	//Loop until endline character is reached
	while (data[i]!='\0') {
		//Transmit character and go to next (i++)
		transmit_data(data[i++]);
     f10:	0e 94 79 07 	call	0xef2	; 0xef2 <transmit_data>

void write_ser(char *data) {
	int i=0;
	
	//Loop until endline character is reached
	while (data[i]!='\0') {
     f14:	89 91       	ld	r24, Y+
     f16:	88 23       	and	r24, r24
     f18:	d9 f7       	brne	.-10     	; 0xf10 <write_ser+0xe>
		//Transmit character and go to next (i++)
		transmit_data(data[i++]);
	}
	//transmit endmark character
	transmit_data('\0');
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	0e 94 79 07 	call	0xef2	; 0xef2 <transmit_data>
}
     f20:	df 91       	pop	r29
     f22:	cf 91       	pop	r28
     f24:	08 95       	ret

00000f26 <receive_data>:

uint8_t receive_data() {
	//Wacht tot er data is
	loop_until_bit_is_set(UCSR0A, RXC0);
     f26:	e0 ec       	ldi	r30, 0xC0	; 192
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	88 23       	and	r24, r24
     f2e:	ec f7       	brge	.-6      	; 0xf2a <receive_data+0x4>
	return UDR0;
     f30:	80 91 c6 00 	lds	r24, 0x00C6
}
     f34:	08 95       	ret

00000f36 <read_ser>:

//Copy from serial.c written by Simon van der Meer
void read_ser(char* buf, int maxlength) {
     f36:	cf 92       	push	r12
     f38:	df 92       	push	r13
     f3a:	ef 92       	push	r14
     f3c:	ff 92       	push	r15
     f3e:	0f 93       	push	r16
     f40:	1f 93       	push	r17
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	6c 01       	movw	r12, r24
	int i=0;
     f48:	7c 01       	movw	r14, r24
     f4a:	00 e0       	ldi	r16, 0x00	; 0
     f4c:	10 e0       	ldi	r17, 0x00	; 0
		
		//Bij een \r (ENTER) karakter uit de while loop gaan en \0 invoeren (einde string)
		if (c=='\r') {
			break; 
		}
		if (i<maxlength-1) {
     f4e:	eb 01       	movw	r28, r22
     f50:	21 97       	sbiw	r28, 0x01	; 1

//Copy from serial.c written by Simon van der Meer
void read_ser(char* buf, int maxlength) {
	int i=0;
	while(1) {
		uint8_t c = receive_data();
     f52:	0e 94 93 07 	call	0xf26	; 0xf26 <receive_data>
		
		//Bij een \r (ENTER) karakter uit de while loop gaan en \0 invoeren (einde string)
		if (c=='\r') {
     f56:	8d 30       	cpi	r24, 0x0D	; 13
     f58:	49 f0       	breq	.+18     	; 0xf6c <read_ser+0x36>
			break; 
		}
		if (i<maxlength-1) {
     f5a:	0c 17       	cp	r16, r28
     f5c:	1d 07       	cpc	r17, r29
     f5e:	cc f7       	brge	.-14     	; 0xf52 <read_ser+0x1c>
			buf[i++]=c;
     f60:	f7 01       	movw	r30, r14
     f62:	81 93       	st	Z+, r24
     f64:	7f 01       	movw	r14, r30
     f66:	0f 5f       	subi	r16, 0xFF	; 255
     f68:	1f 4f       	sbci	r17, 0xFF	; 255
     f6a:	f3 cf       	rjmp	.-26     	; 0xf52 <read_ser+0x1c>
		}
	}
	buf[i]='\0';
     f6c:	0c 0d       	add	r16, r12
     f6e:	1d 1d       	adc	r17, r13
     f70:	f8 01       	movw	r30, r16
     f72:	10 82       	st	Z, r1
}
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	1f 91       	pop	r17
     f7a:	0f 91       	pop	r16
     f7c:	ff 90       	pop	r15
     f7e:	ef 90       	pop	r14
     f80:	df 90       	pop	r13
     f82:	cf 90       	pop	r12
     f84:	08 95       	ret

00000f86 <init_adc_temp>:

void init_adc_temp()
{
	// ref=Vcc, left adjust the result (8 bit resolution),
	// select channel 0 (PC1 = input)
	ADMUX = (1<<REFS0)|(1<<ADLAR);
     f86:	80 e6       	ldi	r24, 0x60	; 96
     f88:	80 93 7c 00 	sts	0x007C, r24
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     f8c:	87 e8       	ldi	r24, 0x87	; 135
     f8e:	80 93 7a 00 	sts	0x007A, r24
}
     f92:	08 95       	ret

00000f94 <get_adc_value_temp>:

uint8_t get_adc_value_temp()
{
	ADCSRA |= (1<<ADSC); // start conversion
     f94:	ea e7       	ldi	r30, 0x7A	; 122
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	80 64       	ori	r24, 0x40	; 64
     f9c:	80 83       	st	Z, r24
	loop_until_bit_is_clear(ADCSRA, ADSC);
     f9e:	80 81       	ld	r24, Z
     fa0:	86 fd       	sbrc	r24, 6
     fa2:	fd cf       	rjmp	.-6      	; 0xf9e <get_adc_value_temp+0xa>
	return ADCH; // ms 8 bits
     fa4:	80 91 79 00 	lds	r24, 0x0079
}
     fa8:	08 95       	ret

00000faa <read_sensor_temp>:

int8_t read_sensor_temp()
{
     faa:	cf 93       	push	r28
	int sensor_temp;
	float voltage;
	int8_t celsius;
	
	init_adc_temp();
     fac:	0e 94 c3 07 	call	0xf86	; 0xf86 <init_adc_temp>
	sensor_temp =  get_adc_value_temp();
     fb0:	0e 94 ca 07 	call	0xf94	; 0xf94 <get_adc_value_temp>
	voltage = ((sensor_temp / 256.0)*5.015);
     fb4:	68 2f       	mov	r22, r24
     fb6:	70 e0       	ldi	r23, 0x00	; 0
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	0e 94 ae 08 	call	0x115c	; 0x115c <__floatsisf>
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e8       	ldi	r20, 0x80	; 128
     fc6:	5b e3       	ldi	r21, 0x3B	; 59
     fc8:	0e 94 3a 09 	call	0x1274	; 0x1274 <__mulsf3>
     fcc:	21 ee       	ldi	r18, 0xE1	; 225
     fce:	3a e7       	ldi	r19, 0x7A	; 122
     fd0:	40 ea       	ldi	r20, 0xA0	; 160
     fd2:	50 e4       	ldi	r21, 0x40	; 64
     fd4:	0e 94 3a 09 	call	0x1274	; 0x1274 <__mulsf3>
	celsius = ((voltage - 0.5) * 100);
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	40 e0       	ldi	r20, 0x00	; 0
     fde:	5f e3       	ldi	r21, 0x3F	; 63
     fe0:	0e 94 16 08 	call	0x102c	; 0x102c <__subsf3>
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	48 ec       	ldi	r20, 0xC8	; 200
     fea:	52 e4       	ldi	r21, 0x42	; 66
     fec:	0e 94 3a 09 	call	0x1274	; 0x1274 <__mulsf3>
     ff0:	0e 94 7b 08 	call	0x10f6	; 0x10f6 <__fixsfsi>
     ff4:	c6 2f       	mov	r28, r22
	
	printf("Temp = %i", celsius);
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <read_sensor_temp+0x4e>
     ff8:	00 d0       	rcall	.+0      	; 0xffa <read_sensor_temp+0x50>
     ffa:	8b ef       	ldi	r24, 0xFB	; 251
     ffc:	93 e0       	ldi	r25, 0x03	; 3
     ffe:	ed b7       	in	r30, 0x3d	; 61
    1000:	fe b7       	in	r31, 0x3e	; 62
    1002:	92 83       	std	Z+2, r25	; 0x02
    1004:	81 83       	std	Z+1, r24	; 0x01
    1006:	8c 2f       	mov	r24, r28
    1008:	99 27       	eor	r25, r25
    100a:	87 fd       	sbrc	r24, 7
    100c:	90 95       	com	r25
    100e:	94 83       	std	Z+4, r25	; 0x04
    1010:	83 83       	std	Z+3, r24	; 0x03
    1012:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <printf>
	printf("\n");
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	8a e0       	ldi	r24, 0x0A	; 10
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 f5 09 	call	0x13ea	; 0x13ea <putchar>
	
	return celsius;
}
    1026:	8c 2f       	mov	r24, r28
    1028:	cf 91       	pop	r28
    102a:	08 95       	ret

0000102c <__subsf3>:
    102c:	50 58       	subi	r21, 0x80	; 128

0000102e <__addsf3>:
    102e:	bb 27       	eor	r27, r27
    1030:	aa 27       	eor	r26, r26
    1032:	0e d0       	rcall	.+28     	; 0x1050 <__addsf3x>
    1034:	e5 c0       	rjmp	.+458    	; 0x1200 <__fp_round>
    1036:	d6 d0       	rcall	.+428    	; 0x11e4 <__fp_pscA>
    1038:	30 f0       	brcs	.+12     	; 0x1046 <__addsf3+0x18>
    103a:	db d0       	rcall	.+438    	; 0x11f2 <__fp_pscB>
    103c:	20 f0       	brcs	.+8      	; 0x1046 <__addsf3+0x18>
    103e:	31 f4       	brne	.+12     	; 0x104c <__addsf3+0x1e>
    1040:	9f 3f       	cpi	r25, 0xFF	; 255
    1042:	11 f4       	brne	.+4      	; 0x1048 <__addsf3+0x1a>
    1044:	1e f4       	brtc	.+6      	; 0x104c <__addsf3+0x1e>
    1046:	cb c0       	rjmp	.+406    	; 0x11de <__fp_nan>
    1048:	0e f4       	brtc	.+2      	; 0x104c <__addsf3+0x1e>
    104a:	e0 95       	com	r30
    104c:	e7 fb       	bst	r30, 7
    104e:	c1 c0       	rjmp	.+386    	; 0x11d2 <__fp_inf>

00001050 <__addsf3x>:
    1050:	e9 2f       	mov	r30, r25
    1052:	e7 d0       	rcall	.+462    	; 0x1222 <__fp_split3>
    1054:	80 f3       	brcs	.-32     	; 0x1036 <__addsf3+0x8>
    1056:	ba 17       	cp	r27, r26
    1058:	62 07       	cpc	r22, r18
    105a:	73 07       	cpc	r23, r19
    105c:	84 07       	cpc	r24, r20
    105e:	95 07       	cpc	r25, r21
    1060:	18 f0       	brcs	.+6      	; 0x1068 <__addsf3x+0x18>
    1062:	71 f4       	brne	.+28     	; 0x1080 <__addsf3x+0x30>
    1064:	9e f5       	brtc	.+102    	; 0x10cc <__addsf3x+0x7c>
    1066:	ff c0       	rjmp	.+510    	; 0x1266 <__fp_zero>
    1068:	0e f4       	brtc	.+2      	; 0x106c <__addsf3x+0x1c>
    106a:	e0 95       	com	r30
    106c:	0b 2e       	mov	r0, r27
    106e:	ba 2f       	mov	r27, r26
    1070:	a0 2d       	mov	r26, r0
    1072:	0b 01       	movw	r0, r22
    1074:	b9 01       	movw	r22, r18
    1076:	90 01       	movw	r18, r0
    1078:	0c 01       	movw	r0, r24
    107a:	ca 01       	movw	r24, r20
    107c:	a0 01       	movw	r20, r0
    107e:	11 24       	eor	r1, r1
    1080:	ff 27       	eor	r31, r31
    1082:	59 1b       	sub	r21, r25
    1084:	99 f0       	breq	.+38     	; 0x10ac <__addsf3x+0x5c>
    1086:	59 3f       	cpi	r21, 0xF9	; 249
    1088:	50 f4       	brcc	.+20     	; 0x109e <__addsf3x+0x4e>
    108a:	50 3e       	cpi	r21, 0xE0	; 224
    108c:	68 f1       	brcs	.+90     	; 0x10e8 <__addsf3x+0x98>
    108e:	1a 16       	cp	r1, r26
    1090:	f0 40       	sbci	r31, 0x00	; 0
    1092:	a2 2f       	mov	r26, r18
    1094:	23 2f       	mov	r18, r19
    1096:	34 2f       	mov	r19, r20
    1098:	44 27       	eor	r20, r20
    109a:	58 5f       	subi	r21, 0xF8	; 248
    109c:	f3 cf       	rjmp	.-26     	; 0x1084 <__addsf3x+0x34>
    109e:	46 95       	lsr	r20
    10a0:	37 95       	ror	r19
    10a2:	27 95       	ror	r18
    10a4:	a7 95       	ror	r26
    10a6:	f0 40       	sbci	r31, 0x00	; 0
    10a8:	53 95       	inc	r21
    10aa:	c9 f7       	brne	.-14     	; 0x109e <__addsf3x+0x4e>
    10ac:	7e f4       	brtc	.+30     	; 0x10cc <__addsf3x+0x7c>
    10ae:	1f 16       	cp	r1, r31
    10b0:	ba 0b       	sbc	r27, r26
    10b2:	62 0b       	sbc	r22, r18
    10b4:	73 0b       	sbc	r23, r19
    10b6:	84 0b       	sbc	r24, r20
    10b8:	ba f0       	brmi	.+46     	; 0x10e8 <__addsf3x+0x98>
    10ba:	91 50       	subi	r25, 0x01	; 1
    10bc:	a1 f0       	breq	.+40     	; 0x10e6 <__addsf3x+0x96>
    10be:	ff 0f       	add	r31, r31
    10c0:	bb 1f       	adc	r27, r27
    10c2:	66 1f       	adc	r22, r22
    10c4:	77 1f       	adc	r23, r23
    10c6:	88 1f       	adc	r24, r24
    10c8:	c2 f7       	brpl	.-16     	; 0x10ba <__addsf3x+0x6a>
    10ca:	0e c0       	rjmp	.+28     	; 0x10e8 <__addsf3x+0x98>
    10cc:	ba 0f       	add	r27, r26
    10ce:	62 1f       	adc	r22, r18
    10d0:	73 1f       	adc	r23, r19
    10d2:	84 1f       	adc	r24, r20
    10d4:	48 f4       	brcc	.+18     	; 0x10e8 <__addsf3x+0x98>
    10d6:	87 95       	ror	r24
    10d8:	77 95       	ror	r23
    10da:	67 95       	ror	r22
    10dc:	b7 95       	ror	r27
    10de:	f7 95       	ror	r31
    10e0:	9e 3f       	cpi	r25, 0xFE	; 254
    10e2:	08 f0       	brcs	.+2      	; 0x10e6 <__addsf3x+0x96>
    10e4:	b3 cf       	rjmp	.-154    	; 0x104c <__addsf3+0x1e>
    10e6:	93 95       	inc	r25
    10e8:	88 0f       	add	r24, r24
    10ea:	08 f0       	brcs	.+2      	; 0x10ee <__addsf3x+0x9e>
    10ec:	99 27       	eor	r25, r25
    10ee:	ee 0f       	add	r30, r30
    10f0:	97 95       	ror	r25
    10f2:	87 95       	ror	r24
    10f4:	08 95       	ret

000010f6 <__fixsfsi>:
    10f6:	04 d0       	rcall	.+8      	; 0x1100 <__fixunssfsi>
    10f8:	68 94       	set
    10fa:	b1 11       	cpse	r27, r1
    10fc:	b5 c0       	rjmp	.+362    	; 0x1268 <__fp_szero>
    10fe:	08 95       	ret

00001100 <__fixunssfsi>:
    1100:	98 d0       	rcall	.+304    	; 0x1232 <__fp_splitA>
    1102:	88 f0       	brcs	.+34     	; 0x1126 <__fixunssfsi+0x26>
    1104:	9f 57       	subi	r25, 0x7F	; 127
    1106:	90 f0       	brcs	.+36     	; 0x112c <__fixunssfsi+0x2c>
    1108:	b9 2f       	mov	r27, r25
    110a:	99 27       	eor	r25, r25
    110c:	b7 51       	subi	r27, 0x17	; 23
    110e:	a0 f0       	brcs	.+40     	; 0x1138 <__fixunssfsi+0x38>
    1110:	d1 f0       	breq	.+52     	; 0x1146 <__fixunssfsi+0x46>
    1112:	66 0f       	add	r22, r22
    1114:	77 1f       	adc	r23, r23
    1116:	88 1f       	adc	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	1a f0       	brmi	.+6      	; 0x1122 <__fixunssfsi+0x22>
    111c:	ba 95       	dec	r27
    111e:	c9 f7       	brne	.-14     	; 0x1112 <__fixunssfsi+0x12>
    1120:	12 c0       	rjmp	.+36     	; 0x1146 <__fixunssfsi+0x46>
    1122:	b1 30       	cpi	r27, 0x01	; 1
    1124:	81 f0       	breq	.+32     	; 0x1146 <__fixunssfsi+0x46>
    1126:	9f d0       	rcall	.+318    	; 0x1266 <__fp_zero>
    1128:	b1 e0       	ldi	r27, 0x01	; 1
    112a:	08 95       	ret
    112c:	9c c0       	rjmp	.+312    	; 0x1266 <__fp_zero>
    112e:	67 2f       	mov	r22, r23
    1130:	78 2f       	mov	r23, r24
    1132:	88 27       	eor	r24, r24
    1134:	b8 5f       	subi	r27, 0xF8	; 248
    1136:	39 f0       	breq	.+14     	; 0x1146 <__fixunssfsi+0x46>
    1138:	b9 3f       	cpi	r27, 0xF9	; 249
    113a:	cc f3       	brlt	.-14     	; 0x112e <__fixunssfsi+0x2e>
    113c:	86 95       	lsr	r24
    113e:	77 95       	ror	r23
    1140:	67 95       	ror	r22
    1142:	b3 95       	inc	r27
    1144:	d9 f7       	brne	.-10     	; 0x113c <__fixunssfsi+0x3c>
    1146:	3e f4       	brtc	.+14     	; 0x1156 <__fixunssfsi+0x56>
    1148:	90 95       	com	r25
    114a:	80 95       	com	r24
    114c:	70 95       	com	r23
    114e:	61 95       	neg	r22
    1150:	7f 4f       	sbci	r23, 0xFF	; 255
    1152:	8f 4f       	sbci	r24, 0xFF	; 255
    1154:	9f 4f       	sbci	r25, 0xFF	; 255
    1156:	08 95       	ret

00001158 <__floatunsisf>:
    1158:	e8 94       	clt
    115a:	09 c0       	rjmp	.+18     	; 0x116e <__floatsisf+0x12>

0000115c <__floatsisf>:
    115c:	97 fb       	bst	r25, 7
    115e:	3e f4       	brtc	.+14     	; 0x116e <__floatsisf+0x12>
    1160:	90 95       	com	r25
    1162:	80 95       	com	r24
    1164:	70 95       	com	r23
    1166:	61 95       	neg	r22
    1168:	7f 4f       	sbci	r23, 0xFF	; 255
    116a:	8f 4f       	sbci	r24, 0xFF	; 255
    116c:	9f 4f       	sbci	r25, 0xFF	; 255
    116e:	99 23       	and	r25, r25
    1170:	a9 f0       	breq	.+42     	; 0x119c <__floatsisf+0x40>
    1172:	f9 2f       	mov	r31, r25
    1174:	96 e9       	ldi	r25, 0x96	; 150
    1176:	bb 27       	eor	r27, r27
    1178:	93 95       	inc	r25
    117a:	f6 95       	lsr	r31
    117c:	87 95       	ror	r24
    117e:	77 95       	ror	r23
    1180:	67 95       	ror	r22
    1182:	b7 95       	ror	r27
    1184:	f1 11       	cpse	r31, r1
    1186:	f8 cf       	rjmp	.-16     	; 0x1178 <__floatsisf+0x1c>
    1188:	fa f4       	brpl	.+62     	; 0x11c8 <__floatsisf+0x6c>
    118a:	bb 0f       	add	r27, r27
    118c:	11 f4       	brne	.+4      	; 0x1192 <__floatsisf+0x36>
    118e:	60 ff       	sbrs	r22, 0
    1190:	1b c0       	rjmp	.+54     	; 0x11c8 <__floatsisf+0x6c>
    1192:	6f 5f       	subi	r22, 0xFF	; 255
    1194:	7f 4f       	sbci	r23, 0xFF	; 255
    1196:	8f 4f       	sbci	r24, 0xFF	; 255
    1198:	9f 4f       	sbci	r25, 0xFF	; 255
    119a:	16 c0       	rjmp	.+44     	; 0x11c8 <__floatsisf+0x6c>
    119c:	88 23       	and	r24, r24
    119e:	11 f0       	breq	.+4      	; 0x11a4 <__floatsisf+0x48>
    11a0:	96 e9       	ldi	r25, 0x96	; 150
    11a2:	11 c0       	rjmp	.+34     	; 0x11c6 <__floatsisf+0x6a>
    11a4:	77 23       	and	r23, r23
    11a6:	21 f0       	breq	.+8      	; 0x11b0 <__floatsisf+0x54>
    11a8:	9e e8       	ldi	r25, 0x8E	; 142
    11aa:	87 2f       	mov	r24, r23
    11ac:	76 2f       	mov	r23, r22
    11ae:	05 c0       	rjmp	.+10     	; 0x11ba <__floatsisf+0x5e>
    11b0:	66 23       	and	r22, r22
    11b2:	71 f0       	breq	.+28     	; 0x11d0 <__floatsisf+0x74>
    11b4:	96 e8       	ldi	r25, 0x86	; 134
    11b6:	86 2f       	mov	r24, r22
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	60 e0       	ldi	r22, 0x00	; 0
    11bc:	2a f0       	brmi	.+10     	; 0x11c8 <__floatsisf+0x6c>
    11be:	9a 95       	dec	r25
    11c0:	66 0f       	add	r22, r22
    11c2:	77 1f       	adc	r23, r23
    11c4:	88 1f       	adc	r24, r24
    11c6:	da f7       	brpl	.-10     	; 0x11be <__floatsisf+0x62>
    11c8:	88 0f       	add	r24, r24
    11ca:	96 95       	lsr	r25
    11cc:	87 95       	ror	r24
    11ce:	97 f9       	bld	r25, 7
    11d0:	08 95       	ret

000011d2 <__fp_inf>:
    11d2:	97 f9       	bld	r25, 7
    11d4:	9f 67       	ori	r25, 0x7F	; 127
    11d6:	80 e8       	ldi	r24, 0x80	; 128
    11d8:	70 e0       	ldi	r23, 0x00	; 0
    11da:	60 e0       	ldi	r22, 0x00	; 0
    11dc:	08 95       	ret

000011de <__fp_nan>:
    11de:	9f ef       	ldi	r25, 0xFF	; 255
    11e0:	80 ec       	ldi	r24, 0xC0	; 192
    11e2:	08 95       	ret

000011e4 <__fp_pscA>:
    11e4:	00 24       	eor	r0, r0
    11e6:	0a 94       	dec	r0
    11e8:	16 16       	cp	r1, r22
    11ea:	17 06       	cpc	r1, r23
    11ec:	18 06       	cpc	r1, r24
    11ee:	09 06       	cpc	r0, r25
    11f0:	08 95       	ret

000011f2 <__fp_pscB>:
    11f2:	00 24       	eor	r0, r0
    11f4:	0a 94       	dec	r0
    11f6:	12 16       	cp	r1, r18
    11f8:	13 06       	cpc	r1, r19
    11fa:	14 06       	cpc	r1, r20
    11fc:	05 06       	cpc	r0, r21
    11fe:	08 95       	ret

00001200 <__fp_round>:
    1200:	09 2e       	mov	r0, r25
    1202:	03 94       	inc	r0
    1204:	00 0c       	add	r0, r0
    1206:	11 f4       	brne	.+4      	; 0x120c <__fp_round+0xc>
    1208:	88 23       	and	r24, r24
    120a:	52 f0       	brmi	.+20     	; 0x1220 <__fp_round+0x20>
    120c:	bb 0f       	add	r27, r27
    120e:	40 f4       	brcc	.+16     	; 0x1220 <__fp_round+0x20>
    1210:	bf 2b       	or	r27, r31
    1212:	11 f4       	brne	.+4      	; 0x1218 <__fp_round+0x18>
    1214:	60 ff       	sbrs	r22, 0
    1216:	04 c0       	rjmp	.+8      	; 0x1220 <__fp_round+0x20>
    1218:	6f 5f       	subi	r22, 0xFF	; 255
    121a:	7f 4f       	sbci	r23, 0xFF	; 255
    121c:	8f 4f       	sbci	r24, 0xFF	; 255
    121e:	9f 4f       	sbci	r25, 0xFF	; 255
    1220:	08 95       	ret

00001222 <__fp_split3>:
    1222:	57 fd       	sbrc	r21, 7
    1224:	90 58       	subi	r25, 0x80	; 128
    1226:	44 0f       	add	r20, r20
    1228:	55 1f       	adc	r21, r21
    122a:	59 f0       	breq	.+22     	; 0x1242 <__fp_splitA+0x10>
    122c:	5f 3f       	cpi	r21, 0xFF	; 255
    122e:	71 f0       	breq	.+28     	; 0x124c <__fp_splitA+0x1a>
    1230:	47 95       	ror	r20

00001232 <__fp_splitA>:
    1232:	88 0f       	add	r24, r24
    1234:	97 fb       	bst	r25, 7
    1236:	99 1f       	adc	r25, r25
    1238:	61 f0       	breq	.+24     	; 0x1252 <__fp_splitA+0x20>
    123a:	9f 3f       	cpi	r25, 0xFF	; 255
    123c:	79 f0       	breq	.+30     	; 0x125c <__fp_splitA+0x2a>
    123e:	87 95       	ror	r24
    1240:	08 95       	ret
    1242:	12 16       	cp	r1, r18
    1244:	13 06       	cpc	r1, r19
    1246:	14 06       	cpc	r1, r20
    1248:	55 1f       	adc	r21, r21
    124a:	f2 cf       	rjmp	.-28     	; 0x1230 <__fp_split3+0xe>
    124c:	46 95       	lsr	r20
    124e:	f1 df       	rcall	.-30     	; 0x1232 <__fp_splitA>
    1250:	08 c0       	rjmp	.+16     	; 0x1262 <__fp_splitA+0x30>
    1252:	16 16       	cp	r1, r22
    1254:	17 06       	cpc	r1, r23
    1256:	18 06       	cpc	r1, r24
    1258:	99 1f       	adc	r25, r25
    125a:	f1 cf       	rjmp	.-30     	; 0x123e <__fp_splitA+0xc>
    125c:	86 95       	lsr	r24
    125e:	71 05       	cpc	r23, r1
    1260:	61 05       	cpc	r22, r1
    1262:	08 94       	sec
    1264:	08 95       	ret

00001266 <__fp_zero>:
    1266:	e8 94       	clt

00001268 <__fp_szero>:
    1268:	bb 27       	eor	r27, r27
    126a:	66 27       	eor	r22, r22
    126c:	77 27       	eor	r23, r23
    126e:	cb 01       	movw	r24, r22
    1270:	97 f9       	bld	r25, 7
    1272:	08 95       	ret

00001274 <__mulsf3>:
    1274:	0b d0       	rcall	.+22     	; 0x128c <__mulsf3x>
    1276:	c4 cf       	rjmp	.-120    	; 0x1200 <__fp_round>
    1278:	b5 df       	rcall	.-150    	; 0x11e4 <__fp_pscA>
    127a:	28 f0       	brcs	.+10     	; 0x1286 <__mulsf3+0x12>
    127c:	ba df       	rcall	.-140    	; 0x11f2 <__fp_pscB>
    127e:	18 f0       	brcs	.+6      	; 0x1286 <__mulsf3+0x12>
    1280:	95 23       	and	r25, r21
    1282:	09 f0       	breq	.+2      	; 0x1286 <__mulsf3+0x12>
    1284:	a6 cf       	rjmp	.-180    	; 0x11d2 <__fp_inf>
    1286:	ab cf       	rjmp	.-170    	; 0x11de <__fp_nan>
    1288:	11 24       	eor	r1, r1
    128a:	ee cf       	rjmp	.-36     	; 0x1268 <__fp_szero>

0000128c <__mulsf3x>:
    128c:	ca df       	rcall	.-108    	; 0x1222 <__fp_split3>
    128e:	a0 f3       	brcs	.-24     	; 0x1278 <__mulsf3+0x4>

00001290 <__mulsf3_pse>:
    1290:	95 9f       	mul	r25, r21
    1292:	d1 f3       	breq	.-12     	; 0x1288 <__mulsf3+0x14>
    1294:	95 0f       	add	r25, r21
    1296:	50 e0       	ldi	r21, 0x00	; 0
    1298:	55 1f       	adc	r21, r21
    129a:	62 9f       	mul	r22, r18
    129c:	f0 01       	movw	r30, r0
    129e:	72 9f       	mul	r23, r18
    12a0:	bb 27       	eor	r27, r27
    12a2:	f0 0d       	add	r31, r0
    12a4:	b1 1d       	adc	r27, r1
    12a6:	63 9f       	mul	r22, r19
    12a8:	aa 27       	eor	r26, r26
    12aa:	f0 0d       	add	r31, r0
    12ac:	b1 1d       	adc	r27, r1
    12ae:	aa 1f       	adc	r26, r26
    12b0:	64 9f       	mul	r22, r20
    12b2:	66 27       	eor	r22, r22
    12b4:	b0 0d       	add	r27, r0
    12b6:	a1 1d       	adc	r26, r1
    12b8:	66 1f       	adc	r22, r22
    12ba:	82 9f       	mul	r24, r18
    12bc:	22 27       	eor	r18, r18
    12be:	b0 0d       	add	r27, r0
    12c0:	a1 1d       	adc	r26, r1
    12c2:	62 1f       	adc	r22, r18
    12c4:	73 9f       	mul	r23, r19
    12c6:	b0 0d       	add	r27, r0
    12c8:	a1 1d       	adc	r26, r1
    12ca:	62 1f       	adc	r22, r18
    12cc:	83 9f       	mul	r24, r19
    12ce:	a0 0d       	add	r26, r0
    12d0:	61 1d       	adc	r22, r1
    12d2:	22 1f       	adc	r18, r18
    12d4:	74 9f       	mul	r23, r20
    12d6:	33 27       	eor	r19, r19
    12d8:	a0 0d       	add	r26, r0
    12da:	61 1d       	adc	r22, r1
    12dc:	23 1f       	adc	r18, r19
    12de:	84 9f       	mul	r24, r20
    12e0:	60 0d       	add	r22, r0
    12e2:	21 1d       	adc	r18, r1
    12e4:	82 2f       	mov	r24, r18
    12e6:	76 2f       	mov	r23, r22
    12e8:	6a 2f       	mov	r22, r26
    12ea:	11 24       	eor	r1, r1
    12ec:	9f 57       	subi	r25, 0x7F	; 127
    12ee:	50 40       	sbci	r21, 0x00	; 0
    12f0:	8a f0       	brmi	.+34     	; 0x1314 <__mulsf3_pse+0x84>
    12f2:	e1 f0       	breq	.+56     	; 0x132c <__mulsf3_pse+0x9c>
    12f4:	88 23       	and	r24, r24
    12f6:	4a f0       	brmi	.+18     	; 0x130a <__mulsf3_pse+0x7a>
    12f8:	ee 0f       	add	r30, r30
    12fa:	ff 1f       	adc	r31, r31
    12fc:	bb 1f       	adc	r27, r27
    12fe:	66 1f       	adc	r22, r22
    1300:	77 1f       	adc	r23, r23
    1302:	88 1f       	adc	r24, r24
    1304:	91 50       	subi	r25, 0x01	; 1
    1306:	50 40       	sbci	r21, 0x00	; 0
    1308:	a9 f7       	brne	.-22     	; 0x12f4 <__mulsf3_pse+0x64>
    130a:	9e 3f       	cpi	r25, 0xFE	; 254
    130c:	51 05       	cpc	r21, r1
    130e:	70 f0       	brcs	.+28     	; 0x132c <__mulsf3_pse+0x9c>
    1310:	60 cf       	rjmp	.-320    	; 0x11d2 <__fp_inf>
    1312:	aa cf       	rjmp	.-172    	; 0x1268 <__fp_szero>
    1314:	5f 3f       	cpi	r21, 0xFF	; 255
    1316:	ec f3       	brlt	.-6      	; 0x1312 <__mulsf3_pse+0x82>
    1318:	98 3e       	cpi	r25, 0xE8	; 232
    131a:	dc f3       	brlt	.-10     	; 0x1312 <__mulsf3_pse+0x82>
    131c:	86 95       	lsr	r24
    131e:	77 95       	ror	r23
    1320:	67 95       	ror	r22
    1322:	b7 95       	ror	r27
    1324:	f7 95       	ror	r31
    1326:	e7 95       	ror	r30
    1328:	9f 5f       	subi	r25, 0xFF	; 255
    132a:	c1 f7       	brne	.-16     	; 0x131c <__mulsf3_pse+0x8c>
    132c:	fe 2b       	or	r31, r30
    132e:	88 0f       	add	r24, r24
    1330:	91 1d       	adc	r25, r1
    1332:	96 95       	lsr	r25
    1334:	87 95       	ror	r24
    1336:	97 f9       	bld	r25, 7
    1338:	08 95       	ret

0000133a <__udivmodhi4>:
    133a:	aa 1b       	sub	r26, r26
    133c:	bb 1b       	sub	r27, r27
    133e:	51 e1       	ldi	r21, 0x11	; 17
    1340:	07 c0       	rjmp	.+14     	; 0x1350 <__udivmodhi4_ep>

00001342 <__udivmodhi4_loop>:
    1342:	aa 1f       	adc	r26, r26
    1344:	bb 1f       	adc	r27, r27
    1346:	a6 17       	cp	r26, r22
    1348:	b7 07       	cpc	r27, r23
    134a:	10 f0       	brcs	.+4      	; 0x1350 <__udivmodhi4_ep>
    134c:	a6 1b       	sub	r26, r22
    134e:	b7 0b       	sbc	r27, r23

00001350 <__udivmodhi4_ep>:
    1350:	88 1f       	adc	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	5a 95       	dec	r21
    1356:	a9 f7       	brne	.-22     	; 0x1342 <__udivmodhi4_loop>
    1358:	80 95       	com	r24
    135a:	90 95       	com	r25
    135c:	bc 01       	movw	r22, r24
    135e:	cd 01       	movw	r24, r26
    1360:	08 95       	ret

00001362 <atoi>:
    1362:	fc 01       	movw	r30, r24
    1364:	88 27       	eor	r24, r24
    1366:	99 27       	eor	r25, r25
    1368:	e8 94       	clt
    136a:	21 91       	ld	r18, Z+
    136c:	20 32       	cpi	r18, 0x20	; 32
    136e:	e9 f3       	breq	.-6      	; 0x136a <atoi+0x8>
    1370:	29 30       	cpi	r18, 0x09	; 9
    1372:	10 f0       	brcs	.+4      	; 0x1378 <atoi+0x16>
    1374:	2e 30       	cpi	r18, 0x0E	; 14
    1376:	c8 f3       	brcs	.-14     	; 0x136a <atoi+0x8>
    1378:	2b 32       	cpi	r18, 0x2B	; 43
    137a:	41 f0       	breq	.+16     	; 0x138c <atoi+0x2a>
    137c:	2d 32       	cpi	r18, 0x2D	; 45
    137e:	39 f4       	brne	.+14     	; 0x138e <atoi+0x2c>
    1380:	68 94       	set
    1382:	04 c0       	rjmp	.+8      	; 0x138c <atoi+0x2a>
    1384:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <__mulhi_const_10>
    1388:	82 0f       	add	r24, r18
    138a:	91 1d       	adc	r25, r1
    138c:	21 91       	ld	r18, Z+
    138e:	20 53       	subi	r18, 0x30	; 48
    1390:	2a 30       	cpi	r18, 0x0A	; 10
    1392:	c0 f3       	brcs	.-16     	; 0x1384 <atoi+0x22>
    1394:	1e f4       	brtc	.+6      	; 0x139c <atoi+0x3a>
    1396:	90 95       	com	r25
    1398:	81 95       	neg	r24
    139a:	9f 4f       	sbci	r25, 0xFF	; 255
    139c:	08 95       	ret

0000139e <strcmp>:
    139e:	fb 01       	movw	r30, r22
    13a0:	dc 01       	movw	r26, r24
    13a2:	8d 91       	ld	r24, X+
    13a4:	01 90       	ld	r0, Z+
    13a6:	80 19       	sub	r24, r0
    13a8:	01 10       	cpse	r0, r1
    13aa:	d9 f3       	breq	.-10     	; 0x13a2 <strcmp+0x4>
    13ac:	99 0b       	sbc	r25, r25
    13ae:	08 95       	ret

000013b0 <__mulhi_const_10>:
    13b0:	7a e0       	ldi	r23, 0x0A	; 10
    13b2:	97 9f       	mul	r25, r23
    13b4:	90 2d       	mov	r25, r0
    13b6:	87 9f       	mul	r24, r23
    13b8:	80 2d       	mov	r24, r0
    13ba:	91 0d       	add	r25, r1
    13bc:	11 24       	eor	r1, r1
    13be:	08 95       	ret

000013c0 <printf>:
    13c0:	a0 e0       	ldi	r26, 0x00	; 0
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e6 ee       	ldi	r30, 0xE6	; 230
    13c6:	f9 e0       	ldi	r31, 0x09	; 9
    13c8:	0c 94 c6 0c 	jmp	0x198c	; 0x198c <__prologue_saves__+0x20>
    13cc:	fe 01       	movw	r30, r28
    13ce:	35 96       	adiw	r30, 0x05	; 5
    13d0:	61 91       	ld	r22, Z+
    13d2:	71 91       	ld	r23, Z+
    13d4:	80 91 15 04 	lds	r24, 0x0415
    13d8:	90 91 16 04 	lds	r25, 0x0416
    13dc:	af 01       	movw	r20, r30
    13de:	0e 94 1e 0a 	call	0x143c	; 0x143c <vfprintf>
    13e2:	20 96       	adiw	r28, 0x00	; 0
    13e4:	e2 e0       	ldi	r30, 0x02	; 2
    13e6:	0c 94 e2 0c 	jmp	0x19c4	; 0x19c4 <__epilogue_restores__+0x20>

000013ea <putchar>:
    13ea:	60 91 15 04 	lds	r22, 0x0415
    13ee:	70 91 16 04 	lds	r23, 0x0416
    13f2:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    13f6:	08 95       	ret

000013f8 <sprintf>:
    13f8:	ae e0       	ldi	r26, 0x0E	; 14
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e2 e0       	ldi	r30, 0x02	; 2
    13fe:	fa e0       	ldi	r31, 0x0A	; 10
    1400:	0c 94 c4 0c 	jmp	0x1988	; 0x1988 <__prologue_saves__+0x1c>
    1404:	0d 89       	ldd	r16, Y+21	; 0x15
    1406:	1e 89       	ldd	r17, Y+22	; 0x16
    1408:	86 e0       	ldi	r24, 0x06	; 6
    140a:	8c 83       	std	Y+4, r24	; 0x04
    140c:	1a 83       	std	Y+2, r17	; 0x02
    140e:	09 83       	std	Y+1, r16	; 0x01
    1410:	8f ef       	ldi	r24, 0xFF	; 255
    1412:	9f e7       	ldi	r25, 0x7F	; 127
    1414:	9e 83       	std	Y+6, r25	; 0x06
    1416:	8d 83       	std	Y+5, r24	; 0x05
    1418:	ae 01       	movw	r20, r28
    141a:	47 5e       	subi	r20, 0xE7	; 231
    141c:	5f 4f       	sbci	r21, 0xFF	; 255
    141e:	ce 01       	movw	r24, r28
    1420:	01 96       	adiw	r24, 0x01	; 1
    1422:	6f 89       	ldd	r22, Y+23	; 0x17
    1424:	78 8d       	ldd	r23, Y+24	; 0x18
    1426:	0e 94 1e 0a 	call	0x143c	; 0x143c <vfprintf>
    142a:	ef 81       	ldd	r30, Y+7	; 0x07
    142c:	f8 85       	ldd	r31, Y+8	; 0x08
    142e:	e0 0f       	add	r30, r16
    1430:	f1 1f       	adc	r31, r17
    1432:	10 82       	st	Z, r1
    1434:	2e 96       	adiw	r28, 0x0e	; 14
    1436:	e4 e0       	ldi	r30, 0x04	; 4
    1438:	0c 94 e0 0c 	jmp	0x19c0	; 0x19c0 <__epilogue_restores__+0x1c>

0000143c <vfprintf>:
    143c:	ad e0       	ldi	r26, 0x0D	; 13
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e4 e2       	ldi	r30, 0x24	; 36
    1442:	fa e0       	ldi	r31, 0x0A	; 10
    1444:	0c 94 b6 0c 	jmp	0x196c	; 0x196c <__prologue_saves__>
    1448:	3c 01       	movw	r6, r24
    144a:	7d 87       	std	Y+13, r23	; 0x0d
    144c:	6c 87       	std	Y+12, r22	; 0x0c
    144e:	5a 01       	movw	r10, r20
    1450:	fc 01       	movw	r30, r24
    1452:	17 82       	std	Z+7, r1	; 0x07
    1454:	16 82       	std	Z+6, r1	; 0x06
    1456:	83 81       	ldd	r24, Z+3	; 0x03
    1458:	81 ff       	sbrs	r24, 1
    145a:	c8 c1       	rjmp	.+912    	; 0x17ec <vfprintf+0x3b0>
    145c:	2e 01       	movw	r4, r28
    145e:	08 94       	sec
    1460:	41 1c       	adc	r4, r1
    1462:	51 1c       	adc	r5, r1
    1464:	f3 01       	movw	r30, r6
    1466:	93 81       	ldd	r25, Z+3	; 0x03
    1468:	ec 85       	ldd	r30, Y+12	; 0x0c
    146a:	fd 85       	ldd	r31, Y+13	; 0x0d
    146c:	93 fd       	sbrc	r25, 3
    146e:	85 91       	lpm	r24, Z+
    1470:	93 ff       	sbrs	r25, 3
    1472:	81 91       	ld	r24, Z+
    1474:	fd 87       	std	Y+13, r31	; 0x0d
    1476:	ec 87       	std	Y+12, r30	; 0x0c
    1478:	88 23       	and	r24, r24
    147a:	09 f4       	brne	.+2      	; 0x147e <vfprintf+0x42>
    147c:	b3 c1       	rjmp	.+870    	; 0x17e4 <vfprintf+0x3a8>
    147e:	85 32       	cpi	r24, 0x25	; 37
    1480:	41 f4       	brne	.+16     	; 0x1492 <vfprintf+0x56>
    1482:	93 fd       	sbrc	r25, 3
    1484:	85 91       	lpm	r24, Z+
    1486:	93 ff       	sbrs	r25, 3
    1488:	81 91       	ld	r24, Z+
    148a:	fd 87       	std	Y+13, r31	; 0x0d
    148c:	ec 87       	std	Y+12, r30	; 0x0c
    148e:	85 32       	cpi	r24, 0x25	; 37
    1490:	29 f4       	brne	.+10     	; 0x149c <vfprintf+0x60>
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	b3 01       	movw	r22, r6
    1496:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    149a:	e4 cf       	rjmp	.-56     	; 0x1464 <vfprintf+0x28>
    149c:	ff 24       	eor	r15, r15
    149e:	ee 24       	eor	r14, r14
    14a0:	10 e0       	ldi	r17, 0x00	; 0
    14a2:	10 32       	cpi	r17, 0x20	; 32
    14a4:	b0 f4       	brcc	.+44     	; 0x14d2 <vfprintf+0x96>
    14a6:	8b 32       	cpi	r24, 0x2B	; 43
    14a8:	69 f0       	breq	.+26     	; 0x14c4 <vfprintf+0x88>
    14aa:	8c 32       	cpi	r24, 0x2C	; 44
    14ac:	28 f4       	brcc	.+10     	; 0x14b8 <vfprintf+0x7c>
    14ae:	80 32       	cpi	r24, 0x20	; 32
    14b0:	51 f0       	breq	.+20     	; 0x14c6 <vfprintf+0x8a>
    14b2:	83 32       	cpi	r24, 0x23	; 35
    14b4:	71 f4       	brne	.+28     	; 0x14d2 <vfprintf+0x96>
    14b6:	0b c0       	rjmp	.+22     	; 0x14ce <vfprintf+0x92>
    14b8:	8d 32       	cpi	r24, 0x2D	; 45
    14ba:	39 f0       	breq	.+14     	; 0x14ca <vfprintf+0x8e>
    14bc:	80 33       	cpi	r24, 0x30	; 48
    14be:	49 f4       	brne	.+18     	; 0x14d2 <vfprintf+0x96>
    14c0:	11 60       	ori	r17, 0x01	; 1
    14c2:	2c c0       	rjmp	.+88     	; 0x151c <vfprintf+0xe0>
    14c4:	12 60       	ori	r17, 0x02	; 2
    14c6:	14 60       	ori	r17, 0x04	; 4
    14c8:	29 c0       	rjmp	.+82     	; 0x151c <vfprintf+0xe0>
    14ca:	18 60       	ori	r17, 0x08	; 8
    14cc:	27 c0       	rjmp	.+78     	; 0x151c <vfprintf+0xe0>
    14ce:	10 61       	ori	r17, 0x10	; 16
    14d0:	25 c0       	rjmp	.+74     	; 0x151c <vfprintf+0xe0>
    14d2:	17 fd       	sbrc	r17, 7
    14d4:	2e c0       	rjmp	.+92     	; 0x1532 <vfprintf+0xf6>
    14d6:	28 2f       	mov	r18, r24
    14d8:	20 53       	subi	r18, 0x30	; 48
    14da:	2a 30       	cpi	r18, 0x0A	; 10
    14dc:	98 f4       	brcc	.+38     	; 0x1504 <vfprintf+0xc8>
    14de:	16 ff       	sbrs	r17, 6
    14e0:	08 c0       	rjmp	.+16     	; 0x14f2 <vfprintf+0xb6>
    14e2:	8f 2d       	mov	r24, r15
    14e4:	88 0f       	add	r24, r24
    14e6:	f8 2e       	mov	r15, r24
    14e8:	ff 0c       	add	r15, r15
    14ea:	ff 0c       	add	r15, r15
    14ec:	f8 0e       	add	r15, r24
    14ee:	f2 0e       	add	r15, r18
    14f0:	15 c0       	rjmp	.+42     	; 0x151c <vfprintf+0xe0>
    14f2:	8e 2d       	mov	r24, r14
    14f4:	88 0f       	add	r24, r24
    14f6:	e8 2e       	mov	r14, r24
    14f8:	ee 0c       	add	r14, r14
    14fa:	ee 0c       	add	r14, r14
    14fc:	e8 0e       	add	r14, r24
    14fe:	e2 0e       	add	r14, r18
    1500:	10 62       	ori	r17, 0x20	; 32
    1502:	0c c0       	rjmp	.+24     	; 0x151c <vfprintf+0xe0>
    1504:	8e 32       	cpi	r24, 0x2E	; 46
    1506:	21 f4       	brne	.+8      	; 0x1510 <vfprintf+0xd4>
    1508:	16 fd       	sbrc	r17, 6
    150a:	6c c1       	rjmp	.+728    	; 0x17e4 <vfprintf+0x3a8>
    150c:	10 64       	ori	r17, 0x40	; 64
    150e:	06 c0       	rjmp	.+12     	; 0x151c <vfprintf+0xe0>
    1510:	8c 36       	cpi	r24, 0x6C	; 108
    1512:	11 f4       	brne	.+4      	; 0x1518 <vfprintf+0xdc>
    1514:	10 68       	ori	r17, 0x80	; 128
    1516:	02 c0       	rjmp	.+4      	; 0x151c <vfprintf+0xe0>
    1518:	88 36       	cpi	r24, 0x68	; 104
    151a:	59 f4       	brne	.+22     	; 0x1532 <vfprintf+0xf6>
    151c:	ec 85       	ldd	r30, Y+12	; 0x0c
    151e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1520:	93 fd       	sbrc	r25, 3
    1522:	85 91       	lpm	r24, Z+
    1524:	93 ff       	sbrs	r25, 3
    1526:	81 91       	ld	r24, Z+
    1528:	fd 87       	std	Y+13, r31	; 0x0d
    152a:	ec 87       	std	Y+12, r30	; 0x0c
    152c:	88 23       	and	r24, r24
    152e:	09 f0       	breq	.+2      	; 0x1532 <vfprintf+0xf6>
    1530:	b8 cf       	rjmp	.-144    	; 0x14a2 <vfprintf+0x66>
    1532:	98 2f       	mov	r25, r24
    1534:	95 54       	subi	r25, 0x45	; 69
    1536:	93 30       	cpi	r25, 0x03	; 3
    1538:	18 f0       	brcs	.+6      	; 0x1540 <vfprintf+0x104>
    153a:	90 52       	subi	r25, 0x20	; 32
    153c:	93 30       	cpi	r25, 0x03	; 3
    153e:	38 f4       	brcc	.+14     	; 0x154e <vfprintf+0x112>
    1540:	24 e0       	ldi	r18, 0x04	; 4
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	a2 0e       	add	r10, r18
    1546:	b3 1e       	adc	r11, r19
    1548:	3f e3       	ldi	r19, 0x3F	; 63
    154a:	39 83       	std	Y+1, r19	; 0x01
    154c:	0f c0       	rjmp	.+30     	; 0x156c <vfprintf+0x130>
    154e:	83 36       	cpi	r24, 0x63	; 99
    1550:	31 f0       	breq	.+12     	; 0x155e <vfprintf+0x122>
    1552:	83 37       	cpi	r24, 0x73	; 115
    1554:	81 f0       	breq	.+32     	; 0x1576 <vfprintf+0x13a>
    1556:	83 35       	cpi	r24, 0x53	; 83
    1558:	09 f0       	breq	.+2      	; 0x155c <vfprintf+0x120>
    155a:	5a c0       	rjmp	.+180    	; 0x1610 <vfprintf+0x1d4>
    155c:	22 c0       	rjmp	.+68     	; 0x15a2 <vfprintf+0x166>
    155e:	f5 01       	movw	r30, r10
    1560:	80 81       	ld	r24, Z
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	22 e0       	ldi	r18, 0x02	; 2
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	a2 0e       	add	r10, r18
    156a:	b3 1e       	adc	r11, r19
    156c:	21 e0       	ldi	r18, 0x01	; 1
    156e:	c2 2e       	mov	r12, r18
    1570:	d1 2c       	mov	r13, r1
    1572:	42 01       	movw	r8, r4
    1574:	14 c0       	rjmp	.+40     	; 0x159e <vfprintf+0x162>
    1576:	92 e0       	ldi	r25, 0x02	; 2
    1578:	29 2e       	mov	r2, r25
    157a:	31 2c       	mov	r3, r1
    157c:	2a 0c       	add	r2, r10
    157e:	3b 1c       	adc	r3, r11
    1580:	f5 01       	movw	r30, r10
    1582:	80 80       	ld	r8, Z
    1584:	91 80       	ldd	r9, Z+1	; 0x01
    1586:	16 ff       	sbrs	r17, 6
    1588:	03 c0       	rjmp	.+6      	; 0x1590 <vfprintf+0x154>
    158a:	6f 2d       	mov	r22, r15
    158c:	70 e0       	ldi	r23, 0x00	; 0
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <vfprintf+0x158>
    1590:	6f ef       	ldi	r22, 0xFF	; 255
    1592:	7f ef       	ldi	r23, 0xFF	; 255
    1594:	c4 01       	movw	r24, r8
    1596:	0e 94 21 0c 	call	0x1842	; 0x1842 <strnlen>
    159a:	6c 01       	movw	r12, r24
    159c:	51 01       	movw	r10, r2
    159e:	1f 77       	andi	r17, 0x7F	; 127
    15a0:	15 c0       	rjmp	.+42     	; 0x15cc <vfprintf+0x190>
    15a2:	82 e0       	ldi	r24, 0x02	; 2
    15a4:	28 2e       	mov	r2, r24
    15a6:	31 2c       	mov	r3, r1
    15a8:	2a 0c       	add	r2, r10
    15aa:	3b 1c       	adc	r3, r11
    15ac:	f5 01       	movw	r30, r10
    15ae:	80 80       	ld	r8, Z
    15b0:	91 80       	ldd	r9, Z+1	; 0x01
    15b2:	16 ff       	sbrs	r17, 6
    15b4:	03 c0       	rjmp	.+6      	; 0x15bc <vfprintf+0x180>
    15b6:	6f 2d       	mov	r22, r15
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <vfprintf+0x184>
    15bc:	6f ef       	ldi	r22, 0xFF	; 255
    15be:	7f ef       	ldi	r23, 0xFF	; 255
    15c0:	c4 01       	movw	r24, r8
    15c2:	0e 94 16 0c 	call	0x182c	; 0x182c <strnlen_P>
    15c6:	6c 01       	movw	r12, r24
    15c8:	10 68       	ori	r17, 0x80	; 128
    15ca:	51 01       	movw	r10, r2
    15cc:	13 fd       	sbrc	r17, 3
    15ce:	1c c0       	rjmp	.+56     	; 0x1608 <vfprintf+0x1cc>
    15d0:	06 c0       	rjmp	.+12     	; 0x15de <vfprintf+0x1a2>
    15d2:	80 e2       	ldi	r24, 0x20	; 32
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	b3 01       	movw	r22, r6
    15d8:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    15dc:	ea 94       	dec	r14
    15de:	8e 2d       	mov	r24, r14
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	c8 16       	cp	r12, r24
    15e4:	d9 06       	cpc	r13, r25
    15e6:	a8 f3       	brcs	.-22     	; 0x15d2 <vfprintf+0x196>
    15e8:	0f c0       	rjmp	.+30     	; 0x1608 <vfprintf+0x1cc>
    15ea:	f4 01       	movw	r30, r8
    15ec:	17 fd       	sbrc	r17, 7
    15ee:	85 91       	lpm	r24, Z+
    15f0:	17 ff       	sbrs	r17, 7
    15f2:	81 91       	ld	r24, Z+
    15f4:	4f 01       	movw	r8, r30
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	b3 01       	movw	r22, r6
    15fa:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    15fe:	e1 10       	cpse	r14, r1
    1600:	ea 94       	dec	r14
    1602:	08 94       	sec
    1604:	c1 08       	sbc	r12, r1
    1606:	d1 08       	sbc	r13, r1
    1608:	c1 14       	cp	r12, r1
    160a:	d1 04       	cpc	r13, r1
    160c:	71 f7       	brne	.-36     	; 0x15ea <vfprintf+0x1ae>
    160e:	e7 c0       	rjmp	.+462    	; 0x17de <vfprintf+0x3a2>
    1610:	84 36       	cpi	r24, 0x64	; 100
    1612:	11 f0       	breq	.+4      	; 0x1618 <vfprintf+0x1dc>
    1614:	89 36       	cpi	r24, 0x69	; 105
    1616:	51 f5       	brne	.+84     	; 0x166c <vfprintf+0x230>
    1618:	f5 01       	movw	r30, r10
    161a:	17 ff       	sbrs	r17, 7
    161c:	07 c0       	rjmp	.+14     	; 0x162c <vfprintf+0x1f0>
    161e:	80 81       	ld	r24, Z
    1620:	91 81       	ldd	r25, Z+1	; 0x01
    1622:	a2 81       	ldd	r26, Z+2	; 0x02
    1624:	b3 81       	ldd	r27, Z+3	; 0x03
    1626:	24 e0       	ldi	r18, 0x04	; 4
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	08 c0       	rjmp	.+16     	; 0x163c <vfprintf+0x200>
    162c:	80 81       	ld	r24, Z
    162e:	91 81       	ldd	r25, Z+1	; 0x01
    1630:	aa 27       	eor	r26, r26
    1632:	97 fd       	sbrc	r25, 7
    1634:	a0 95       	com	r26
    1636:	ba 2f       	mov	r27, r26
    1638:	22 e0       	ldi	r18, 0x02	; 2
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	a2 0e       	add	r10, r18
    163e:	b3 1e       	adc	r11, r19
    1640:	01 2f       	mov	r16, r17
    1642:	0f 76       	andi	r16, 0x6F	; 111
    1644:	b7 ff       	sbrs	r27, 7
    1646:	08 c0       	rjmp	.+16     	; 0x1658 <vfprintf+0x21c>
    1648:	b0 95       	com	r27
    164a:	a0 95       	com	r26
    164c:	90 95       	com	r25
    164e:	81 95       	neg	r24
    1650:	9f 4f       	sbci	r25, 0xFF	; 255
    1652:	af 4f       	sbci	r26, 0xFF	; 255
    1654:	bf 4f       	sbci	r27, 0xFF	; 255
    1656:	00 68       	ori	r16, 0x80	; 128
    1658:	bc 01       	movw	r22, r24
    165a:	cd 01       	movw	r24, r26
    165c:	a2 01       	movw	r20, r4
    165e:	2a e0       	ldi	r18, 0x0A	; 10
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <__ultoa_invert>
    1666:	d8 2e       	mov	r13, r24
    1668:	d4 18       	sub	r13, r4
    166a:	3f c0       	rjmp	.+126    	; 0x16ea <vfprintf+0x2ae>
    166c:	85 37       	cpi	r24, 0x75	; 117
    166e:	21 f4       	brne	.+8      	; 0x1678 <vfprintf+0x23c>
    1670:	1f 7e       	andi	r17, 0xEF	; 239
    1672:	2a e0       	ldi	r18, 0x0A	; 10
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	20 c0       	rjmp	.+64     	; 0x16b8 <vfprintf+0x27c>
    1678:	19 7f       	andi	r17, 0xF9	; 249
    167a:	8f 36       	cpi	r24, 0x6F	; 111
    167c:	a9 f0       	breq	.+42     	; 0x16a8 <vfprintf+0x26c>
    167e:	80 37       	cpi	r24, 0x70	; 112
    1680:	20 f4       	brcc	.+8      	; 0x168a <vfprintf+0x24e>
    1682:	88 35       	cpi	r24, 0x58	; 88
    1684:	09 f0       	breq	.+2      	; 0x1688 <vfprintf+0x24c>
    1686:	ae c0       	rjmp	.+348    	; 0x17e4 <vfprintf+0x3a8>
    1688:	0b c0       	rjmp	.+22     	; 0x16a0 <vfprintf+0x264>
    168a:	80 37       	cpi	r24, 0x70	; 112
    168c:	21 f0       	breq	.+8      	; 0x1696 <vfprintf+0x25a>
    168e:	88 37       	cpi	r24, 0x78	; 120
    1690:	09 f0       	breq	.+2      	; 0x1694 <vfprintf+0x258>
    1692:	a8 c0       	rjmp	.+336    	; 0x17e4 <vfprintf+0x3a8>
    1694:	01 c0       	rjmp	.+2      	; 0x1698 <vfprintf+0x25c>
    1696:	10 61       	ori	r17, 0x10	; 16
    1698:	14 ff       	sbrs	r17, 4
    169a:	09 c0       	rjmp	.+18     	; 0x16ae <vfprintf+0x272>
    169c:	14 60       	ori	r17, 0x04	; 4
    169e:	07 c0       	rjmp	.+14     	; 0x16ae <vfprintf+0x272>
    16a0:	14 ff       	sbrs	r17, 4
    16a2:	08 c0       	rjmp	.+16     	; 0x16b4 <vfprintf+0x278>
    16a4:	16 60       	ori	r17, 0x06	; 6
    16a6:	06 c0       	rjmp	.+12     	; 0x16b4 <vfprintf+0x278>
    16a8:	28 e0       	ldi	r18, 0x08	; 8
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	05 c0       	rjmp	.+10     	; 0x16b8 <vfprintf+0x27c>
    16ae:	20 e1       	ldi	r18, 0x10	; 16
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <vfprintf+0x27c>
    16b4:	20 e1       	ldi	r18, 0x10	; 16
    16b6:	32 e0       	ldi	r19, 0x02	; 2
    16b8:	f5 01       	movw	r30, r10
    16ba:	17 ff       	sbrs	r17, 7
    16bc:	07 c0       	rjmp	.+14     	; 0x16cc <vfprintf+0x290>
    16be:	60 81       	ld	r22, Z
    16c0:	71 81       	ldd	r23, Z+1	; 0x01
    16c2:	82 81       	ldd	r24, Z+2	; 0x02
    16c4:	93 81       	ldd	r25, Z+3	; 0x03
    16c6:	44 e0       	ldi	r20, 0x04	; 4
    16c8:	50 e0       	ldi	r21, 0x00	; 0
    16ca:	06 c0       	rjmp	.+12     	; 0x16d8 <vfprintf+0x29c>
    16cc:	60 81       	ld	r22, Z
    16ce:	71 81       	ldd	r23, Z+1	; 0x01
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	42 e0       	ldi	r20, 0x02	; 2
    16d6:	50 e0       	ldi	r21, 0x00	; 0
    16d8:	a4 0e       	add	r10, r20
    16da:	b5 1e       	adc	r11, r21
    16dc:	a2 01       	movw	r20, r4
    16de:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <__ultoa_invert>
    16e2:	d8 2e       	mov	r13, r24
    16e4:	d4 18       	sub	r13, r4
    16e6:	01 2f       	mov	r16, r17
    16e8:	0f 77       	andi	r16, 0x7F	; 127
    16ea:	06 ff       	sbrs	r16, 6
    16ec:	09 c0       	rjmp	.+18     	; 0x1700 <vfprintf+0x2c4>
    16ee:	0e 7f       	andi	r16, 0xFE	; 254
    16f0:	df 14       	cp	r13, r15
    16f2:	30 f4       	brcc	.+12     	; 0x1700 <vfprintf+0x2c4>
    16f4:	04 ff       	sbrs	r16, 4
    16f6:	06 c0       	rjmp	.+12     	; 0x1704 <vfprintf+0x2c8>
    16f8:	02 fd       	sbrc	r16, 2
    16fa:	04 c0       	rjmp	.+8      	; 0x1704 <vfprintf+0x2c8>
    16fc:	0f 7e       	andi	r16, 0xEF	; 239
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <vfprintf+0x2c8>
    1700:	1d 2d       	mov	r17, r13
    1702:	01 c0       	rjmp	.+2      	; 0x1706 <vfprintf+0x2ca>
    1704:	1f 2d       	mov	r17, r15
    1706:	80 2f       	mov	r24, r16
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	04 ff       	sbrs	r16, 4
    170c:	0c c0       	rjmp	.+24     	; 0x1726 <vfprintf+0x2ea>
    170e:	fe 01       	movw	r30, r28
    1710:	ed 0d       	add	r30, r13
    1712:	f1 1d       	adc	r31, r1
    1714:	20 81       	ld	r18, Z
    1716:	20 33       	cpi	r18, 0x30	; 48
    1718:	11 f4       	brne	.+4      	; 0x171e <vfprintf+0x2e2>
    171a:	09 7e       	andi	r16, 0xE9	; 233
    171c:	09 c0       	rjmp	.+18     	; 0x1730 <vfprintf+0x2f4>
    171e:	02 ff       	sbrs	r16, 2
    1720:	06 c0       	rjmp	.+12     	; 0x172e <vfprintf+0x2f2>
    1722:	1e 5f       	subi	r17, 0xFE	; 254
    1724:	05 c0       	rjmp	.+10     	; 0x1730 <vfprintf+0x2f4>
    1726:	86 78       	andi	r24, 0x86	; 134
    1728:	90 70       	andi	r25, 0x00	; 0
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	09 f0       	breq	.+2      	; 0x1730 <vfprintf+0x2f4>
    172e:	1f 5f       	subi	r17, 0xFF	; 255
    1730:	80 2e       	mov	r8, r16
    1732:	99 24       	eor	r9, r9
    1734:	03 fd       	sbrc	r16, 3
    1736:	12 c0       	rjmp	.+36     	; 0x175c <vfprintf+0x320>
    1738:	00 ff       	sbrs	r16, 0
    173a:	0d c0       	rjmp	.+26     	; 0x1756 <vfprintf+0x31a>
    173c:	fd 2c       	mov	r15, r13
    173e:	1e 15       	cp	r17, r14
    1740:	50 f4       	brcc	.+20     	; 0x1756 <vfprintf+0x31a>
    1742:	fe 0c       	add	r15, r14
    1744:	f1 1a       	sub	r15, r17
    1746:	1e 2d       	mov	r17, r14
    1748:	06 c0       	rjmp	.+12     	; 0x1756 <vfprintf+0x31a>
    174a:	80 e2       	ldi	r24, 0x20	; 32
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	b3 01       	movw	r22, r6
    1750:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    1754:	1f 5f       	subi	r17, 0xFF	; 255
    1756:	1e 15       	cp	r17, r14
    1758:	c0 f3       	brcs	.-16     	; 0x174a <vfprintf+0x30e>
    175a:	04 c0       	rjmp	.+8      	; 0x1764 <vfprintf+0x328>
    175c:	1e 15       	cp	r17, r14
    175e:	10 f4       	brcc	.+4      	; 0x1764 <vfprintf+0x328>
    1760:	e1 1a       	sub	r14, r17
    1762:	01 c0       	rjmp	.+2      	; 0x1766 <vfprintf+0x32a>
    1764:	ee 24       	eor	r14, r14
    1766:	84 fe       	sbrs	r8, 4
    1768:	0f c0       	rjmp	.+30     	; 0x1788 <vfprintf+0x34c>
    176a:	80 e3       	ldi	r24, 0x30	; 48
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	b3 01       	movw	r22, r6
    1770:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    1774:	82 fe       	sbrs	r8, 2
    1776:	1f c0       	rjmp	.+62     	; 0x17b6 <vfprintf+0x37a>
    1778:	81 fe       	sbrs	r8, 1
    177a:	03 c0       	rjmp	.+6      	; 0x1782 <vfprintf+0x346>
    177c:	88 e5       	ldi	r24, 0x58	; 88
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	10 c0       	rjmp	.+32     	; 0x17a2 <vfprintf+0x366>
    1782:	88 e7       	ldi	r24, 0x78	; 120
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	0d c0       	rjmp	.+26     	; 0x17a2 <vfprintf+0x366>
    1788:	c4 01       	movw	r24, r8
    178a:	86 78       	andi	r24, 0x86	; 134
    178c:	90 70       	andi	r25, 0x00	; 0
    178e:	00 97       	sbiw	r24, 0x00	; 0
    1790:	91 f0       	breq	.+36     	; 0x17b6 <vfprintf+0x37a>
    1792:	81 fc       	sbrc	r8, 1
    1794:	02 c0       	rjmp	.+4      	; 0x179a <vfprintf+0x35e>
    1796:	80 e2       	ldi	r24, 0x20	; 32
    1798:	01 c0       	rjmp	.+2      	; 0x179c <vfprintf+0x360>
    179a:	8b e2       	ldi	r24, 0x2B	; 43
    179c:	07 fd       	sbrc	r16, 7
    179e:	8d e2       	ldi	r24, 0x2D	; 45
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	b3 01       	movw	r22, r6
    17a4:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    17a8:	06 c0       	rjmp	.+12     	; 0x17b6 <vfprintf+0x37a>
    17aa:	80 e3       	ldi	r24, 0x30	; 48
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	b3 01       	movw	r22, r6
    17b0:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    17b4:	fa 94       	dec	r15
    17b6:	df 14       	cp	r13, r15
    17b8:	c0 f3       	brcs	.-16     	; 0x17aa <vfprintf+0x36e>
    17ba:	da 94       	dec	r13
    17bc:	f2 01       	movw	r30, r4
    17be:	ed 0d       	add	r30, r13
    17c0:	f1 1d       	adc	r31, r1
    17c2:	80 81       	ld	r24, Z
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	b3 01       	movw	r22, r6
    17c8:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    17cc:	dd 20       	and	r13, r13
    17ce:	a9 f7       	brne	.-22     	; 0x17ba <vfprintf+0x37e>
    17d0:	06 c0       	rjmp	.+12     	; 0x17de <vfprintf+0x3a2>
    17d2:	80 e2       	ldi	r24, 0x20	; 32
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	b3 01       	movw	r22, r6
    17d8:	0e 94 2c 0c 	call	0x1858	; 0x1858 <fputc>
    17dc:	ea 94       	dec	r14
    17de:	ee 20       	and	r14, r14
    17e0:	c1 f7       	brne	.-16     	; 0x17d2 <vfprintf+0x396>
    17e2:	40 ce       	rjmp	.-896    	; 0x1464 <vfprintf+0x28>
    17e4:	f3 01       	movw	r30, r6
    17e6:	86 81       	ldd	r24, Z+6	; 0x06
    17e8:	97 81       	ldd	r25, Z+7	; 0x07
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <vfprintf+0x3b4>
    17ec:	8f ef       	ldi	r24, 0xFF	; 255
    17ee:	9f ef       	ldi	r25, 0xFF	; 255
    17f0:	2d 96       	adiw	r28, 0x0d	; 13
    17f2:	e2 e1       	ldi	r30, 0x12	; 18
    17f4:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__epilogue_restores__>

000017f8 <__eerd_byte_m328p>:
    17f8:	f9 99       	sbic	0x1f, 1	; 31
    17fa:	fe cf       	rjmp	.-4      	; 0x17f8 <__eerd_byte_m328p>
    17fc:	92 bd       	out	0x22, r25	; 34
    17fe:	81 bd       	out	0x21, r24	; 33
    1800:	f8 9a       	sbi	0x1f, 0	; 31
    1802:	99 27       	eor	r25, r25
    1804:	80 b5       	in	r24, 0x20	; 32
    1806:	08 95       	ret

00001808 <__eeupd_byte_m328p>:
    1808:	26 2f       	mov	r18, r22

0000180a <__eeupd_r18_m328p>:
    180a:	f9 99       	sbic	0x1f, 1	; 31
    180c:	fe cf       	rjmp	.-4      	; 0x180a <__eeupd_r18_m328p>
    180e:	92 bd       	out	0x22, r25	; 34
    1810:	81 bd       	out	0x21, r24	; 33
    1812:	f8 9a       	sbi	0x1f, 0	; 31
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	00 b4       	in	r0, 0x20	; 32
    1818:	02 16       	cp	r0, r18
    181a:	39 f0       	breq	.+14     	; 0x182a <__eeupd_r18_m328p+0x20>
    181c:	1f ba       	out	0x1f, r1	; 31
    181e:	20 bd       	out	0x20, r18	; 32
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	f8 94       	cli
    1824:	fa 9a       	sbi	0x1f, 2	; 31
    1826:	f9 9a       	sbi	0x1f, 1	; 31
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	08 95       	ret

0000182c <strnlen_P>:
    182c:	fc 01       	movw	r30, r24
    182e:	05 90       	lpm	r0, Z+
    1830:	61 50       	subi	r22, 0x01	; 1
    1832:	70 40       	sbci	r23, 0x00	; 0
    1834:	01 10       	cpse	r0, r1
    1836:	d8 f7       	brcc	.-10     	; 0x182e <strnlen_P+0x2>
    1838:	80 95       	com	r24
    183a:	90 95       	com	r25
    183c:	8e 0f       	add	r24, r30
    183e:	9f 1f       	adc	r25, r31
    1840:	08 95       	ret

00001842 <strnlen>:
    1842:	fc 01       	movw	r30, r24
    1844:	61 50       	subi	r22, 0x01	; 1
    1846:	70 40       	sbci	r23, 0x00	; 0
    1848:	01 90       	ld	r0, Z+
    184a:	01 10       	cpse	r0, r1
    184c:	d8 f7       	brcc	.-10     	; 0x1844 <strnlen+0x2>
    184e:	80 95       	com	r24
    1850:	90 95       	com	r25
    1852:	8e 0f       	add	r24, r30
    1854:	9f 1f       	adc	r25, r31
    1856:	08 95       	ret

00001858 <fputc>:
    1858:	0f 93       	push	r16
    185a:	1f 93       	push	r17
    185c:	cf 93       	push	r28
    185e:	df 93       	push	r29
    1860:	8c 01       	movw	r16, r24
    1862:	eb 01       	movw	r28, r22
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	81 ff       	sbrs	r24, 1
    1868:	1b c0       	rjmp	.+54     	; 0x18a0 <fputc+0x48>
    186a:	82 ff       	sbrs	r24, 2
    186c:	0d c0       	rjmp	.+26     	; 0x1888 <fputc+0x30>
    186e:	2e 81       	ldd	r18, Y+6	; 0x06
    1870:	3f 81       	ldd	r19, Y+7	; 0x07
    1872:	8c 81       	ldd	r24, Y+4	; 0x04
    1874:	9d 81       	ldd	r25, Y+5	; 0x05
    1876:	28 17       	cp	r18, r24
    1878:	39 07       	cpc	r19, r25
    187a:	64 f4       	brge	.+24     	; 0x1894 <fputc+0x3c>
    187c:	e8 81       	ld	r30, Y
    187e:	f9 81       	ldd	r31, Y+1	; 0x01
    1880:	01 93       	st	Z+, r16
    1882:	f9 83       	std	Y+1, r31	; 0x01
    1884:	e8 83       	st	Y, r30
    1886:	06 c0       	rjmp	.+12     	; 0x1894 <fputc+0x3c>
    1888:	e8 85       	ldd	r30, Y+8	; 0x08
    188a:	f9 85       	ldd	r31, Y+9	; 0x09
    188c:	80 2f       	mov	r24, r16
    188e:	09 95       	icall
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	31 f4       	brne	.+12     	; 0x18a0 <fputc+0x48>
    1894:	8e 81       	ldd	r24, Y+6	; 0x06
    1896:	9f 81       	ldd	r25, Y+7	; 0x07
    1898:	01 96       	adiw	r24, 0x01	; 1
    189a:	9f 83       	std	Y+7, r25	; 0x07
    189c:	8e 83       	std	Y+6, r24	; 0x06
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <fputc+0x4c>
    18a0:	0f ef       	ldi	r16, 0xFF	; 255
    18a2:	1f ef       	ldi	r17, 0xFF	; 255
    18a4:	c8 01       	movw	r24, r16
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	1f 91       	pop	r17
    18ac:	0f 91       	pop	r16
    18ae:	08 95       	ret

000018b0 <__ultoa_invert>:
    18b0:	fa 01       	movw	r30, r20
    18b2:	aa 27       	eor	r26, r26
    18b4:	28 30       	cpi	r18, 0x08	; 8
    18b6:	51 f1       	breq	.+84     	; 0x190c <__ultoa_invert+0x5c>
    18b8:	20 31       	cpi	r18, 0x10	; 16
    18ba:	81 f1       	breq	.+96     	; 0x191c <__ultoa_invert+0x6c>
    18bc:	e8 94       	clt
    18be:	6f 93       	push	r22
    18c0:	6e 7f       	andi	r22, 0xFE	; 254
    18c2:	6e 5f       	subi	r22, 0xFE	; 254
    18c4:	7f 4f       	sbci	r23, 0xFF	; 255
    18c6:	8f 4f       	sbci	r24, 0xFF	; 255
    18c8:	9f 4f       	sbci	r25, 0xFF	; 255
    18ca:	af 4f       	sbci	r26, 0xFF	; 255
    18cc:	b1 e0       	ldi	r27, 0x01	; 1
    18ce:	3e d0       	rcall	.+124    	; 0x194c <__ultoa_invert+0x9c>
    18d0:	b4 e0       	ldi	r27, 0x04	; 4
    18d2:	3c d0       	rcall	.+120    	; 0x194c <__ultoa_invert+0x9c>
    18d4:	67 0f       	add	r22, r23
    18d6:	78 1f       	adc	r23, r24
    18d8:	89 1f       	adc	r24, r25
    18da:	9a 1f       	adc	r25, r26
    18dc:	a1 1d       	adc	r26, r1
    18de:	68 0f       	add	r22, r24
    18e0:	79 1f       	adc	r23, r25
    18e2:	8a 1f       	adc	r24, r26
    18e4:	91 1d       	adc	r25, r1
    18e6:	a1 1d       	adc	r26, r1
    18e8:	6a 0f       	add	r22, r26
    18ea:	71 1d       	adc	r23, r1
    18ec:	81 1d       	adc	r24, r1
    18ee:	91 1d       	adc	r25, r1
    18f0:	a1 1d       	adc	r26, r1
    18f2:	20 d0       	rcall	.+64     	; 0x1934 <__ultoa_invert+0x84>
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <__ultoa_invert+0x48>
    18f6:	68 94       	set
    18f8:	3f 91       	pop	r19
    18fa:	2a e0       	ldi	r18, 0x0A	; 10
    18fc:	26 9f       	mul	r18, r22
    18fe:	11 24       	eor	r1, r1
    1900:	30 19       	sub	r19, r0
    1902:	30 5d       	subi	r19, 0xD0	; 208
    1904:	31 93       	st	Z+, r19
    1906:	de f6       	brtc	.-74     	; 0x18be <__ultoa_invert+0xe>
    1908:	cf 01       	movw	r24, r30
    190a:	08 95       	ret
    190c:	46 2f       	mov	r20, r22
    190e:	47 70       	andi	r20, 0x07	; 7
    1910:	40 5d       	subi	r20, 0xD0	; 208
    1912:	41 93       	st	Z+, r20
    1914:	b3 e0       	ldi	r27, 0x03	; 3
    1916:	0f d0       	rcall	.+30     	; 0x1936 <__ultoa_invert+0x86>
    1918:	c9 f7       	brne	.-14     	; 0x190c <__ultoa_invert+0x5c>
    191a:	f6 cf       	rjmp	.-20     	; 0x1908 <__ultoa_invert+0x58>
    191c:	46 2f       	mov	r20, r22
    191e:	4f 70       	andi	r20, 0x0F	; 15
    1920:	40 5d       	subi	r20, 0xD0	; 208
    1922:	4a 33       	cpi	r20, 0x3A	; 58
    1924:	18 f0       	brcs	.+6      	; 0x192c <__ultoa_invert+0x7c>
    1926:	49 5d       	subi	r20, 0xD9	; 217
    1928:	31 fd       	sbrc	r19, 1
    192a:	40 52       	subi	r20, 0x20	; 32
    192c:	41 93       	st	Z+, r20
    192e:	02 d0       	rcall	.+4      	; 0x1934 <__ultoa_invert+0x84>
    1930:	a9 f7       	brne	.-22     	; 0x191c <__ultoa_invert+0x6c>
    1932:	ea cf       	rjmp	.-44     	; 0x1908 <__ultoa_invert+0x58>
    1934:	b4 e0       	ldi	r27, 0x04	; 4
    1936:	a6 95       	lsr	r26
    1938:	97 95       	ror	r25
    193a:	87 95       	ror	r24
    193c:	77 95       	ror	r23
    193e:	67 95       	ror	r22
    1940:	ba 95       	dec	r27
    1942:	c9 f7       	brne	.-14     	; 0x1936 <__ultoa_invert+0x86>
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	61 05       	cpc	r22, r1
    1948:	71 05       	cpc	r23, r1
    194a:	08 95       	ret
    194c:	9b 01       	movw	r18, r22
    194e:	ac 01       	movw	r20, r24
    1950:	0a 2e       	mov	r0, r26
    1952:	06 94       	lsr	r0
    1954:	57 95       	ror	r21
    1956:	47 95       	ror	r20
    1958:	37 95       	ror	r19
    195a:	27 95       	ror	r18
    195c:	ba 95       	dec	r27
    195e:	c9 f7       	brne	.-14     	; 0x1952 <__ultoa_invert+0xa2>
    1960:	62 0f       	add	r22, r18
    1962:	73 1f       	adc	r23, r19
    1964:	84 1f       	adc	r24, r20
    1966:	95 1f       	adc	r25, r21
    1968:	a0 1d       	adc	r26, r0
    196a:	08 95       	ret

0000196c <__prologue_saves__>:
    196c:	2f 92       	push	r2
    196e:	3f 92       	push	r3
    1970:	4f 92       	push	r4
    1972:	5f 92       	push	r5
    1974:	6f 92       	push	r6
    1976:	7f 92       	push	r7
    1978:	8f 92       	push	r8
    197a:	9f 92       	push	r9
    197c:	af 92       	push	r10
    197e:	bf 92       	push	r11
    1980:	cf 92       	push	r12
    1982:	df 92       	push	r13
    1984:	ef 92       	push	r14
    1986:	ff 92       	push	r15
    1988:	0f 93       	push	r16
    198a:	1f 93       	push	r17
    198c:	cf 93       	push	r28
    198e:	df 93       	push	r29
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    1994:	ca 1b       	sub	r28, r26
    1996:	db 0b       	sbc	r29, r27
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	cd bf       	out	0x3d, r28	; 61
    19a2:	09 94       	ijmp

000019a4 <__epilogue_restores__>:
    19a4:	2a 88       	ldd	r2, Y+18	; 0x12
    19a6:	39 88       	ldd	r3, Y+17	; 0x11
    19a8:	48 88       	ldd	r4, Y+16	; 0x10
    19aa:	5f 84       	ldd	r5, Y+15	; 0x0f
    19ac:	6e 84       	ldd	r6, Y+14	; 0x0e
    19ae:	7d 84       	ldd	r7, Y+13	; 0x0d
    19b0:	8c 84       	ldd	r8, Y+12	; 0x0c
    19b2:	9b 84       	ldd	r9, Y+11	; 0x0b
    19b4:	aa 84       	ldd	r10, Y+10	; 0x0a
    19b6:	b9 84       	ldd	r11, Y+9	; 0x09
    19b8:	c8 84       	ldd	r12, Y+8	; 0x08
    19ba:	df 80       	ldd	r13, Y+7	; 0x07
    19bc:	ee 80       	ldd	r14, Y+6	; 0x06
    19be:	fd 80       	ldd	r15, Y+5	; 0x05
    19c0:	0c 81       	ldd	r16, Y+4	; 0x04
    19c2:	1b 81       	ldd	r17, Y+3	; 0x03
    19c4:	aa 81       	ldd	r26, Y+2	; 0x02
    19c6:	b9 81       	ldd	r27, Y+1	; 0x01
    19c8:	ce 0f       	add	r28, r30
    19ca:	d1 1d       	adc	r29, r1
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	f8 94       	cli
    19d0:	de bf       	out	0x3e, r29	; 62
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	cd bf       	out	0x3d, r28	; 61
    19d6:	ed 01       	movw	r28, r26
    19d8:	08 95       	ret

000019da <_exit>:
    19da:	f8 94       	cli

000019dc <__stop_program>:
    19dc:	ff cf       	rjmp	.-2      	; 0x19dc <__stop_program>
