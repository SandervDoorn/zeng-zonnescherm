
Besturingseenheid.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  000012fc  00001390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080013a  0080013a  000013ca  2**0
                  ALLOC
  3 .stab         00002a00  00000000  00000000  000013cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008fb  00000000  00000000  00003dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000046c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001710  00000000  00000000  00004888  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009fb  00000000  00000000  00005f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ff1  00000000  00000000  00006993  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000404  00000000  00000000  00007984  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c9  00000000  00000000  00007d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c14  00000000  00000000  00008251  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00008e65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec ef       	ldi	r30, 0xFC	; 252
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 33       	cpi	r26, 0x3A	; 58
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	aa e3       	ldi	r26, 0x3A	; 58
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a3 34       	cpi	r26, 0x43	; 67
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 94 02 	call	0x528	; 0x528 <main>
      9e:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_ports>:
const uint8_t data = 0;
const uint8_t clock = 1;
const uint8_t strobe = 2;

void init_ports(void)
{
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
	//Set PORTB on output for display
	DDRB = 0xff;
      ae:	84 e2       	ldi	r24, 0x24	; 36
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	2f ef       	ldi	r18, 0xFF	; 255
      b4:	fc 01       	movw	r30, r24
      b6:	20 83       	st	Z, r18
		
	//Set PD0 (Trigger) to output and PD3 (Echo) to input
	DDRD = 0b00000100;
      b8:	8a e2       	ldi	r24, 0x2A	; 42
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	24 e0       	ldi	r18, 0x04	; 4
      be:	fc 01       	movw	r30, r24
      c0:	20 83       	st	Z, r18
}
      c2:	df 91       	pop	r29
      c4:	cf 91       	pop	r28
      c6:	08 95       	ret

000000c8 <init_timer>:

void init_timer(void)
// prescaling : max time = 2^16/16E6 = 4.1 ms, 4.1 >> 2.3, so no prescaling required
// normal mode, no prescale, stop timer
{
      c8:	cf 93       	push	r28
      ca:	df 93       	push	r29
      cc:	cd b7       	in	r28, 0x3d	; 61
      ce:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
      d0:	80 e8       	ldi	r24, 0x80	; 128
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	fc 01       	movw	r30, r24
      d6:	10 82       	st	Z, r1
	TCCR1B = _BV(CS10);
      d8:	81 e8       	ldi	r24, 0x81	; 129
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	21 e0       	ldi	r18, 0x01	; 1
      de:	fc 01       	movw	r30, r24
      e0:	20 83       	st	Z, r18
}
      e2:	df 91       	pop	r29
      e4:	cf 91       	pop	r28
      e6:	08 95       	ret

000000e8 <stop_timer>:

void stop_timer()
{
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
      ec:	cd b7       	in	r28, 0x3d	; 61
      ee:	de b7       	in	r29, 0x3e	; 62
	//Stop timer and reset value
	TCCR1B = 0;
      f0:	81 e8       	ldi	r24, 0x81	; 129
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	fc 01       	movw	r30, r24
      f6:	10 82       	st	Z, r1
	TCNT1 = 0;
      f8:	84 e8       	ldi	r24, 0x84	; 132
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	fc 01       	movw	r30, r24
      fe:	11 82       	std	Z+1, r1	; 0x01
     100:	10 82       	st	Z, r1
}
     102:	df 91       	pop	r29
     104:	cf 91       	pop	r28
     106:	08 95       	ret

00000108 <init_ext_int>:

void init_ext_int(void)
{
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
	// any change triggers ext interrupt 1
	EICRA = (1 << ISC10);
     110:	89 e6       	ldi	r24, 0x69	; 105
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	24 e0       	ldi	r18, 0x04	; 4
     116:	fc 01       	movw	r30, r24
     118:	20 83       	st	Z, r18
	EIMSK = (1 << INT1);
     11a:	8d e3       	ldi	r24, 0x3D	; 61
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	22 e0       	ldi	r18, 0x02	; 2
     120:	fc 01       	movw	r30, r24
     122:	20 83       	st	Z, r18
}
     124:	df 91       	pop	r29
     126:	cf 91       	pop	r28
     128:	08 95       	ret

0000012a <calc_cm>:

uint16_t calc_cm(uint16_t counter)
{
     12a:	cf 93       	push	r28
     12c:	df 93       	push	r29
     12e:	00 d0       	rcall	.+0      	; 0x130 <calc_cm+0x6>
     130:	cd b7       	in	r28, 0x3d	; 61
     132:	de b7       	in	r29, 0x3e	; 62
     134:	9a 83       	std	Y+2, r25	; 0x02
     136:	89 83       	std	Y+1, r24	; 0x01
	/* First set cycles to uS and divide by 58 to get cm */
	return counter / 16 / 58;
     138:	89 81       	ldd	r24, Y+1	; 0x01
     13a:	9a 81       	ldd	r25, Y+2	; 0x02
     13c:	20 ea       	ldi	r18, 0xA0	; 160
     13e:	33 e0       	ldi	r19, 0x03	; 3
     140:	b9 01       	movw	r22, r18
     142:	0e 94 70 06 	call	0xce0	; 0xce0 <__udivmodhi4>
     146:	9b 01       	movw	r18, r22
     148:	c9 01       	movw	r24, r18
}
     14a:	0f 90       	pop	r0
     14c:	0f 90       	pop	r0
     14e:	df 91       	pop	r29
     150:	cf 91       	pop	r28
     152:	08 95       	ret

00000154 <sendPulse>:

void sendPulse()
{
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	68 97       	sbiw	r28, 0x18	; 24
     162:	0f b6       	in	r0, 0x3f	; 63
     164:	f8 94       	cli
     166:	de bf       	out	0x3e, r29	; 62
     168:	0f be       	out	0x3f, r0	; 63
     16a:	cd bf       	out	0x3d, r28	; 61
	PORTD = 4;
     16c:	8b e2       	ldi	r24, 0x2B	; 43
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	24 e0       	ldi	r18, 0x04	; 4
     172:	fc 01       	movw	r30, r24
     174:	20 83       	st	Z, r18
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	a0 e2       	ldi	r26, 0x20	; 32
     17c:	b1 e4       	ldi	r27, 0x41	; 65
     17e:	89 83       	std	Y+1, r24	; 0x01
     180:	9a 83       	std	Y+2, r25	; 0x02
     182:	ab 83       	std	Y+3, r26	; 0x03
     184:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 3e6) * __us;
     186:	69 81       	ldd	r22, Y+1	; 0x01
     188:	7a 81       	ldd	r23, Y+2	; 0x02
     18a:	8b 81       	ldd	r24, Y+3	; 0x03
     18c:	9c 81       	ldd	r25, Y+4	; 0x04
     18e:	2b ea       	ldi	r18, 0xAB	; 171
     190:	3a ea       	ldi	r19, 0xAA	; 170
     192:	4a ea       	ldi	r20, 0xAA	; 170
     194:	50 e4       	ldi	r21, 0x40	; 64
     196:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__mulsf3>
     19a:	dc 01       	movw	r26, r24
     19c:	cb 01       	movw	r24, r22
     19e:	8d 83       	std	Y+5, r24	; 0x05
     1a0:	9e 83       	std	Y+6, r25	; 0x06
     1a2:	af 83       	std	Y+7, r26	; 0x07
     1a4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     1a6:	11 e0       	ldi	r17, 0x01	; 1
     1a8:	6d 81       	ldd	r22, Y+5	; 0x05
     1aa:	7e 81       	ldd	r23, Y+6	; 0x06
     1ac:	8f 81       	ldd	r24, Y+7	; 0x07
     1ae:	98 85       	ldd	r25, Y+8	; 0x08
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e8       	ldi	r20, 0x80	; 128
     1b6:	5f e3       	ldi	r21, 0x3F	; 63
     1b8:	0e 94 ba 04 	call	0x974	; 0x974 <__cmpsf2>
     1bc:	88 23       	and	r24, r24
     1be:	0c f0       	brlt	.+2      	; 0x1c2 <sendPulse+0x6e>
     1c0:	10 e0       	ldi	r17, 0x00	; 0
     1c2:	11 23       	and	r17, r17
     1c4:	19 f0       	breq	.+6      	; 0x1cc <sendPulse+0x78>
		__ticks = 1;
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	89 87       	std	Y+9, r24	; 0x09
     1ca:	a3 c0       	rjmp	.+326    	; 0x312 <sendPulse+0x1be>
	else if (__tmp > 255)
     1cc:	11 e0       	ldi	r17, 0x01	; 1
     1ce:	6d 81       	ldd	r22, Y+5	; 0x05
     1d0:	7e 81       	ldd	r23, Y+6	; 0x06
     1d2:	8f 81       	ldd	r24, Y+7	; 0x07
     1d4:	98 85       	ldd	r25, Y+8	; 0x08
     1d6:	20 e0       	ldi	r18, 0x00	; 0
     1d8:	30 e0       	ldi	r19, 0x00	; 0
     1da:	4f e7       	ldi	r20, 0x7F	; 127
     1dc:	53 e4       	ldi	r21, 0x43	; 67
     1de:	0e 94 09 06 	call	0xc12	; 0xc12 <__gesf2>
     1e2:	18 16       	cp	r1, r24
     1e4:	0c f0       	brlt	.+2      	; 0x1e8 <sendPulse+0x94>
     1e6:	10 e0       	ldi	r17, 0x00	; 0
     1e8:	11 23       	and	r17, r17
     1ea:	09 f4       	brne	.+2      	; 0x1ee <sendPulse+0x9a>
     1ec:	89 c0       	rjmp	.+274    	; 0x300 <sendPulse+0x1ac>
	{
		_delay_ms(__us / 1000.0);
     1ee:	69 81       	ldd	r22, Y+1	; 0x01
     1f0:	7a 81       	ldd	r23, Y+2	; 0x02
     1f2:	8b 81       	ldd	r24, Y+3	; 0x03
     1f4:	9c 81       	ldd	r25, Y+4	; 0x04
     1f6:	20 e0       	ldi	r18, 0x00	; 0
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	4a e7       	ldi	r20, 0x7A	; 122
     1fc:	54 e4       	ldi	r21, 0x44	; 68
     1fe:	0e 94 be 04 	call	0x97c	; 0x97c <__divsf3>
     202:	dc 01       	movw	r26, r24
     204:	cb 01       	movw	r24, r22
     206:	8a 87       	std	Y+10, r24	; 0x0a
     208:	9b 87       	std	Y+11, r25	; 0x0b
     20a:	ac 87       	std	Y+12, r26	; 0x0c
     20c:	bd 87       	std	Y+13, r27	; 0x0d
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     20e:	6a 85       	ldd	r22, Y+10	; 0x0a
     210:	7b 85       	ldd	r23, Y+11	; 0x0b
     212:	8c 85       	ldd	r24, Y+12	; 0x0c
     214:	9d 85       	ldd	r25, Y+13	; 0x0d
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	4a e7       	ldi	r20, 0x7A	; 122
     21c:	55 e4       	ldi	r21, 0x45	; 69
     21e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__mulsf3>
     222:	dc 01       	movw	r26, r24
     224:	cb 01       	movw	r24, r22
     226:	8e 87       	std	Y+14, r24	; 0x0e
     228:	9f 87       	std	Y+15, r25	; 0x0f
     22a:	a8 8b       	std	Y+16, r26	; 0x10
     22c:	b9 8b       	std	Y+17, r27	; 0x11
	if (__tmp < 1.0)
     22e:	11 e0       	ldi	r17, 0x01	; 1
     230:	6e 85       	ldd	r22, Y+14	; 0x0e
     232:	7f 85       	ldd	r23, Y+15	; 0x0f
     234:	88 89       	ldd	r24, Y+16	; 0x10
     236:	99 89       	ldd	r25, Y+17	; 0x11
     238:	20 e0       	ldi	r18, 0x00	; 0
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	40 e8       	ldi	r20, 0x80	; 128
     23e:	5f e3       	ldi	r21, 0x3F	; 63
     240:	0e 94 ba 04 	call	0x974	; 0x974 <__cmpsf2>
     244:	88 23       	and	r24, r24
     246:	0c f0       	brlt	.+2      	; 0x24a <sendPulse+0xf6>
     248:	10 e0       	ldi	r17, 0x00	; 0
     24a:	11 23       	and	r17, r17
     24c:	29 f0       	breq	.+10     	; 0x258 <sendPulse+0x104>
		__ticks = 1;
     24e:	81 e0       	ldi	r24, 0x01	; 1
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	9b 8b       	std	Y+19, r25	; 0x13
     254:	8a 8b       	std	Y+18, r24	; 0x12
     256:	46 c0       	rjmp	.+140    	; 0x2e4 <sendPulse+0x190>
	else if (__tmp > 65535)
     258:	11 e0       	ldi	r17, 0x01	; 1
     25a:	6e 85       	ldd	r22, Y+14	; 0x0e
     25c:	7f 85       	ldd	r23, Y+15	; 0x0f
     25e:	88 89       	ldd	r24, Y+16	; 0x10
     260:	99 89       	ldd	r25, Y+17	; 0x11
     262:	20 e0       	ldi	r18, 0x00	; 0
     264:	3f ef       	ldi	r19, 0xFF	; 255
     266:	4f e7       	ldi	r20, 0x7F	; 127
     268:	57 e4       	ldi	r21, 0x47	; 71
     26a:	0e 94 09 06 	call	0xc12	; 0xc12 <__gesf2>
     26e:	18 16       	cp	r1, r24
     270:	0c f0       	brlt	.+2      	; 0x274 <sendPulse+0x120>
     272:	10 e0       	ldi	r17, 0x00	; 0
     274:	11 23       	and	r17, r17
     276:	61 f1       	breq	.+88     	; 0x2d0 <sendPulse+0x17c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     278:	6a 85       	ldd	r22, Y+10	; 0x0a
     27a:	7b 85       	ldd	r23, Y+11	; 0x0b
     27c:	8c 85       	ldd	r24, Y+12	; 0x0c
     27e:	9d 85       	ldd	r25, Y+13	; 0x0d
     280:	20 e0       	ldi	r18, 0x00	; 0
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	40 e2       	ldi	r20, 0x20	; 32
     286:	51 e4       	ldi	r21, 0x41	; 65
     288:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__mulsf3>
     28c:	dc 01       	movw	r26, r24
     28e:	cb 01       	movw	r24, r22
     290:	bc 01       	movw	r22, r24
     292:	cd 01       	movw	r24, r26
     294:	0e 94 2b 05 	call	0xa56	; 0xa56 <__fixunssfsi>
     298:	dc 01       	movw	r26, r24
     29a:	cb 01       	movw	r24, r22
     29c:	9b 8b       	std	Y+19, r25	; 0x13
     29e:	8a 8b       	std	Y+18, r24	; 0x12
     2a0:	12 c0       	rjmp	.+36     	; 0x2c6 <sendPulse+0x172>
     2a2:	80 e9       	ldi	r24, 0x90	; 144
     2a4:	91 e0       	ldi	r25, 0x01	; 1
     2a6:	9d 8b       	std	Y+21, r25	; 0x15
     2a8:	8c 8b       	std	Y+20, r24	; 0x14
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     2aa:	8c 89       	ldd	r24, Y+20	; 0x14
     2ac:	9d 89       	ldd	r25, Y+21	; 0x15
     2ae:	8c 01       	movw	r16, r24
     2b0:	c8 01       	movw	r24, r16
     2b2:	01 97       	sbiw	r24, 0x01	; 1
     2b4:	f1 f7       	brne	.-4      	; 0x2b2 <sendPulse+0x15e>
     2b6:	8c 01       	movw	r16, r24
     2b8:	1d 8b       	std	Y+21, r17	; 0x15
     2ba:	0c 8b       	std	Y+20, r16	; 0x14
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     2bc:	8a 89       	ldd	r24, Y+18	; 0x12
     2be:	9b 89       	ldd	r25, Y+19	; 0x13
     2c0:	01 97       	sbiw	r24, 0x01	; 1
     2c2:	9b 8b       	std	Y+19, r25	; 0x13
     2c4:	8a 8b       	std	Y+18, r24	; 0x12
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2c6:	8a 89       	ldd	r24, Y+18	; 0x12
     2c8:	9b 89       	ldd	r25, Y+19	; 0x13
     2ca:	00 97       	sbiw	r24, 0x00	; 0
     2cc:	51 f7       	brne	.-44     	; 0x2a2 <sendPulse+0x14e>
     2ce:	28 c0       	rjmp	.+80     	; 0x320 <sendPulse+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2d0:	6e 85       	ldd	r22, Y+14	; 0x0e
     2d2:	7f 85       	ldd	r23, Y+15	; 0x0f
     2d4:	88 89       	ldd	r24, Y+16	; 0x10
     2d6:	99 89       	ldd	r25, Y+17	; 0x11
     2d8:	0e 94 2b 05 	call	0xa56	; 0xa56 <__fixunssfsi>
     2dc:	dc 01       	movw	r26, r24
     2de:	cb 01       	movw	r24, r22
     2e0:	9b 8b       	std	Y+19, r25	; 0x13
     2e2:	8a 8b       	std	Y+18, r24	; 0x12
     2e4:	8a 89       	ldd	r24, Y+18	; 0x12
     2e6:	9b 89       	ldd	r25, Y+19	; 0x13
     2e8:	9f 8b       	std	Y+23, r25	; 0x17
     2ea:	8e 8b       	std	Y+22, r24	; 0x16
     2ec:	8e 89       	ldd	r24, Y+22	; 0x16
     2ee:	9f 89       	ldd	r25, Y+23	; 0x17
     2f0:	8c 01       	movw	r16, r24
     2f2:	f8 01       	movw	r30, r16
     2f4:	31 97       	sbiw	r30, 0x01	; 1
     2f6:	f1 f7       	brne	.-4      	; 0x2f4 <sendPulse+0x1a0>
     2f8:	8f 01       	movw	r16, r30
     2fa:	1f 8b       	std	Y+23, r17	; 0x17
     2fc:	0e 8b       	std	Y+22, r16	; 0x16
     2fe:	10 c0       	rjmp	.+32     	; 0x320 <sendPulse+0x1cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     300:	6d 81       	ldd	r22, Y+5	; 0x05
     302:	7e 81       	ldd	r23, Y+6	; 0x06
     304:	8f 81       	ldd	r24, Y+7	; 0x07
     306:	98 85       	ldd	r25, Y+8	; 0x08
     308:	0e 94 2b 05 	call	0xa56	; 0xa56 <__fixunssfsi>
     30c:	dc 01       	movw	r26, r24
     30e:	cb 01       	movw	r24, r22
     310:	89 87       	std	Y+9, r24	; 0x09
     312:	89 85       	ldd	r24, Y+9	; 0x09
     314:	88 8f       	std	Y+24, r24	; 0x18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     316:	88 8d       	ldd	r24, Y+24	; 0x18
     318:	18 2f       	mov	r17, r24
     31a:	1a 95       	dec	r17
     31c:	f1 f7       	brne	.-4      	; 0x31a <sendPulse+0x1c6>
     31e:	18 8f       	std	Y+24, r17	; 0x18
	_delay_us(10);
	PORTD = (0<<PORTD0);
     320:	8b e2       	ldi	r24, 0x2B	; 43
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	fc 01       	movw	r30, r24
     326:	10 82       	st	Z, r1
}
     328:	68 96       	adiw	r28, 0x18	; 24
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	f8 94       	cli
     32e:	de bf       	out	0x3e, r29	; 62
     330:	0f be       	out	0x3f, r0	; 63
     332:	cd bf       	out	0x3d, r28	; 61
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	1f 91       	pop	r17
     33a:	0f 91       	pop	r16
     33c:	08 95       	ret

0000033e <__vector_2>:

ISR (INT1_vect)
{	
     33e:	1f 92       	push	r1
     340:	0f 92       	push	r0
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	0f 92       	push	r0
     346:	11 24       	eor	r1, r1
     348:	2f 93       	push	r18
     34a:	3f 93       	push	r19
     34c:	4f 93       	push	r20
     34e:	5f 93       	push	r21
     350:	6f 93       	push	r22
     352:	7f 93       	push	r23
     354:	8f 93       	push	r24
     356:	9f 93       	push	r25
     358:	af 93       	push	r26
     35a:	bf 93       	push	r27
     35c:	ef 93       	push	r30
     35e:	ff 93       	push	r31
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
	init_timer();
     368:	0e 94 64 00 	call	0xc8	; 0xc8 <init_timer>
	while (bit_is_set(PIND, PD3))
     36c:	00 00       	nop
     36e:	89 e2       	ldi	r24, 0x29	; 41
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	fc 01       	movw	r30, r24
     374:	80 81       	ld	r24, Z
     376:	88 2f       	mov	r24, r24
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	88 70       	andi	r24, 0x08	; 8
     37c:	90 70       	andi	r25, 0x00	; 0
     37e:	00 97       	sbiw	r24, 0x00	; 0
     380:	b1 f7       	brne	.-20     	; 0x36e <__vector_2+0x30>
	{
		//Wait for PIND to go back down, hence echo is finished
	}
	gv_counter = TCNT1;	
     382:	84 e8       	ldi	r24, 0x84	; 132
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	fc 01       	movw	r30, r24
     388:	80 81       	ld	r24, Z
     38a:	91 81       	ldd	r25, Z+1	; 0x01
     38c:	90 93 3c 01 	sts	0x013C, r25
     390:	80 93 3b 01 	sts	0x013B, r24
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	ff 91       	pop	r31
     39a:	ef 91       	pop	r30
     39c:	bf 91       	pop	r27
     39e:	af 91       	pop	r26
     3a0:	9f 91       	pop	r25
     3a2:	8f 91       	pop	r24
     3a4:	7f 91       	pop	r23
     3a6:	6f 91       	pop	r22
     3a8:	5f 91       	pop	r21
     3aa:	4f 91       	pop	r20
     3ac:	3f 91       	pop	r19
     3ae:	2f 91       	pop	r18
     3b0:	0f 90       	pop	r0
     3b2:	0f be       	out	0x3f, r0	; 63
     3b4:	0f 90       	pop	r0
     3b6:	1f 90       	pop	r1
     3b8:	18 95       	reti

000003ba <ser_stdio_putchar>:
#include <stdio.h>
#include <util/delay.h>

// serieel
// Getchar en putchar tbv. stdio.h
void ser_stdio_putchar(char c, FILE *stream) {
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	00 d0       	rcall	.+0      	; 0x3c0 <ser_stdio_putchar+0x6>
     3c0:	0f 92       	push	r0
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	89 83       	std	Y+1, r24	; 0x01
     3c8:	7b 83       	std	Y+3, r23	; 0x03
     3ca:	6a 83       	std	Y+2, r22	; 0x02
	if (c=='\n') {
     3cc:	89 81       	ldd	r24, Y+1	; 0x01
     3ce:	8a 30       	cpi	r24, 0x0A	; 10
     3d0:	19 f4       	brne	.+6      	; 0x3d8 <ser_stdio_putchar+0x1e>
		ser_transmit('\r');
     3d2:	8d e0       	ldi	r24, 0x0D	; 13
     3d4:	0e 94 19 02 	call	0x432	; 0x432 <ser_transmit>
	}
	ser_transmit(c);
     3d8:	89 81       	ldd	r24, Y+1	; 0x01
     3da:	0e 94 19 02 	call	0x432	; 0x432 <ser_transmit>
}
     3de:	0f 90       	pop	r0
     3e0:	0f 90       	pop	r0
     3e2:	0f 90       	pop	r0
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	08 95       	ret

000003ea <ser_init>:

FILE uart_output = FDEV_SETUP_STREAM(ser_stdio_putchar, NULL, _FDEV_SETUP_WRITE);

void ser_init() {
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	cd b7       	in	r28, 0x3d	; 61
     3f0:	de b7       	in	r29, 0x3e	; 62
	// set the baud rate
	UBRR0H = 0;
     3f2:	85 ec       	ldi	r24, 0xC5	; 197
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	fc 01       	movw	r30, r24
     3f8:	10 82       	st	Z, r1
	UBRR0L = 103;
     3fa:	84 ec       	ldi	r24, 0xC4	; 196
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	27 e6       	ldi	r18, 0x67	; 103
     400:	fc 01       	movw	r30, r24
     402:	20 83       	st	Z, r18
	// disable U2X mode
	UCSR0A = 0;
     404:	80 ec       	ldi	r24, 0xC0	; 192
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	fc 01       	movw	r30, r24
     40a:	10 82       	st	Z, r1
	// enable TX and RX
	UCSR0B = _BV(TXEN0) | _BV(RXEN0);
     40c:	81 ec       	ldi	r24, 0xC1	; 193
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	28 e1       	ldi	r18, 0x18	; 24
     412:	fc 01       	movw	r30, r24
     414:	20 83       	st	Z, r18
	// set frame format : asynchronous, 8 data bits, 1 stop bit, no parity
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
     416:	82 ec       	ldi	r24, 0xC2	; 194
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	26 e0       	ldi	r18, 0x06	; 6
     41c:	fc 01       	movw	r30, r24
     41e:	20 83       	st	Z, r18
	// Setup stdout
	stdout=&uart_output;
     420:	83 e0       	ldi	r24, 0x03	; 3
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	90 93 40 01 	sts	0x0140, r25
     428:	80 93 3f 01 	sts	0x013F, r24
}
     42c:	df 91       	pop	r29
     42e:	cf 91       	pop	r28
     430:	08 95       	ret

00000432 <ser_transmit>:

// Low level transmit
void ser_transmit(uint8_t data) {
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	0f 92       	push	r0
     438:	cd b7       	in	r28, 0x3d	; 61
     43a:	de b7       	in	r29, 0x3e	; 62
     43c:	89 83       	std	Y+1, r24	; 0x01
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
     43e:	80 ec       	ldi	r24, 0xC0	; 192
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	fc 01       	movw	r30, r24
     444:	80 81       	ld	r24, Z
     446:	88 2f       	mov	r24, r24
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	80 72       	andi	r24, 0x20	; 32
     44c:	90 70       	andi	r25, 0x00	; 0
     44e:	00 97       	sbiw	r24, 0x00	; 0
     450:	b1 f3       	breq	.-20     	; 0x43e <ser_transmit+0xc>
	// send the data
	UDR0 = data;
     452:	86 ec       	ldi	r24, 0xC6	; 198
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	29 81       	ldd	r18, Y+1	; 0x01
     458:	fc 01       	movw	r30, r24
     45a:	20 83       	st	Z, r18
}
     45c:	0f 90       	pop	r0
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	08 95       	ret

00000464 <ser_receive>:

// Low level receive
uint8_t ser_receive() {
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
     46c:	80 ec       	ldi	r24, 0xC0	; 192
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	fc 01       	movw	r30, r24
     472:	80 81       	ld	r24, Z
     474:	88 23       	and	r24, r24
     476:	d4 f7       	brge	.-12     	; 0x46c <ser_receive+0x8>
	return UDR0;
     478:	86 ec       	ldi	r24, 0xC6	; 198
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	fc 01       	movw	r30, r24
     47e:	80 81       	ld	r24, Z
}
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	08 95       	ret

00000486 <ser_readln>:

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
     48e:	28 97       	sbiw	r28, 0x08	; 8
     490:	0f b6       	in	r0, 0x3f	; 63
     492:	f8 94       	cli
     494:	de bf       	out	0x3e, r29	; 62
     496:	0f be       	out	0x3f, r0	; 63
     498:	cd bf       	out	0x3d, r28	; 61
     49a:	9d 83       	std	Y+5, r25	; 0x05
     49c:	8c 83       	std	Y+4, r24	; 0x04
     49e:	7f 83       	std	Y+7, r23	; 0x07
     4a0:	6e 83       	std	Y+6, r22	; 0x06
     4a2:	48 87       	std	Y+8, r20	; 0x08
	int i=0;
     4a4:	1a 82       	std	Y+2, r1	; 0x02
     4a6:	19 82       	std	Y+1, r1	; 0x01
     4a8:	01 c0       	rjmp	.+2      	; 0x4ac <ser_readln+0x26>
			
		}
		if (i<maxlength-1) {
			buf[i++]=c;
		}
	}
     4aa:	00 00       	nop

// Hele regel lezen
void ser_readln(char* buf, int maxlength, uint8_t echo) {
	int i=0;
	while(1) {
		uint8_t c = ser_receive();
     4ac:	0e 94 32 02 	call	0x464	; 0x464 <ser_receive>
     4b0:	8b 83       	std	Y+3, r24	; 0x03
		if (echo) ser_transmit(c);
     4b2:	88 85       	ldd	r24, Y+8	; 0x08
     4b4:	88 23       	and	r24, r24
     4b6:	19 f0       	breq	.+6      	; 0x4be <ser_readln+0x38>
     4b8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ba:	0e 94 19 02 	call	0x432	; 0x432 <ser_transmit>
		if (c=='\r') {
     4be:	8b 81       	ldd	r24, Y+3	; 0x03
     4c0:	8d 30       	cpi	r24, 0x0D	; 13
     4c2:	39 f4       	brne	.+14     	; 0x4d2 <ser_readln+0x4c>
			if (echo) ser_transmit('\n');
     4c4:	88 85       	ldd	r24, Y+8	; 0x08
     4c6:	88 23       	and	r24, r24
     4c8:	e9 f0       	breq	.+58     	; 0x504 <ser_readln+0x7e>
     4ca:	8a e0       	ldi	r24, 0x0A	; 10
     4cc:	0e 94 19 02 	call	0x432	; 0x432 <ser_transmit>
			break; // ENTER ontvangen
     4d0:	19 c0       	rjmp	.+50     	; 0x504 <ser_readln+0x7e>
			
		}
		if (i<maxlength-1) {
     4d2:	8e 81       	ldd	r24, Y+6	; 0x06
     4d4:	9f 81       	ldd	r25, Y+7	; 0x07
     4d6:	9c 01       	movw	r18, r24
     4d8:	21 50       	subi	r18, 0x01	; 1
     4da:	30 40       	sbci	r19, 0x00	; 0
     4dc:	89 81       	ldd	r24, Y+1	; 0x01
     4de:	9a 81       	ldd	r25, Y+2	; 0x02
     4e0:	82 17       	cp	r24, r18
     4e2:	93 07       	cpc	r25, r19
     4e4:	14 f7       	brge	.-60     	; 0x4aa <ser_readln+0x24>
			buf[i++]=c;
     4e6:	89 81       	ldd	r24, Y+1	; 0x01
     4e8:	9a 81       	ldd	r25, Y+2	; 0x02
     4ea:	2c 81       	ldd	r18, Y+4	; 0x04
     4ec:	3d 81       	ldd	r19, Y+5	; 0x05
     4ee:	82 0f       	add	r24, r18
     4f0:	93 1f       	adc	r25, r19
     4f2:	2b 81       	ldd	r18, Y+3	; 0x03
     4f4:	fc 01       	movw	r30, r24
     4f6:	20 83       	st	Z, r18
     4f8:	89 81       	ldd	r24, Y+1	; 0x01
     4fa:	9a 81       	ldd	r25, Y+2	; 0x02
     4fc:	01 96       	adiw	r24, 0x01	; 1
     4fe:	9a 83       	std	Y+2, r25	; 0x02
     500:	89 83       	std	Y+1, r24	; 0x01
		}
	}
     502:	d3 cf       	rjmp	.-90     	; 0x4aa <ser_readln+0x24>
	while(1) {
		uint8_t c = ser_receive();
		if (echo) ser_transmit(c);
		if (c=='\r') {
			if (echo) ser_transmit('\n');
			break; // ENTER ontvangen
     504:	00 00       	nop
		}
		if (i<maxlength-1) {
			buf[i++]=c;
		}
	}
	buf[i]='\0';
     506:	89 81       	ldd	r24, Y+1	; 0x01
     508:	9a 81       	ldd	r25, Y+2	; 0x02
     50a:	2c 81       	ldd	r18, Y+4	; 0x04
     50c:	3d 81       	ldd	r19, Y+5	; 0x05
     50e:	82 0f       	add	r24, r18
     510:	93 1f       	adc	r25, r19
     512:	fc 01       	movw	r30, r24
     514:	10 82       	st	Z, r1
}
     516:	28 96       	adiw	r28, 0x08	; 8
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	f8 94       	cli
     51c:	de bf       	out	0x3e, r29	; 62
     51e:	0f be       	out	0x3f, r0	; 63
     520:	cd bf       	out	0x3d, r28	; 61
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	08 95       	ret

00000528 <main>:

int main (void)
{
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	cd b7       	in	r28, 0x3d	; 61
     532:	de b7       	in	r29, 0x3e	; 62
     534:	2f 97       	sbiw	r28, 0x0f	; 15
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	f8 94       	cli
     53a:	de bf       	out	0x3e, r29	; 62
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	cd bf       	out	0x3d, r28	; 61
	init_ports();
     540:	0e 94 53 00 	call	0xa6	; 0xa6 <init_ports>
	init_ext_int();
     544:	0e 94 84 00 	call	0x108	; 0x108 <init_ext_int>
	ser_init;
	
	sei();
     548:	78 94       	sei
	
	
	ser_init();
     54a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <ser_init>
	while(1)
	{	
		read_sensor_temp();
     54e:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <read_sensor_temp>
		sendPulse();
     552:	0e 94 aa 00 	call	0x154	; 0x154 <sendPulse>
		stop_timer();
     556:	0e 94 74 00 	call	0xe8	; 0xe8 <stop_timer>
		uint8_t dist = (calc_cm(gv_counter));
     55a:	80 91 3b 01 	lds	r24, 0x013B
     55e:	90 91 3c 01 	lds	r25, 0x013C
     562:	0e 94 95 00 	call	0x12a	; 0x12a <calc_cm>
     566:	89 83       	std	Y+1, r24	; 0x01
		printf ("Distance = %i", dist);
     568:	89 81       	ldd	r24, Y+1	; 0x01
     56a:	28 2f       	mov	r18, r24
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	00 d0       	rcall	.+0      	; 0x570 <main+0x48>
     570:	00 d0       	rcall	.+0      	; 0x572 <main+0x4a>
     572:	8d b7       	in	r24, 0x3d	; 61
     574:	9e b7       	in	r25, 0x3e	; 62
     576:	01 96       	adiw	r24, 0x01	; 1
     578:	41 e1       	ldi	r20, 0x11	; 17
     57a:	51 e0       	ldi	r21, 0x01	; 1
     57c:	fc 01       	movw	r30, r24
     57e:	51 83       	std	Z+1, r21	; 0x01
     580:	40 83       	st	Z, r20
     582:	fc 01       	movw	r30, r24
     584:	33 83       	std	Z+3, r19	; 0x03
     586:	22 83       	std	Z+2, r18	; 0x02
     588:	0e 94 84 06 	call	0xd08	; 0xd08 <printf>
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	0f 90       	pop	r0
     592:	0f 90       	pop	r0
		printf("\n\n"); 
     594:	8f e1       	ldi	r24, 0x1F	; 31
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	0e 94 99 06 	call	0xd32	; 0xd32 <puts>
		read_sensor_light();
     59c:	0e 94 81 03 	call	0x702	; 0x702 <read_sensor_light>
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	aa e7       	ldi	r26, 0x7A	; 122
     5a6:	b4 e4       	ldi	r27, 0x44	; 68
     5a8:	8a 83       	std	Y+2, r24	; 0x02
     5aa:	9b 83       	std	Y+3, r25	; 0x03
     5ac:	ac 83       	std	Y+4, r26	; 0x04
     5ae:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	__tmp = ((F_CPU) / 4e3) * __ms;
     5b0:	6a 81       	ldd	r22, Y+2	; 0x02
     5b2:	7b 81       	ldd	r23, Y+3	; 0x03
     5b4:	8c 81       	ldd	r24, Y+4	; 0x04
     5b6:	9d 81       	ldd	r25, Y+5	; 0x05
     5b8:	20 e0       	ldi	r18, 0x00	; 0
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	4a e7       	ldi	r20, 0x7A	; 122
     5be:	55 e4       	ldi	r21, 0x45	; 69
     5c0:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__mulsf3>
     5c4:	dc 01       	movw	r26, r24
     5c6:	cb 01       	movw	r24, r22
     5c8:	8e 83       	std	Y+6, r24	; 0x06
     5ca:	9f 83       	std	Y+7, r25	; 0x07
     5cc:	a8 87       	std	Y+8, r26	; 0x08
     5ce:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     5d0:	11 e0       	ldi	r17, 0x01	; 1
     5d2:	6e 81       	ldd	r22, Y+6	; 0x06
     5d4:	7f 81       	ldd	r23, Y+7	; 0x07
     5d6:	88 85       	ldd	r24, Y+8	; 0x08
     5d8:	99 85       	ldd	r25, Y+9	; 0x09
     5da:	20 e0       	ldi	r18, 0x00	; 0
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	40 e8       	ldi	r20, 0x80	; 128
     5e0:	5f e3       	ldi	r21, 0x3F	; 63
     5e2:	0e 94 ba 04 	call	0x974	; 0x974 <__cmpsf2>
     5e6:	88 23       	and	r24, r24
     5e8:	0c f0       	brlt	.+2      	; 0x5ec <main+0xc4>
     5ea:	10 e0       	ldi	r17, 0x00	; 0
     5ec:	11 23       	and	r17, r17
     5ee:	29 f0       	breq	.+10     	; 0x5fa <main+0xd2>
		__ticks = 1;
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	9b 87       	std	Y+11, r25	; 0x0b
     5f6:	8a 87       	std	Y+10, r24	; 0x0a
     5f8:	46 c0       	rjmp	.+140    	; 0x686 <main+0x15e>
	else if (__tmp > 65535)
     5fa:	11 e0       	ldi	r17, 0x01	; 1
     5fc:	6e 81       	ldd	r22, Y+6	; 0x06
     5fe:	7f 81       	ldd	r23, Y+7	; 0x07
     600:	88 85       	ldd	r24, Y+8	; 0x08
     602:	99 85       	ldd	r25, Y+9	; 0x09
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	3f ef       	ldi	r19, 0xFF	; 255
     608:	4f e7       	ldi	r20, 0x7F	; 127
     60a:	57 e4       	ldi	r21, 0x47	; 71
     60c:	0e 94 09 06 	call	0xc12	; 0xc12 <__gesf2>
     610:	18 16       	cp	r1, r24
     612:	0c f0       	brlt	.+2      	; 0x616 <main+0xee>
     614:	10 e0       	ldi	r17, 0x00	; 0
     616:	11 23       	and	r17, r17
     618:	61 f1       	breq	.+88     	; 0x672 <main+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     61a:	6a 81       	ldd	r22, Y+2	; 0x02
     61c:	7b 81       	ldd	r23, Y+3	; 0x03
     61e:	8c 81       	ldd	r24, Y+4	; 0x04
     620:	9d 81       	ldd	r25, Y+5	; 0x05
     622:	20 e0       	ldi	r18, 0x00	; 0
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	40 e2       	ldi	r20, 0x20	; 32
     628:	51 e4       	ldi	r21, 0x41	; 65
     62a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__mulsf3>
     62e:	dc 01       	movw	r26, r24
     630:	cb 01       	movw	r24, r22
     632:	bc 01       	movw	r22, r24
     634:	cd 01       	movw	r24, r26
     636:	0e 94 2b 05 	call	0xa56	; 0xa56 <__fixunssfsi>
     63a:	dc 01       	movw	r26, r24
     63c:	cb 01       	movw	r24, r22
     63e:	9b 87       	std	Y+11, r25	; 0x0b
     640:	8a 87       	std	Y+10, r24	; 0x0a
     642:	12 c0       	rjmp	.+36     	; 0x668 <main+0x140>
     644:	80 e9       	ldi	r24, 0x90	; 144
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	9d 87       	std	Y+13, r25	; 0x0d
     64a:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     64c:	8c 85       	ldd	r24, Y+12	; 0x0c
     64e:	9d 85       	ldd	r25, Y+13	; 0x0d
     650:	8c 01       	movw	r16, r24
     652:	c8 01       	movw	r24, r16
     654:	01 97       	sbiw	r24, 0x01	; 1
     656:	f1 f7       	brne	.-4      	; 0x654 <main+0x12c>
     658:	8c 01       	movw	r16, r24
     65a:	1d 87       	std	Y+13, r17	; 0x0d
     65c:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     65e:	8a 85       	ldd	r24, Y+10	; 0x0a
     660:	9b 85       	ldd	r25, Y+11	; 0x0b
     662:	01 97       	sbiw	r24, 0x01	; 1
     664:	9b 87       	std	Y+11, r25	; 0x0b
     666:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     668:	8a 85       	ldd	r24, Y+10	; 0x0a
     66a:	9b 85       	ldd	r25, Y+11	; 0x0b
     66c:	00 97       	sbiw	r24, 0x00	; 0
     66e:	51 f7       	brne	.-44     	; 0x644 <main+0x11c>
     670:	18 c0       	rjmp	.+48     	; 0x6a2 <main+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     672:	6e 81       	ldd	r22, Y+6	; 0x06
     674:	7f 81       	ldd	r23, Y+7	; 0x07
     676:	88 85       	ldd	r24, Y+8	; 0x08
     678:	99 85       	ldd	r25, Y+9	; 0x09
     67a:	0e 94 2b 05 	call	0xa56	; 0xa56 <__fixunssfsi>
     67e:	dc 01       	movw	r26, r24
     680:	cb 01       	movw	r24, r22
     682:	9b 87       	std	Y+11, r25	; 0x0b
     684:	8a 87       	std	Y+10, r24	; 0x0a
     686:	8a 85       	ldd	r24, Y+10	; 0x0a
     688:	9b 85       	ldd	r25, Y+11	; 0x0b
     68a:	9f 87       	std	Y+15, r25	; 0x0f
     68c:	8e 87       	std	Y+14, r24	; 0x0e
     68e:	8e 85       	ldd	r24, Y+14	; 0x0e
     690:	9f 85       	ldd	r25, Y+15	; 0x0f
     692:	8c 01       	movw	r16, r24
     694:	f8 01       	movw	r30, r16
     696:	31 97       	sbiw	r30, 0x01	; 1
     698:	f1 f7       	brne	.-4      	; 0x696 <main+0x16e>
     69a:	8f 01       	movw	r16, r30
     69c:	1f 87       	std	Y+15, r17	; 0x0f
     69e:	0e 87       	std	Y+14, r16	; 0x0e
		_delay_ms(1000);
		

	}
     6a0:	56 cf       	rjmp	.-340    	; 0x54e <main+0x26>
     6a2:	55 cf       	rjmp	.-342    	; 0x54e <main+0x26>

000006a4 <init_adc_light>:
#include "Lichtsensor.h"

void init_adc_light()
{
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
	// ref=Vcc, left adjust the result (8 bit resolution),
	// select channel 0 (PC1 = input)
	ADMUX = (1<<REFS0)|(1<<ADLAR)|(1<<0);
     6ac:	8c e7       	ldi	r24, 0x7C	; 124
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	21 e6       	ldi	r18, 0x61	; 97
     6b2:	fc 01       	movw	r30, r24
     6b4:	20 83       	st	Z, r18
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     6b6:	8a e7       	ldi	r24, 0x7A	; 122
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	27 e8       	ldi	r18, 0x87	; 135
     6bc:	fc 01       	movw	r30, r24
     6be:	20 83       	st	Z, r18
}
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	08 95       	ret

000006c6 <get_adc_value_light>:

uint8_t get_adc_value_light()
{
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	cd b7       	in	r28, 0x3d	; 61
     6cc:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1<<ADSC); // start conversion
     6ce:	8a e7       	ldi	r24, 0x7A	; 122
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	2a e7       	ldi	r18, 0x7A	; 122
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	f9 01       	movw	r30, r18
     6d8:	20 81       	ld	r18, Z
     6da:	20 64       	ori	r18, 0x40	; 64
     6dc:	fc 01       	movw	r30, r24
     6de:	20 83       	st	Z, r18
	loop_until_bit_is_clear(ADCSRA, ADSC);
     6e0:	8a e7       	ldi	r24, 0x7A	; 122
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	fc 01       	movw	r30, r24
     6e6:	80 81       	ld	r24, Z
     6e8:	88 2f       	mov	r24, r24
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	80 74       	andi	r24, 0x40	; 64
     6ee:	90 70       	andi	r25, 0x00	; 0
     6f0:	00 97       	sbiw	r24, 0x00	; 0
     6f2:	b1 f7       	brne	.-20     	; 0x6e0 <get_adc_value_light+0x1a>
	return ADCH; // ms 8 bits
     6f4:	89 e7       	ldi	r24, 0x79	; 121
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	fc 01       	movw	r30, r24
     6fa:	80 81       	ld	r24, Z
}
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	08 95       	ret

00000702 <read_sensor_light>:

int8_t read_sensor_light()
{
     702:	cf 93       	push	r28
     704:	df 93       	push	r29
     706:	00 d0       	rcall	.+0      	; 0x708 <read_sensor_light+0x6>
     708:	cd b7       	in	r28, 0x3d	; 61
     70a:	de b7       	in	r29, 0x3e	; 62
	int sensor_light;
	init_adc_light();
     70c:	0e 94 52 03 	call	0x6a4	; 0x6a4 <init_adc_light>
	sensor_light = get_adc_value_light();
     710:	0e 94 63 03 	call	0x6c6	; 0x6c6 <get_adc_value_light>
     714:	88 2f       	mov	r24, r24
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	9a 83       	std	Y+2, r25	; 0x02
     71a:	89 83       	std	Y+1, r24	; 0x01
	
	printf("Light = %i", sensor_light);
     71c:	00 d0       	rcall	.+0      	; 0x71e <read_sensor_light+0x1c>
     71e:	00 d0       	rcall	.+0      	; 0x720 <read_sensor_light+0x1e>
     720:	8d b7       	in	r24, 0x3d	; 61
     722:	9e b7       	in	r25, 0x3e	; 62
     724:	01 96       	adiw	r24, 0x01	; 1
     726:	21 e2       	ldi	r18, 0x21	; 33
     728:	31 e0       	ldi	r19, 0x01	; 1
     72a:	fc 01       	movw	r30, r24
     72c:	31 83       	std	Z+1, r19	; 0x01
     72e:	20 83       	st	Z, r18
     730:	29 81       	ldd	r18, Y+1	; 0x01
     732:	3a 81       	ldd	r19, Y+2	; 0x02
     734:	fc 01       	movw	r30, r24
     736:	33 83       	std	Z+3, r19	; 0x03
     738:	22 83       	std	Z+2, r18	; 0x02
     73a:	0e 94 84 06 	call	0xd08	; 0xd08 <printf>
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
	printf("\n\n"); 
     746:	8c e2       	ldi	r24, 0x2C	; 44
     748:	91 e0       	ldi	r25, 0x01	; 1
     74a:	0e 94 99 06 	call	0xd32	; 0xd32 <puts>
	
	return sensor_light;
     74e:	89 81       	ldd	r24, Y+1	; 0x01
	

     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <init_adc_temp>:
#include "Temperatuursensor.h"


void init_adc_temp()
{
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	cd b7       	in	r28, 0x3d	; 61
     760:	de b7       	in	r29, 0x3e	; 62
	// ref=Vcc, left adjust the result (8 bit resolution),
	// select channel 0 (PC1 = input)
	ADMUX = (1<<REFS0)|(1<<ADLAR);
     762:	8c e7       	ldi	r24, 0x7C	; 124
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	20 e6       	ldi	r18, 0x60	; 96
     768:	fc 01       	movw	r30, r24
     76a:	20 83       	st	Z, r18
	// enable the ADC & prescale = 128
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     76c:	8a e7       	ldi	r24, 0x7A	; 122
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	27 e8       	ldi	r18, 0x87	; 135
     772:	fc 01       	movw	r30, r24
     774:	20 83       	st	Z, r18
}
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	08 95       	ret

0000077c <get_adc_value_temp>:

uint8_t get_adc_value_temp()
{
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	cd b7       	in	r28, 0x3d	; 61
     782:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= (1<<ADSC); // start conversion
     784:	8a e7       	ldi	r24, 0x7A	; 122
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	2a e7       	ldi	r18, 0x7A	; 122
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	f9 01       	movw	r30, r18
     78e:	20 81       	ld	r18, Z
     790:	20 64       	ori	r18, 0x40	; 64
     792:	fc 01       	movw	r30, r24
     794:	20 83       	st	Z, r18
	loop_until_bit_is_clear(ADCSRA, ADSC);
     796:	8a e7       	ldi	r24, 0x7A	; 122
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	fc 01       	movw	r30, r24
     79c:	80 81       	ld	r24, Z
     79e:	88 2f       	mov	r24, r24
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	80 74       	andi	r24, 0x40	; 64
     7a4:	90 70       	andi	r25, 0x00	; 0
     7a6:	00 97       	sbiw	r24, 0x00	; 0
     7a8:	b1 f7       	brne	.-20     	; 0x796 <get_adc_value_temp+0x1a>
	return ADCH; // ms 8 bits
     7aa:	89 e7       	ldi	r24, 0x79	; 121
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	fc 01       	movw	r30, r24
     7b0:	80 81       	ld	r24, Z
}
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	08 95       	ret

000007b8 <read_sensor_temp>:

int8_t read_sensor_temp()
{
     7b8:	cf 93       	push	r28
     7ba:	df 93       	push	r29
     7bc:	cd b7       	in	r28, 0x3d	; 61
     7be:	de b7       	in	r29, 0x3e	; 62
     7c0:	27 97       	sbiw	r28, 0x07	; 7
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	f8 94       	cli
     7c6:	de bf       	out	0x3e, r29	; 62
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	cd bf       	out	0x3d, r28	; 61
	int sensor_temp;
	float voltage;
	int8_t celsius;
	
	init_adc_temp();
     7cc:	0e 94 ad 03 	call	0x75a	; 0x75a <init_adc_temp>
	sensor_temp =  get_adc_value_temp();
     7d0:	0e 94 be 03 	call	0x77c	; 0x77c <get_adc_value_temp>
     7d4:	88 2f       	mov	r24, r24
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	9a 83       	std	Y+2, r25	; 0x02
     7da:	89 83       	std	Y+1, r24	; 0x01
	voltage = ((sensor_temp / 256.0)*5.015);
     7dc:	89 81       	ldd	r24, Y+1	; 0x01
     7de:	9a 81       	ldd	r25, Y+2	; 0x02
     7e0:	aa 27       	eor	r26, r26
     7e2:	97 fd       	sbrc	r25, 7
     7e4:	a0 95       	com	r26
     7e6:	ba 2f       	mov	r27, r26
     7e8:	bc 01       	movw	r22, r24
     7ea:	cd 01       	movw	r24, r26
     7ec:	0e 94 59 05 	call	0xab2	; 0xab2 <__floatsisf>
     7f0:	dc 01       	movw	r26, r24
     7f2:	cb 01       	movw	r24, r22
     7f4:	bc 01       	movw	r22, r24
     7f6:	cd 01       	movw	r24, r26
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	40 e8       	ldi	r20, 0x80	; 128
     7fe:	53 e4       	ldi	r21, 0x43	; 67
     800:	0e 94 be 04 	call	0x97c	; 0x97c <__divsf3>
     804:	dc 01       	movw	r26, r24
     806:	cb 01       	movw	r24, r22
     808:	bc 01       	movw	r22, r24
     80a:	cd 01       	movw	r24, r26
     80c:	21 ee       	ldi	r18, 0xE1	; 225
     80e:	3a e7       	ldi	r19, 0x7A	; 122
     810:	40 ea       	ldi	r20, 0xA0	; 160
     812:	50 e4       	ldi	r21, 0x40	; 64
     814:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__mulsf3>
     818:	dc 01       	movw	r26, r24
     81a:	cb 01       	movw	r24, r22
     81c:	8b 83       	std	Y+3, r24	; 0x03
     81e:	9c 83       	std	Y+4, r25	; 0x04
     820:	ad 83       	std	Y+5, r26	; 0x05
     822:	be 83       	std	Y+6, r27	; 0x06
	celsius = ((voltage - 0.5) * 100);
     824:	6b 81       	ldd	r22, Y+3	; 0x03
     826:	7c 81       	ldd	r23, Y+4	; 0x04
     828:	8d 81       	ldd	r24, Y+5	; 0x05
     82a:	9e 81       	ldd	r25, Y+6	; 0x06
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	40 e0       	ldi	r20, 0x00	; 0
     832:	5f e3       	ldi	r21, 0x3F	; 63
     834:	0e 94 55 04 	call	0x8aa	; 0x8aa <__subsf3>
     838:	dc 01       	movw	r26, r24
     83a:	cb 01       	movw	r24, r22
     83c:	bc 01       	movw	r22, r24
     83e:	cd 01       	movw	r24, r26
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	48 ec       	ldi	r20, 0xC8	; 200
     846:	52 e4       	ldi	r21, 0x42	; 66
     848:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__mulsf3>
     84c:	dc 01       	movw	r26, r24
     84e:	cb 01       	movw	r24, r22
     850:	bc 01       	movw	r22, r24
     852:	cd 01       	movw	r24, r26
     854:	0e 94 26 05 	call	0xa4c	; 0xa4c <__fixsfsi>
     858:	dc 01       	movw	r26, r24
     85a:	cb 01       	movw	r24, r22
     85c:	8f 83       	std	Y+7, r24	; 0x07
	
	printf("Temp = %i", celsius);
     85e:	8f 81       	ldd	r24, Y+7	; 0x07
     860:	28 2f       	mov	r18, r24
     862:	33 27       	eor	r19, r19
     864:	27 fd       	sbrc	r18, 7
     866:	30 95       	com	r19
     868:	00 d0       	rcall	.+0      	; 0x86a <read_sensor_temp+0xb2>
     86a:	00 d0       	rcall	.+0      	; 0x86c <read_sensor_temp+0xb4>
     86c:	8d b7       	in	r24, 0x3d	; 61
     86e:	9e b7       	in	r25, 0x3e	; 62
     870:	01 96       	adiw	r24, 0x01	; 1
     872:	4e e2       	ldi	r20, 0x2E	; 46
     874:	51 e0       	ldi	r21, 0x01	; 1
     876:	fc 01       	movw	r30, r24
     878:	51 83       	std	Z+1, r21	; 0x01
     87a:	40 83       	st	Z, r20
     87c:	fc 01       	movw	r30, r24
     87e:	33 83       	std	Z+3, r19	; 0x03
     880:	22 83       	std	Z+2, r18	; 0x02
     882:	0e 94 84 06 	call	0xd08	; 0xd08 <printf>
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0
	printf("\n\n");
     88e:	88 e3       	ldi	r24, 0x38	; 56
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	0e 94 99 06 	call	0xd32	; 0xd32 <puts>
	
	return celsius;
     896:	8f 81       	ldd	r24, Y+7	; 0x07
}
     898:	27 96       	adiw	r28, 0x07	; 7
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	f8 94       	cli
     89e:	de bf       	out	0x3e, r29	; 62
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	cd bf       	out	0x3d, r28	; 61
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	08 95       	ret

000008aa <__subsf3>:
     8aa:	50 58       	subi	r21, 0x80	; 128

000008ac <__addsf3>:
     8ac:	bb 27       	eor	r27, r27
     8ae:	aa 27       	eor	r26, r26
     8b0:	0e d0       	rcall	.+28     	; 0x8ce <__addsf3x>
     8b2:	75 c1       	rjmp	.+746    	; 0xb9e <__fp_round>
     8b4:	66 d1       	rcall	.+716    	; 0xb82 <__fp_pscA>
     8b6:	30 f0       	brcs	.+12     	; 0x8c4 <__addsf3+0x18>
     8b8:	6b d1       	rcall	.+726    	; 0xb90 <__fp_pscB>
     8ba:	20 f0       	brcs	.+8      	; 0x8c4 <__addsf3+0x18>
     8bc:	31 f4       	brne	.+12     	; 0x8ca <__addsf3+0x1e>
     8be:	9f 3f       	cpi	r25, 0xFF	; 255
     8c0:	11 f4       	brne	.+4      	; 0x8c6 <__addsf3+0x1a>
     8c2:	1e f4       	brtc	.+6      	; 0x8ca <__addsf3+0x1e>
     8c4:	5b c1       	rjmp	.+694    	; 0xb7c <__fp_nan>
     8c6:	0e f4       	brtc	.+2      	; 0x8ca <__addsf3+0x1e>
     8c8:	e0 95       	com	r30
     8ca:	e7 fb       	bst	r30, 7
     8cc:	51 c1       	rjmp	.+674    	; 0xb70 <__fp_inf>

000008ce <__addsf3x>:
     8ce:	e9 2f       	mov	r30, r25
     8d0:	77 d1       	rcall	.+750    	; 0xbc0 <__fp_split3>
     8d2:	80 f3       	brcs	.-32     	; 0x8b4 <__addsf3+0x8>
     8d4:	ba 17       	cp	r27, r26
     8d6:	62 07       	cpc	r22, r18
     8d8:	73 07       	cpc	r23, r19
     8da:	84 07       	cpc	r24, r20
     8dc:	95 07       	cpc	r25, r21
     8de:	18 f0       	brcs	.+6      	; 0x8e6 <__addsf3x+0x18>
     8e0:	71 f4       	brne	.+28     	; 0x8fe <__addsf3x+0x30>
     8e2:	9e f5       	brtc	.+102    	; 0x94a <__stack+0x4b>
     8e4:	8f c1       	rjmp	.+798    	; 0xc04 <__fp_zero>
     8e6:	0e f4       	brtc	.+2      	; 0x8ea <__addsf3x+0x1c>
     8e8:	e0 95       	com	r30
     8ea:	0b 2e       	mov	r0, r27
     8ec:	ba 2f       	mov	r27, r26
     8ee:	a0 2d       	mov	r26, r0
     8f0:	0b 01       	movw	r0, r22
     8f2:	b9 01       	movw	r22, r18
     8f4:	90 01       	movw	r18, r0
     8f6:	0c 01       	movw	r0, r24
     8f8:	ca 01       	movw	r24, r20
     8fa:	a0 01       	movw	r20, r0
     8fc:	11 24       	eor	r1, r1
     8fe:	ff 27       	eor	r31, r31
     900:	59 1b       	sub	r21, r25
     902:	99 f0       	breq	.+38     	; 0x92a <__stack+0x2b>
     904:	59 3f       	cpi	r21, 0xF9	; 249
     906:	50 f4       	brcc	.+20     	; 0x91c <__stack+0x1d>
     908:	50 3e       	cpi	r21, 0xE0	; 224
     90a:	68 f1       	brcs	.+90     	; 0x966 <__stack+0x67>
     90c:	1a 16       	cp	r1, r26
     90e:	f0 40       	sbci	r31, 0x00	; 0
     910:	a2 2f       	mov	r26, r18
     912:	23 2f       	mov	r18, r19
     914:	34 2f       	mov	r19, r20
     916:	44 27       	eor	r20, r20
     918:	58 5f       	subi	r21, 0xF8	; 248
     91a:	f3 cf       	rjmp	.-26     	; 0x902 <__stack+0x3>
     91c:	46 95       	lsr	r20
     91e:	37 95       	ror	r19
     920:	27 95       	ror	r18
     922:	a7 95       	ror	r26
     924:	f0 40       	sbci	r31, 0x00	; 0
     926:	53 95       	inc	r21
     928:	c9 f7       	brne	.-14     	; 0x91c <__stack+0x1d>
     92a:	7e f4       	brtc	.+30     	; 0x94a <__stack+0x4b>
     92c:	1f 16       	cp	r1, r31
     92e:	ba 0b       	sbc	r27, r26
     930:	62 0b       	sbc	r22, r18
     932:	73 0b       	sbc	r23, r19
     934:	84 0b       	sbc	r24, r20
     936:	ba f0       	brmi	.+46     	; 0x966 <__stack+0x67>
     938:	91 50       	subi	r25, 0x01	; 1
     93a:	a1 f0       	breq	.+40     	; 0x964 <__stack+0x65>
     93c:	ff 0f       	add	r31, r31
     93e:	bb 1f       	adc	r27, r27
     940:	66 1f       	adc	r22, r22
     942:	77 1f       	adc	r23, r23
     944:	88 1f       	adc	r24, r24
     946:	c2 f7       	brpl	.-16     	; 0x938 <__stack+0x39>
     948:	0e c0       	rjmp	.+28     	; 0x966 <__stack+0x67>
     94a:	ba 0f       	add	r27, r26
     94c:	62 1f       	adc	r22, r18
     94e:	73 1f       	adc	r23, r19
     950:	84 1f       	adc	r24, r20
     952:	48 f4       	brcc	.+18     	; 0x966 <__stack+0x67>
     954:	87 95       	ror	r24
     956:	77 95       	ror	r23
     958:	67 95       	ror	r22
     95a:	b7 95       	ror	r27
     95c:	f7 95       	ror	r31
     95e:	9e 3f       	cpi	r25, 0xFE	; 254
     960:	08 f0       	brcs	.+2      	; 0x964 <__stack+0x65>
     962:	b3 cf       	rjmp	.-154    	; 0x8ca <__addsf3+0x1e>
     964:	93 95       	inc	r25
     966:	88 0f       	add	r24, r24
     968:	08 f0       	brcs	.+2      	; 0x96c <__stack+0x6d>
     96a:	99 27       	eor	r25, r25
     96c:	ee 0f       	add	r30, r30
     96e:	97 95       	ror	r25
     970:	87 95       	ror	r24
     972:	08 95       	ret

00000974 <__cmpsf2>:
     974:	d9 d0       	rcall	.+434    	; 0xb28 <__fp_cmp>
     976:	08 f4       	brcc	.+2      	; 0x97a <__cmpsf2+0x6>
     978:	81 e0       	ldi	r24, 0x01	; 1
     97a:	08 95       	ret

0000097c <__divsf3>:
     97c:	0c d0       	rcall	.+24     	; 0x996 <__divsf3x>
     97e:	0f c1       	rjmp	.+542    	; 0xb9e <__fp_round>
     980:	07 d1       	rcall	.+526    	; 0xb90 <__fp_pscB>
     982:	40 f0       	brcs	.+16     	; 0x994 <__divsf3+0x18>
     984:	fe d0       	rcall	.+508    	; 0xb82 <__fp_pscA>
     986:	30 f0       	brcs	.+12     	; 0x994 <__divsf3+0x18>
     988:	21 f4       	brne	.+8      	; 0x992 <__divsf3+0x16>
     98a:	5f 3f       	cpi	r21, 0xFF	; 255
     98c:	19 f0       	breq	.+6      	; 0x994 <__divsf3+0x18>
     98e:	f0 c0       	rjmp	.+480    	; 0xb70 <__fp_inf>
     990:	51 11       	cpse	r21, r1
     992:	39 c1       	rjmp	.+626    	; 0xc06 <__fp_szero>
     994:	f3 c0       	rjmp	.+486    	; 0xb7c <__fp_nan>

00000996 <__divsf3x>:
     996:	14 d1       	rcall	.+552    	; 0xbc0 <__fp_split3>
     998:	98 f3       	brcs	.-26     	; 0x980 <__divsf3+0x4>

0000099a <__divsf3_pse>:
     99a:	99 23       	and	r25, r25
     99c:	c9 f3       	breq	.-14     	; 0x990 <__divsf3+0x14>
     99e:	55 23       	and	r21, r21
     9a0:	b1 f3       	breq	.-20     	; 0x98e <__divsf3+0x12>
     9a2:	95 1b       	sub	r25, r21
     9a4:	55 0b       	sbc	r21, r21
     9a6:	bb 27       	eor	r27, r27
     9a8:	aa 27       	eor	r26, r26
     9aa:	62 17       	cp	r22, r18
     9ac:	73 07       	cpc	r23, r19
     9ae:	84 07       	cpc	r24, r20
     9b0:	38 f0       	brcs	.+14     	; 0x9c0 <__divsf3_pse+0x26>
     9b2:	9f 5f       	subi	r25, 0xFF	; 255
     9b4:	5f 4f       	sbci	r21, 0xFF	; 255
     9b6:	22 0f       	add	r18, r18
     9b8:	33 1f       	adc	r19, r19
     9ba:	44 1f       	adc	r20, r20
     9bc:	aa 1f       	adc	r26, r26
     9be:	a9 f3       	breq	.-22     	; 0x9aa <__divsf3_pse+0x10>
     9c0:	33 d0       	rcall	.+102    	; 0xa28 <__divsf3_pse+0x8e>
     9c2:	0e 2e       	mov	r0, r30
     9c4:	3a f0       	brmi	.+14     	; 0x9d4 <__divsf3_pse+0x3a>
     9c6:	e0 e8       	ldi	r30, 0x80	; 128
     9c8:	30 d0       	rcall	.+96     	; 0xa2a <__divsf3_pse+0x90>
     9ca:	91 50       	subi	r25, 0x01	; 1
     9cc:	50 40       	sbci	r21, 0x00	; 0
     9ce:	e6 95       	lsr	r30
     9d0:	00 1c       	adc	r0, r0
     9d2:	ca f7       	brpl	.-14     	; 0x9c6 <__divsf3_pse+0x2c>
     9d4:	29 d0       	rcall	.+82     	; 0xa28 <__divsf3_pse+0x8e>
     9d6:	fe 2f       	mov	r31, r30
     9d8:	27 d0       	rcall	.+78     	; 0xa28 <__divsf3_pse+0x8e>
     9da:	66 0f       	add	r22, r22
     9dc:	77 1f       	adc	r23, r23
     9de:	88 1f       	adc	r24, r24
     9e0:	bb 1f       	adc	r27, r27
     9e2:	26 17       	cp	r18, r22
     9e4:	37 07       	cpc	r19, r23
     9e6:	48 07       	cpc	r20, r24
     9e8:	ab 07       	cpc	r26, r27
     9ea:	b0 e8       	ldi	r27, 0x80	; 128
     9ec:	09 f0       	breq	.+2      	; 0x9f0 <__divsf3_pse+0x56>
     9ee:	bb 0b       	sbc	r27, r27
     9f0:	80 2d       	mov	r24, r0
     9f2:	bf 01       	movw	r22, r30
     9f4:	ff 27       	eor	r31, r31
     9f6:	93 58       	subi	r25, 0x83	; 131
     9f8:	5f 4f       	sbci	r21, 0xFF	; 255
     9fa:	2a f0       	brmi	.+10     	; 0xa06 <__divsf3_pse+0x6c>
     9fc:	9e 3f       	cpi	r25, 0xFE	; 254
     9fe:	51 05       	cpc	r21, r1
     a00:	68 f0       	brcs	.+26     	; 0xa1c <__divsf3_pse+0x82>
     a02:	b6 c0       	rjmp	.+364    	; 0xb70 <__fp_inf>
     a04:	00 c1       	rjmp	.+512    	; 0xc06 <__fp_szero>
     a06:	5f 3f       	cpi	r21, 0xFF	; 255
     a08:	ec f3       	brlt	.-6      	; 0xa04 <__divsf3_pse+0x6a>
     a0a:	98 3e       	cpi	r25, 0xE8	; 232
     a0c:	dc f3       	brlt	.-10     	; 0xa04 <__divsf3_pse+0x6a>
     a0e:	86 95       	lsr	r24
     a10:	77 95       	ror	r23
     a12:	67 95       	ror	r22
     a14:	b7 95       	ror	r27
     a16:	f7 95       	ror	r31
     a18:	9f 5f       	subi	r25, 0xFF	; 255
     a1a:	c9 f7       	brne	.-14     	; 0xa0e <__divsf3_pse+0x74>
     a1c:	88 0f       	add	r24, r24
     a1e:	91 1d       	adc	r25, r1
     a20:	96 95       	lsr	r25
     a22:	87 95       	ror	r24
     a24:	97 f9       	bld	r25, 7
     a26:	08 95       	ret
     a28:	e1 e0       	ldi	r30, 0x01	; 1
     a2a:	66 0f       	add	r22, r22
     a2c:	77 1f       	adc	r23, r23
     a2e:	88 1f       	adc	r24, r24
     a30:	bb 1f       	adc	r27, r27
     a32:	62 17       	cp	r22, r18
     a34:	73 07       	cpc	r23, r19
     a36:	84 07       	cpc	r24, r20
     a38:	ba 07       	cpc	r27, r26
     a3a:	20 f0       	brcs	.+8      	; 0xa44 <__divsf3_pse+0xaa>
     a3c:	62 1b       	sub	r22, r18
     a3e:	73 0b       	sbc	r23, r19
     a40:	84 0b       	sbc	r24, r20
     a42:	ba 0b       	sbc	r27, r26
     a44:	ee 1f       	adc	r30, r30
     a46:	88 f7       	brcc	.-30     	; 0xa2a <__divsf3_pse+0x90>
     a48:	e0 95       	com	r30
     a4a:	08 95       	ret

00000a4c <__fixsfsi>:
     a4c:	04 d0       	rcall	.+8      	; 0xa56 <__fixunssfsi>
     a4e:	68 94       	set
     a50:	b1 11       	cpse	r27, r1
     a52:	d9 c0       	rjmp	.+434    	; 0xc06 <__fp_szero>
     a54:	08 95       	ret

00000a56 <__fixunssfsi>:
     a56:	bc d0       	rcall	.+376    	; 0xbd0 <__fp_splitA>
     a58:	88 f0       	brcs	.+34     	; 0xa7c <__fixunssfsi+0x26>
     a5a:	9f 57       	subi	r25, 0x7F	; 127
     a5c:	90 f0       	brcs	.+36     	; 0xa82 <__fixunssfsi+0x2c>
     a5e:	b9 2f       	mov	r27, r25
     a60:	99 27       	eor	r25, r25
     a62:	b7 51       	subi	r27, 0x17	; 23
     a64:	a0 f0       	brcs	.+40     	; 0xa8e <__fixunssfsi+0x38>
     a66:	d1 f0       	breq	.+52     	; 0xa9c <__fixunssfsi+0x46>
     a68:	66 0f       	add	r22, r22
     a6a:	77 1f       	adc	r23, r23
     a6c:	88 1f       	adc	r24, r24
     a6e:	99 1f       	adc	r25, r25
     a70:	1a f0       	brmi	.+6      	; 0xa78 <__fixunssfsi+0x22>
     a72:	ba 95       	dec	r27
     a74:	c9 f7       	brne	.-14     	; 0xa68 <__fixunssfsi+0x12>
     a76:	12 c0       	rjmp	.+36     	; 0xa9c <__fixunssfsi+0x46>
     a78:	b1 30       	cpi	r27, 0x01	; 1
     a7a:	81 f0       	breq	.+32     	; 0xa9c <__fixunssfsi+0x46>
     a7c:	c3 d0       	rcall	.+390    	; 0xc04 <__fp_zero>
     a7e:	b1 e0       	ldi	r27, 0x01	; 1
     a80:	08 95       	ret
     a82:	c0 c0       	rjmp	.+384    	; 0xc04 <__fp_zero>
     a84:	67 2f       	mov	r22, r23
     a86:	78 2f       	mov	r23, r24
     a88:	88 27       	eor	r24, r24
     a8a:	b8 5f       	subi	r27, 0xF8	; 248
     a8c:	39 f0       	breq	.+14     	; 0xa9c <__fixunssfsi+0x46>
     a8e:	b9 3f       	cpi	r27, 0xF9	; 249
     a90:	cc f3       	brlt	.-14     	; 0xa84 <__fixunssfsi+0x2e>
     a92:	86 95       	lsr	r24
     a94:	77 95       	ror	r23
     a96:	67 95       	ror	r22
     a98:	b3 95       	inc	r27
     a9a:	d9 f7       	brne	.-10     	; 0xa92 <__fixunssfsi+0x3c>
     a9c:	3e f4       	brtc	.+14     	; 0xaac <__fixunssfsi+0x56>
     a9e:	90 95       	com	r25
     aa0:	80 95       	com	r24
     aa2:	70 95       	com	r23
     aa4:	61 95       	neg	r22
     aa6:	7f 4f       	sbci	r23, 0xFF	; 255
     aa8:	8f 4f       	sbci	r24, 0xFF	; 255
     aaa:	9f 4f       	sbci	r25, 0xFF	; 255
     aac:	08 95       	ret

00000aae <__floatunsisf>:
     aae:	e8 94       	clt
     ab0:	09 c0       	rjmp	.+18     	; 0xac4 <__floatsisf+0x12>

00000ab2 <__floatsisf>:
     ab2:	97 fb       	bst	r25, 7
     ab4:	3e f4       	brtc	.+14     	; 0xac4 <__floatsisf+0x12>
     ab6:	90 95       	com	r25
     ab8:	80 95       	com	r24
     aba:	70 95       	com	r23
     abc:	61 95       	neg	r22
     abe:	7f 4f       	sbci	r23, 0xFF	; 255
     ac0:	8f 4f       	sbci	r24, 0xFF	; 255
     ac2:	9f 4f       	sbci	r25, 0xFF	; 255
     ac4:	99 23       	and	r25, r25
     ac6:	a9 f0       	breq	.+42     	; 0xaf2 <__floatsisf+0x40>
     ac8:	f9 2f       	mov	r31, r25
     aca:	96 e9       	ldi	r25, 0x96	; 150
     acc:	bb 27       	eor	r27, r27
     ace:	93 95       	inc	r25
     ad0:	f6 95       	lsr	r31
     ad2:	87 95       	ror	r24
     ad4:	77 95       	ror	r23
     ad6:	67 95       	ror	r22
     ad8:	b7 95       	ror	r27
     ada:	f1 11       	cpse	r31, r1
     adc:	f8 cf       	rjmp	.-16     	; 0xace <__floatsisf+0x1c>
     ade:	fa f4       	brpl	.+62     	; 0xb1e <__floatsisf+0x6c>
     ae0:	bb 0f       	add	r27, r27
     ae2:	11 f4       	brne	.+4      	; 0xae8 <__floatsisf+0x36>
     ae4:	60 ff       	sbrs	r22, 0
     ae6:	1b c0       	rjmp	.+54     	; 0xb1e <__floatsisf+0x6c>
     ae8:	6f 5f       	subi	r22, 0xFF	; 255
     aea:	7f 4f       	sbci	r23, 0xFF	; 255
     aec:	8f 4f       	sbci	r24, 0xFF	; 255
     aee:	9f 4f       	sbci	r25, 0xFF	; 255
     af0:	16 c0       	rjmp	.+44     	; 0xb1e <__floatsisf+0x6c>
     af2:	88 23       	and	r24, r24
     af4:	11 f0       	breq	.+4      	; 0xafa <__floatsisf+0x48>
     af6:	96 e9       	ldi	r25, 0x96	; 150
     af8:	11 c0       	rjmp	.+34     	; 0xb1c <__floatsisf+0x6a>
     afa:	77 23       	and	r23, r23
     afc:	21 f0       	breq	.+8      	; 0xb06 <__floatsisf+0x54>
     afe:	9e e8       	ldi	r25, 0x8E	; 142
     b00:	87 2f       	mov	r24, r23
     b02:	76 2f       	mov	r23, r22
     b04:	05 c0       	rjmp	.+10     	; 0xb10 <__floatsisf+0x5e>
     b06:	66 23       	and	r22, r22
     b08:	71 f0       	breq	.+28     	; 0xb26 <__floatsisf+0x74>
     b0a:	96 e8       	ldi	r25, 0x86	; 134
     b0c:	86 2f       	mov	r24, r22
     b0e:	70 e0       	ldi	r23, 0x00	; 0
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	2a f0       	brmi	.+10     	; 0xb1e <__floatsisf+0x6c>
     b14:	9a 95       	dec	r25
     b16:	66 0f       	add	r22, r22
     b18:	77 1f       	adc	r23, r23
     b1a:	88 1f       	adc	r24, r24
     b1c:	da f7       	brpl	.-10     	; 0xb14 <__floatsisf+0x62>
     b1e:	88 0f       	add	r24, r24
     b20:	96 95       	lsr	r25
     b22:	87 95       	ror	r24
     b24:	97 f9       	bld	r25, 7
     b26:	08 95       	ret

00000b28 <__fp_cmp>:
     b28:	99 0f       	add	r25, r25
     b2a:	00 08       	sbc	r0, r0
     b2c:	55 0f       	add	r21, r21
     b2e:	aa 0b       	sbc	r26, r26
     b30:	e0 e8       	ldi	r30, 0x80	; 128
     b32:	fe ef       	ldi	r31, 0xFE	; 254
     b34:	16 16       	cp	r1, r22
     b36:	17 06       	cpc	r1, r23
     b38:	e8 07       	cpc	r30, r24
     b3a:	f9 07       	cpc	r31, r25
     b3c:	c0 f0       	brcs	.+48     	; 0xb6e <__fp_cmp+0x46>
     b3e:	12 16       	cp	r1, r18
     b40:	13 06       	cpc	r1, r19
     b42:	e4 07       	cpc	r30, r20
     b44:	f5 07       	cpc	r31, r21
     b46:	98 f0       	brcs	.+38     	; 0xb6e <__fp_cmp+0x46>
     b48:	62 1b       	sub	r22, r18
     b4a:	73 0b       	sbc	r23, r19
     b4c:	84 0b       	sbc	r24, r20
     b4e:	95 0b       	sbc	r25, r21
     b50:	39 f4       	brne	.+14     	; 0xb60 <__fp_cmp+0x38>
     b52:	0a 26       	eor	r0, r26
     b54:	61 f0       	breq	.+24     	; 0xb6e <__fp_cmp+0x46>
     b56:	23 2b       	or	r18, r19
     b58:	24 2b       	or	r18, r20
     b5a:	25 2b       	or	r18, r21
     b5c:	21 f4       	brne	.+8      	; 0xb66 <__fp_cmp+0x3e>
     b5e:	08 95       	ret
     b60:	0a 26       	eor	r0, r26
     b62:	09 f4       	brne	.+2      	; 0xb66 <__fp_cmp+0x3e>
     b64:	a1 40       	sbci	r26, 0x01	; 1
     b66:	a6 95       	lsr	r26
     b68:	8f ef       	ldi	r24, 0xFF	; 255
     b6a:	81 1d       	adc	r24, r1
     b6c:	81 1d       	adc	r24, r1
     b6e:	08 95       	ret

00000b70 <__fp_inf>:
     b70:	97 f9       	bld	r25, 7
     b72:	9f 67       	ori	r25, 0x7F	; 127
     b74:	80 e8       	ldi	r24, 0x80	; 128
     b76:	70 e0       	ldi	r23, 0x00	; 0
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	08 95       	ret

00000b7c <__fp_nan>:
     b7c:	9f ef       	ldi	r25, 0xFF	; 255
     b7e:	80 ec       	ldi	r24, 0xC0	; 192
     b80:	08 95       	ret

00000b82 <__fp_pscA>:
     b82:	00 24       	eor	r0, r0
     b84:	0a 94       	dec	r0
     b86:	16 16       	cp	r1, r22
     b88:	17 06       	cpc	r1, r23
     b8a:	18 06       	cpc	r1, r24
     b8c:	09 06       	cpc	r0, r25
     b8e:	08 95       	ret

00000b90 <__fp_pscB>:
     b90:	00 24       	eor	r0, r0
     b92:	0a 94       	dec	r0
     b94:	12 16       	cp	r1, r18
     b96:	13 06       	cpc	r1, r19
     b98:	14 06       	cpc	r1, r20
     b9a:	05 06       	cpc	r0, r21
     b9c:	08 95       	ret

00000b9e <__fp_round>:
     b9e:	09 2e       	mov	r0, r25
     ba0:	03 94       	inc	r0
     ba2:	00 0c       	add	r0, r0
     ba4:	11 f4       	brne	.+4      	; 0xbaa <__fp_round+0xc>
     ba6:	88 23       	and	r24, r24
     ba8:	52 f0       	brmi	.+20     	; 0xbbe <__fp_round+0x20>
     baa:	bb 0f       	add	r27, r27
     bac:	40 f4       	brcc	.+16     	; 0xbbe <__fp_round+0x20>
     bae:	bf 2b       	or	r27, r31
     bb0:	11 f4       	brne	.+4      	; 0xbb6 <__fp_round+0x18>
     bb2:	60 ff       	sbrs	r22, 0
     bb4:	04 c0       	rjmp	.+8      	; 0xbbe <__fp_round+0x20>
     bb6:	6f 5f       	subi	r22, 0xFF	; 255
     bb8:	7f 4f       	sbci	r23, 0xFF	; 255
     bba:	8f 4f       	sbci	r24, 0xFF	; 255
     bbc:	9f 4f       	sbci	r25, 0xFF	; 255
     bbe:	08 95       	ret

00000bc0 <__fp_split3>:
     bc0:	57 fd       	sbrc	r21, 7
     bc2:	90 58       	subi	r25, 0x80	; 128
     bc4:	44 0f       	add	r20, r20
     bc6:	55 1f       	adc	r21, r21
     bc8:	59 f0       	breq	.+22     	; 0xbe0 <__fp_splitA+0x10>
     bca:	5f 3f       	cpi	r21, 0xFF	; 255
     bcc:	71 f0       	breq	.+28     	; 0xbea <__fp_splitA+0x1a>
     bce:	47 95       	ror	r20

00000bd0 <__fp_splitA>:
     bd0:	88 0f       	add	r24, r24
     bd2:	97 fb       	bst	r25, 7
     bd4:	99 1f       	adc	r25, r25
     bd6:	61 f0       	breq	.+24     	; 0xbf0 <__fp_splitA+0x20>
     bd8:	9f 3f       	cpi	r25, 0xFF	; 255
     bda:	79 f0       	breq	.+30     	; 0xbfa <__fp_splitA+0x2a>
     bdc:	87 95       	ror	r24
     bde:	08 95       	ret
     be0:	12 16       	cp	r1, r18
     be2:	13 06       	cpc	r1, r19
     be4:	14 06       	cpc	r1, r20
     be6:	55 1f       	adc	r21, r21
     be8:	f2 cf       	rjmp	.-28     	; 0xbce <__fp_split3+0xe>
     bea:	46 95       	lsr	r20
     bec:	f1 df       	rcall	.-30     	; 0xbd0 <__fp_splitA>
     bee:	08 c0       	rjmp	.+16     	; 0xc00 <__fp_splitA+0x30>
     bf0:	16 16       	cp	r1, r22
     bf2:	17 06       	cpc	r1, r23
     bf4:	18 06       	cpc	r1, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	f1 cf       	rjmp	.-30     	; 0xbdc <__fp_splitA+0xc>
     bfa:	86 95       	lsr	r24
     bfc:	71 05       	cpc	r23, r1
     bfe:	61 05       	cpc	r22, r1
     c00:	08 94       	sec
     c02:	08 95       	ret

00000c04 <__fp_zero>:
     c04:	e8 94       	clt

00000c06 <__fp_szero>:
     c06:	bb 27       	eor	r27, r27
     c08:	66 27       	eor	r22, r22
     c0a:	77 27       	eor	r23, r23
     c0c:	cb 01       	movw	r24, r22
     c0e:	97 f9       	bld	r25, 7
     c10:	08 95       	ret

00000c12 <__gesf2>:
     c12:	8a df       	rcall	.-236    	; 0xb28 <__fp_cmp>
     c14:	08 f4       	brcc	.+2      	; 0xc18 <__gesf2+0x6>
     c16:	8f ef       	ldi	r24, 0xFF	; 255
     c18:	08 95       	ret

00000c1a <__mulsf3>:
     c1a:	0b d0       	rcall	.+22     	; 0xc32 <__mulsf3x>
     c1c:	c0 cf       	rjmp	.-128    	; 0xb9e <__fp_round>
     c1e:	b1 df       	rcall	.-158    	; 0xb82 <__fp_pscA>
     c20:	28 f0       	brcs	.+10     	; 0xc2c <__mulsf3+0x12>
     c22:	b6 df       	rcall	.-148    	; 0xb90 <__fp_pscB>
     c24:	18 f0       	brcs	.+6      	; 0xc2c <__mulsf3+0x12>
     c26:	95 23       	and	r25, r21
     c28:	09 f0       	breq	.+2      	; 0xc2c <__mulsf3+0x12>
     c2a:	a2 cf       	rjmp	.-188    	; 0xb70 <__fp_inf>
     c2c:	a7 cf       	rjmp	.-178    	; 0xb7c <__fp_nan>
     c2e:	11 24       	eor	r1, r1
     c30:	ea cf       	rjmp	.-44     	; 0xc06 <__fp_szero>

00000c32 <__mulsf3x>:
     c32:	c6 df       	rcall	.-116    	; 0xbc0 <__fp_split3>
     c34:	a0 f3       	brcs	.-24     	; 0xc1e <__mulsf3+0x4>

00000c36 <__mulsf3_pse>:
     c36:	95 9f       	mul	r25, r21
     c38:	d1 f3       	breq	.-12     	; 0xc2e <__mulsf3+0x14>
     c3a:	95 0f       	add	r25, r21
     c3c:	50 e0       	ldi	r21, 0x00	; 0
     c3e:	55 1f       	adc	r21, r21
     c40:	62 9f       	mul	r22, r18
     c42:	f0 01       	movw	r30, r0
     c44:	72 9f       	mul	r23, r18
     c46:	bb 27       	eor	r27, r27
     c48:	f0 0d       	add	r31, r0
     c4a:	b1 1d       	adc	r27, r1
     c4c:	63 9f       	mul	r22, r19
     c4e:	aa 27       	eor	r26, r26
     c50:	f0 0d       	add	r31, r0
     c52:	b1 1d       	adc	r27, r1
     c54:	aa 1f       	adc	r26, r26
     c56:	64 9f       	mul	r22, r20
     c58:	66 27       	eor	r22, r22
     c5a:	b0 0d       	add	r27, r0
     c5c:	a1 1d       	adc	r26, r1
     c5e:	66 1f       	adc	r22, r22
     c60:	82 9f       	mul	r24, r18
     c62:	22 27       	eor	r18, r18
     c64:	b0 0d       	add	r27, r0
     c66:	a1 1d       	adc	r26, r1
     c68:	62 1f       	adc	r22, r18
     c6a:	73 9f       	mul	r23, r19
     c6c:	b0 0d       	add	r27, r0
     c6e:	a1 1d       	adc	r26, r1
     c70:	62 1f       	adc	r22, r18
     c72:	83 9f       	mul	r24, r19
     c74:	a0 0d       	add	r26, r0
     c76:	61 1d       	adc	r22, r1
     c78:	22 1f       	adc	r18, r18
     c7a:	74 9f       	mul	r23, r20
     c7c:	33 27       	eor	r19, r19
     c7e:	a0 0d       	add	r26, r0
     c80:	61 1d       	adc	r22, r1
     c82:	23 1f       	adc	r18, r19
     c84:	84 9f       	mul	r24, r20
     c86:	60 0d       	add	r22, r0
     c88:	21 1d       	adc	r18, r1
     c8a:	82 2f       	mov	r24, r18
     c8c:	76 2f       	mov	r23, r22
     c8e:	6a 2f       	mov	r22, r26
     c90:	11 24       	eor	r1, r1
     c92:	9f 57       	subi	r25, 0x7F	; 127
     c94:	50 40       	sbci	r21, 0x00	; 0
     c96:	8a f0       	brmi	.+34     	; 0xcba <__mulsf3_pse+0x84>
     c98:	e1 f0       	breq	.+56     	; 0xcd2 <__mulsf3_pse+0x9c>
     c9a:	88 23       	and	r24, r24
     c9c:	4a f0       	brmi	.+18     	; 0xcb0 <__mulsf3_pse+0x7a>
     c9e:	ee 0f       	add	r30, r30
     ca0:	ff 1f       	adc	r31, r31
     ca2:	bb 1f       	adc	r27, r27
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	88 1f       	adc	r24, r24
     caa:	91 50       	subi	r25, 0x01	; 1
     cac:	50 40       	sbci	r21, 0x00	; 0
     cae:	a9 f7       	brne	.-22     	; 0xc9a <__mulsf3_pse+0x64>
     cb0:	9e 3f       	cpi	r25, 0xFE	; 254
     cb2:	51 05       	cpc	r21, r1
     cb4:	70 f0       	brcs	.+28     	; 0xcd2 <__mulsf3_pse+0x9c>
     cb6:	5c cf       	rjmp	.-328    	; 0xb70 <__fp_inf>
     cb8:	a6 cf       	rjmp	.-180    	; 0xc06 <__fp_szero>
     cba:	5f 3f       	cpi	r21, 0xFF	; 255
     cbc:	ec f3       	brlt	.-6      	; 0xcb8 <__mulsf3_pse+0x82>
     cbe:	98 3e       	cpi	r25, 0xE8	; 232
     cc0:	dc f3       	brlt	.-10     	; 0xcb8 <__mulsf3_pse+0x82>
     cc2:	86 95       	lsr	r24
     cc4:	77 95       	ror	r23
     cc6:	67 95       	ror	r22
     cc8:	b7 95       	ror	r27
     cca:	f7 95       	ror	r31
     ccc:	e7 95       	ror	r30
     cce:	9f 5f       	subi	r25, 0xFF	; 255
     cd0:	c1 f7       	brne	.-16     	; 0xcc2 <__mulsf3_pse+0x8c>
     cd2:	fe 2b       	or	r31, r30
     cd4:	88 0f       	add	r24, r24
     cd6:	91 1d       	adc	r25, r1
     cd8:	96 95       	lsr	r25
     cda:	87 95       	ror	r24
     cdc:	97 f9       	bld	r25, 7
     cde:	08 95       	ret

00000ce0 <__udivmodhi4>:
     ce0:	aa 1b       	sub	r26, r26
     ce2:	bb 1b       	sub	r27, r27
     ce4:	51 e1       	ldi	r21, 0x11	; 17
     ce6:	07 c0       	rjmp	.+14     	; 0xcf6 <__udivmodhi4_ep>

00000ce8 <__udivmodhi4_loop>:
     ce8:	aa 1f       	adc	r26, r26
     cea:	bb 1f       	adc	r27, r27
     cec:	a6 17       	cp	r26, r22
     cee:	b7 07       	cpc	r27, r23
     cf0:	10 f0       	brcs	.+4      	; 0xcf6 <__udivmodhi4_ep>
     cf2:	a6 1b       	sub	r26, r22
     cf4:	b7 0b       	sbc	r27, r23

00000cf6 <__udivmodhi4_ep>:
     cf6:	88 1f       	adc	r24, r24
     cf8:	99 1f       	adc	r25, r25
     cfa:	5a 95       	dec	r21
     cfc:	a9 f7       	brne	.-22     	; 0xce8 <__udivmodhi4_loop>
     cfe:	80 95       	com	r24
     d00:	90 95       	com	r25
     d02:	bc 01       	movw	r22, r24
     d04:	cd 01       	movw	r24, r26
     d06:	08 95       	ret

00000d08 <printf>:
     d08:	a0 e0       	ldi	r26, 0x00	; 0
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	ea e8       	ldi	r30, 0x8A	; 138
     d0e:	f6 e0       	ldi	r31, 0x06	; 6
     d10:	0c 94 55 09 	jmp	0x12aa	; 0x12aa <__prologue_saves__+0x20>
     d14:	fe 01       	movw	r30, r28
     d16:	35 96       	adiw	r30, 0x05	; 5
     d18:	61 91       	ld	r22, Z+
     d1a:	71 91       	ld	r23, Z+
     d1c:	80 91 3f 01 	lds	r24, 0x013F
     d20:	90 91 40 01 	lds	r25, 0x0140
     d24:	af 01       	movw	r20, r30
     d26:	0e 94 c7 06 	call	0xd8e	; 0xd8e <vfprintf>
     d2a:	20 96       	adiw	r28, 0x00	; 0
     d2c:	e2 e0       	ldi	r30, 0x02	; 2
     d2e:	0c 94 71 09 	jmp	0x12e2	; 0x12e2 <__epilogue_restores__+0x20>

00000d32 <puts>:
     d32:	0f 93       	push	r16
     d34:	1f 93       	push	r17
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
     d3a:	8c 01       	movw	r16, r24
     d3c:	e0 91 3f 01 	lds	r30, 0x013F
     d40:	f0 91 40 01 	lds	r31, 0x0140
     d44:	83 81       	ldd	r24, Z+3	; 0x03
     d46:	81 ff       	sbrs	r24, 1
     d48:	1a c0       	rjmp	.+52     	; 0xd7e <puts+0x4c>
     d4a:	c0 e0       	ldi	r28, 0x00	; 0
     d4c:	d0 e0       	ldi	r29, 0x00	; 0
     d4e:	05 c0       	rjmp	.+10     	; 0xd5a <puts+0x28>
     d50:	09 95       	icall
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	11 f0       	breq	.+4      	; 0xd5a <puts+0x28>
     d56:	cf ef       	ldi	r28, 0xFF	; 255
     d58:	df ef       	ldi	r29, 0xFF	; 255
     d5a:	f8 01       	movw	r30, r16
     d5c:	81 91       	ld	r24, Z+
     d5e:	8f 01       	movw	r16, r30
     d60:	60 91 3f 01 	lds	r22, 0x013F
     d64:	70 91 40 01 	lds	r23, 0x0140
     d68:	db 01       	movw	r26, r22
     d6a:	18 96       	adiw	r26, 0x08	; 8
     d6c:	ed 91       	ld	r30, X+
     d6e:	fc 91       	ld	r31, X
     d70:	19 97       	sbiw	r26, 0x09	; 9
     d72:	88 23       	and	r24, r24
     d74:	69 f7       	brne	.-38     	; 0xd50 <puts+0x1e>
     d76:	8a e0       	ldi	r24, 0x0A	; 10
     d78:	09 95       	icall
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	11 f0       	breq	.+4      	; 0xd82 <puts+0x50>
     d7e:	cf ef       	ldi	r28, 0xFF	; 255
     d80:	df ef       	ldi	r29, 0xFF	; 255
     d82:	ce 01       	movw	r24, r28
     d84:	df 91       	pop	r29
     d86:	cf 91       	pop	r28
     d88:	1f 91       	pop	r17
     d8a:	0f 91       	pop	r16
     d8c:	08 95       	ret

00000d8e <vfprintf>:
     d8e:	ad e0       	ldi	r26, 0x0D	; 13
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	ed ec       	ldi	r30, 0xCD	; 205
     d94:	f6 e0       	ldi	r31, 0x06	; 6
     d96:	0c 94 45 09 	jmp	0x128a	; 0x128a <__prologue_saves__>
     d9a:	3c 01       	movw	r6, r24
     d9c:	7d 87       	std	Y+13, r23	; 0x0d
     d9e:	6c 87       	std	Y+12, r22	; 0x0c
     da0:	5a 01       	movw	r10, r20
     da2:	fc 01       	movw	r30, r24
     da4:	17 82       	std	Z+7, r1	; 0x07
     da6:	16 82       	std	Z+6, r1	; 0x06
     da8:	83 81       	ldd	r24, Z+3	; 0x03
     daa:	81 ff       	sbrs	r24, 1
     dac:	c8 c1       	rjmp	.+912    	; 0x113e <vfprintf+0x3b0>
     dae:	2e 01       	movw	r4, r28
     db0:	08 94       	sec
     db2:	41 1c       	adc	r4, r1
     db4:	51 1c       	adc	r5, r1
     db6:	f3 01       	movw	r30, r6
     db8:	93 81       	ldd	r25, Z+3	; 0x03
     dba:	ec 85       	ldd	r30, Y+12	; 0x0c
     dbc:	fd 85       	ldd	r31, Y+13	; 0x0d
     dbe:	93 fd       	sbrc	r25, 3
     dc0:	85 91       	lpm	r24, Z+
     dc2:	93 ff       	sbrs	r25, 3
     dc4:	81 91       	ld	r24, Z+
     dc6:	fd 87       	std	Y+13, r31	; 0x0d
     dc8:	ec 87       	std	Y+12, r30	; 0x0c
     dca:	88 23       	and	r24, r24
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <vfprintf+0x42>
     dce:	b3 c1       	rjmp	.+870    	; 0x1136 <vfprintf+0x3a8>
     dd0:	85 32       	cpi	r24, 0x25	; 37
     dd2:	41 f4       	brne	.+16     	; 0xde4 <vfprintf+0x56>
     dd4:	93 fd       	sbrc	r25, 3
     dd6:	85 91       	lpm	r24, Z+
     dd8:	93 ff       	sbrs	r25, 3
     dda:	81 91       	ld	r24, Z+
     ddc:	fd 87       	std	Y+13, r31	; 0x0d
     dde:	ec 87       	std	Y+12, r30	; 0x0c
     de0:	85 32       	cpi	r24, 0x25	; 37
     de2:	29 f4       	brne	.+10     	; 0xdee <vfprintf+0x60>
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	b3 01       	movw	r22, r6
     de8:	0e 94 bb 08 	call	0x1176	; 0x1176 <fputc>
     dec:	e4 cf       	rjmp	.-56     	; 0xdb6 <vfprintf+0x28>
     dee:	ff 24       	eor	r15, r15
     df0:	ee 24       	eor	r14, r14
     df2:	10 e0       	ldi	r17, 0x00	; 0
     df4:	10 32       	cpi	r17, 0x20	; 32
     df6:	b0 f4       	brcc	.+44     	; 0xe24 <vfprintf+0x96>
     df8:	8b 32       	cpi	r24, 0x2B	; 43
     dfa:	69 f0       	breq	.+26     	; 0xe16 <vfprintf+0x88>
     dfc:	8c 32       	cpi	r24, 0x2C	; 44
     dfe:	28 f4       	brcc	.+10     	; 0xe0a <vfprintf+0x7c>
     e00:	80 32       	cpi	r24, 0x20	; 32
     e02:	51 f0       	breq	.+20     	; 0xe18 <vfprintf+0x8a>
     e04:	83 32       	cpi	r24, 0x23	; 35
     e06:	71 f4       	brne	.+28     	; 0xe24 <vfprintf+0x96>
     e08:	0b c0       	rjmp	.+22     	; 0xe20 <vfprintf+0x92>
     e0a:	8d 32       	cpi	r24, 0x2D	; 45
     e0c:	39 f0       	breq	.+14     	; 0xe1c <vfprintf+0x8e>
     e0e:	80 33       	cpi	r24, 0x30	; 48
     e10:	49 f4       	brne	.+18     	; 0xe24 <vfprintf+0x96>
     e12:	11 60       	ori	r17, 0x01	; 1
     e14:	2c c0       	rjmp	.+88     	; 0xe6e <vfprintf+0xe0>
     e16:	12 60       	ori	r17, 0x02	; 2
     e18:	14 60       	ori	r17, 0x04	; 4
     e1a:	29 c0       	rjmp	.+82     	; 0xe6e <vfprintf+0xe0>
     e1c:	18 60       	ori	r17, 0x08	; 8
     e1e:	27 c0       	rjmp	.+78     	; 0xe6e <vfprintf+0xe0>
     e20:	10 61       	ori	r17, 0x10	; 16
     e22:	25 c0       	rjmp	.+74     	; 0xe6e <vfprintf+0xe0>
     e24:	17 fd       	sbrc	r17, 7
     e26:	2e c0       	rjmp	.+92     	; 0xe84 <vfprintf+0xf6>
     e28:	28 2f       	mov	r18, r24
     e2a:	20 53       	subi	r18, 0x30	; 48
     e2c:	2a 30       	cpi	r18, 0x0A	; 10
     e2e:	98 f4       	brcc	.+38     	; 0xe56 <vfprintf+0xc8>
     e30:	16 ff       	sbrs	r17, 6
     e32:	08 c0       	rjmp	.+16     	; 0xe44 <vfprintf+0xb6>
     e34:	8f 2d       	mov	r24, r15
     e36:	88 0f       	add	r24, r24
     e38:	f8 2e       	mov	r15, r24
     e3a:	ff 0c       	add	r15, r15
     e3c:	ff 0c       	add	r15, r15
     e3e:	f8 0e       	add	r15, r24
     e40:	f2 0e       	add	r15, r18
     e42:	15 c0       	rjmp	.+42     	; 0xe6e <vfprintf+0xe0>
     e44:	8e 2d       	mov	r24, r14
     e46:	88 0f       	add	r24, r24
     e48:	e8 2e       	mov	r14, r24
     e4a:	ee 0c       	add	r14, r14
     e4c:	ee 0c       	add	r14, r14
     e4e:	e8 0e       	add	r14, r24
     e50:	e2 0e       	add	r14, r18
     e52:	10 62       	ori	r17, 0x20	; 32
     e54:	0c c0       	rjmp	.+24     	; 0xe6e <vfprintf+0xe0>
     e56:	8e 32       	cpi	r24, 0x2E	; 46
     e58:	21 f4       	brne	.+8      	; 0xe62 <vfprintf+0xd4>
     e5a:	16 fd       	sbrc	r17, 6
     e5c:	6c c1       	rjmp	.+728    	; 0x1136 <vfprintf+0x3a8>
     e5e:	10 64       	ori	r17, 0x40	; 64
     e60:	06 c0       	rjmp	.+12     	; 0xe6e <vfprintf+0xe0>
     e62:	8c 36       	cpi	r24, 0x6C	; 108
     e64:	11 f4       	brne	.+4      	; 0xe6a <vfprintf+0xdc>
     e66:	10 68       	ori	r17, 0x80	; 128
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <vfprintf+0xe0>
     e6a:	88 36       	cpi	r24, 0x68	; 104
     e6c:	59 f4       	brne	.+22     	; 0xe84 <vfprintf+0xf6>
     e6e:	ec 85       	ldd	r30, Y+12	; 0x0c
     e70:	fd 85       	ldd	r31, Y+13	; 0x0d
     e72:	93 fd       	sbrc	r25, 3
     e74:	85 91       	lpm	r24, Z+
     e76:	93 ff       	sbrs	r25, 3
     e78:	81 91       	ld	r24, Z+
     e7a:	fd 87       	std	Y+13, r31	; 0x0d
     e7c:	ec 87       	std	Y+12, r30	; 0x0c
     e7e:	88 23       	and	r24, r24
     e80:	09 f0       	breq	.+2      	; 0xe84 <vfprintf+0xf6>
     e82:	b8 cf       	rjmp	.-144    	; 0xdf4 <vfprintf+0x66>
     e84:	98 2f       	mov	r25, r24
     e86:	95 54       	subi	r25, 0x45	; 69
     e88:	93 30       	cpi	r25, 0x03	; 3
     e8a:	18 f0       	brcs	.+6      	; 0xe92 <vfprintf+0x104>
     e8c:	90 52       	subi	r25, 0x20	; 32
     e8e:	93 30       	cpi	r25, 0x03	; 3
     e90:	38 f4       	brcc	.+14     	; 0xea0 <vfprintf+0x112>
     e92:	24 e0       	ldi	r18, 0x04	; 4
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	a2 0e       	add	r10, r18
     e98:	b3 1e       	adc	r11, r19
     e9a:	3f e3       	ldi	r19, 0x3F	; 63
     e9c:	39 83       	std	Y+1, r19	; 0x01
     e9e:	0f c0       	rjmp	.+30     	; 0xebe <vfprintf+0x130>
     ea0:	83 36       	cpi	r24, 0x63	; 99
     ea2:	31 f0       	breq	.+12     	; 0xeb0 <vfprintf+0x122>
     ea4:	83 37       	cpi	r24, 0x73	; 115
     ea6:	81 f0       	breq	.+32     	; 0xec8 <vfprintf+0x13a>
     ea8:	83 35       	cpi	r24, 0x53	; 83
     eaa:	09 f0       	breq	.+2      	; 0xeae <vfprintf+0x120>
     eac:	5a c0       	rjmp	.+180    	; 0xf62 <vfprintf+0x1d4>
     eae:	22 c0       	rjmp	.+68     	; 0xef4 <vfprintf+0x166>
     eb0:	f5 01       	movw	r30, r10
     eb2:	80 81       	ld	r24, Z
     eb4:	89 83       	std	Y+1, r24	; 0x01
     eb6:	22 e0       	ldi	r18, 0x02	; 2
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	a2 0e       	add	r10, r18
     ebc:	b3 1e       	adc	r11, r19
     ebe:	21 e0       	ldi	r18, 0x01	; 1
     ec0:	c2 2e       	mov	r12, r18
     ec2:	d1 2c       	mov	r13, r1
     ec4:	42 01       	movw	r8, r4
     ec6:	14 c0       	rjmp	.+40     	; 0xef0 <vfprintf+0x162>
     ec8:	92 e0       	ldi	r25, 0x02	; 2
     eca:	29 2e       	mov	r2, r25
     ecc:	31 2c       	mov	r3, r1
     ece:	2a 0c       	add	r2, r10
     ed0:	3b 1c       	adc	r3, r11
     ed2:	f5 01       	movw	r30, r10
     ed4:	80 80       	ld	r8, Z
     ed6:	91 80       	ldd	r9, Z+1	; 0x01
     ed8:	16 ff       	sbrs	r17, 6
     eda:	03 c0       	rjmp	.+6      	; 0xee2 <vfprintf+0x154>
     edc:	6f 2d       	mov	r22, r15
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <vfprintf+0x158>
     ee2:	6f ef       	ldi	r22, 0xFF	; 255
     ee4:	7f ef       	ldi	r23, 0xFF	; 255
     ee6:	c4 01       	movw	r24, r8
     ee8:	0e 94 b0 08 	call	0x1160	; 0x1160 <strnlen>
     eec:	6c 01       	movw	r12, r24
     eee:	51 01       	movw	r10, r2
     ef0:	1f 77       	andi	r17, 0x7F	; 127
     ef2:	15 c0       	rjmp	.+42     	; 0xf1e <vfprintf+0x190>
     ef4:	82 e0       	ldi	r24, 0x02	; 2
     ef6:	28 2e       	mov	r2, r24
     ef8:	31 2c       	mov	r3, r1
     efa:	2a 0c       	add	r2, r10
     efc:	3b 1c       	adc	r3, r11
     efe:	f5 01       	movw	r30, r10
     f00:	80 80       	ld	r8, Z
     f02:	91 80       	ldd	r9, Z+1	; 0x01
     f04:	16 ff       	sbrs	r17, 6
     f06:	03 c0       	rjmp	.+6      	; 0xf0e <vfprintf+0x180>
     f08:	6f 2d       	mov	r22, r15
     f0a:	70 e0       	ldi	r23, 0x00	; 0
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <vfprintf+0x184>
     f0e:	6f ef       	ldi	r22, 0xFF	; 255
     f10:	7f ef       	ldi	r23, 0xFF	; 255
     f12:	c4 01       	movw	r24, r8
     f14:	0e 94 a5 08 	call	0x114a	; 0x114a <strnlen_P>
     f18:	6c 01       	movw	r12, r24
     f1a:	10 68       	ori	r17, 0x80	; 128
     f1c:	51 01       	movw	r10, r2
     f1e:	13 fd       	sbrc	r17, 3
     f20:	1c c0       	rjmp	.+56     	; 0xf5a <vfprintf+0x1cc>
     f22:	06 c0       	rjmp	.+12     	; 0xf30 <vfprintf+0x1a2>
     f24:	80 e2       	ldi	r24, 0x20	; 32
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	b3 01       	movw	r22, r6
     f2a:	0e 94 bb 08 	call	0x1176	; 0x1176 <fputc>
     f2e:	ea 94       	dec	r14
     f30:	8e 2d       	mov	r24, r14
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	c8 16       	cp	r12, r24
     f36:	d9 06       	cpc	r13, r25
     f38:	a8 f3       	brcs	.-22     	; 0xf24 <vfprintf+0x196>
     f3a:	0f c0       	rjmp	.+30     	; 0xf5a <vfprintf+0x1cc>
     f3c:	f4 01       	movw	r30, r8
     f3e:	17 fd       	sbrc	r17, 7
     f40:	85 91       	lpm	r24, Z+
     f42:	17 ff       	sbrs	r17, 7
     f44:	81 91       	ld	r24, Z+
     f46:	4f 01       	movw	r8, r30
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	b3 01       	movw	r22, r6
     f4c:	0e 94 bb 08 	call	0x1176	; 0x1176 <fputc>
     f50:	e1 10       	cpse	r14, r1
     f52:	ea 94       	dec	r14
     f54:	08 94       	sec
     f56:	c1 08       	sbc	r12, r1
     f58:	d1 08       	sbc	r13, r1
     f5a:	c1 14       	cp	r12, r1
     f5c:	d1 04       	cpc	r13, r1
     f5e:	71 f7       	brne	.-36     	; 0xf3c <vfprintf+0x1ae>
     f60:	e7 c0       	rjmp	.+462    	; 0x1130 <vfprintf+0x3a2>
     f62:	84 36       	cpi	r24, 0x64	; 100
     f64:	11 f0       	breq	.+4      	; 0xf6a <vfprintf+0x1dc>
     f66:	89 36       	cpi	r24, 0x69	; 105
     f68:	51 f5       	brne	.+84     	; 0xfbe <vfprintf+0x230>
     f6a:	f5 01       	movw	r30, r10
     f6c:	17 ff       	sbrs	r17, 7
     f6e:	07 c0       	rjmp	.+14     	; 0xf7e <vfprintf+0x1f0>
     f70:	80 81       	ld	r24, Z
     f72:	91 81       	ldd	r25, Z+1	; 0x01
     f74:	a2 81       	ldd	r26, Z+2	; 0x02
     f76:	b3 81       	ldd	r27, Z+3	; 0x03
     f78:	24 e0       	ldi	r18, 0x04	; 4
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	08 c0       	rjmp	.+16     	; 0xf8e <vfprintf+0x200>
     f7e:	80 81       	ld	r24, Z
     f80:	91 81       	ldd	r25, Z+1	; 0x01
     f82:	aa 27       	eor	r26, r26
     f84:	97 fd       	sbrc	r25, 7
     f86:	a0 95       	com	r26
     f88:	ba 2f       	mov	r27, r26
     f8a:	22 e0       	ldi	r18, 0x02	; 2
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	a2 0e       	add	r10, r18
     f90:	b3 1e       	adc	r11, r19
     f92:	01 2f       	mov	r16, r17
     f94:	0f 76       	andi	r16, 0x6F	; 111
     f96:	b7 ff       	sbrs	r27, 7
     f98:	08 c0       	rjmp	.+16     	; 0xfaa <vfprintf+0x21c>
     f9a:	b0 95       	com	r27
     f9c:	a0 95       	com	r26
     f9e:	90 95       	com	r25
     fa0:	81 95       	neg	r24
     fa2:	9f 4f       	sbci	r25, 0xFF	; 255
     fa4:	af 4f       	sbci	r26, 0xFF	; 255
     fa6:	bf 4f       	sbci	r27, 0xFF	; 255
     fa8:	00 68       	ori	r16, 0x80	; 128
     faa:	bc 01       	movw	r22, r24
     fac:	cd 01       	movw	r24, r26
     fae:	a2 01       	movw	r20, r4
     fb0:	2a e0       	ldi	r18, 0x0A	; 10
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__ultoa_invert>
     fb8:	d8 2e       	mov	r13, r24
     fba:	d4 18       	sub	r13, r4
     fbc:	3f c0       	rjmp	.+126    	; 0x103c <vfprintf+0x2ae>
     fbe:	85 37       	cpi	r24, 0x75	; 117
     fc0:	21 f4       	brne	.+8      	; 0xfca <vfprintf+0x23c>
     fc2:	1f 7e       	andi	r17, 0xEF	; 239
     fc4:	2a e0       	ldi	r18, 0x0A	; 10
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	20 c0       	rjmp	.+64     	; 0x100a <vfprintf+0x27c>
     fca:	19 7f       	andi	r17, 0xF9	; 249
     fcc:	8f 36       	cpi	r24, 0x6F	; 111
     fce:	a9 f0       	breq	.+42     	; 0xffa <vfprintf+0x26c>
     fd0:	80 37       	cpi	r24, 0x70	; 112
     fd2:	20 f4       	brcc	.+8      	; 0xfdc <vfprintf+0x24e>
     fd4:	88 35       	cpi	r24, 0x58	; 88
     fd6:	09 f0       	breq	.+2      	; 0xfda <vfprintf+0x24c>
     fd8:	ae c0       	rjmp	.+348    	; 0x1136 <vfprintf+0x3a8>
     fda:	0b c0       	rjmp	.+22     	; 0xff2 <vfprintf+0x264>
     fdc:	80 37       	cpi	r24, 0x70	; 112
     fde:	21 f0       	breq	.+8      	; 0xfe8 <vfprintf+0x25a>
     fe0:	88 37       	cpi	r24, 0x78	; 120
     fe2:	09 f0       	breq	.+2      	; 0xfe6 <vfprintf+0x258>
     fe4:	a8 c0       	rjmp	.+336    	; 0x1136 <vfprintf+0x3a8>
     fe6:	01 c0       	rjmp	.+2      	; 0xfea <vfprintf+0x25c>
     fe8:	10 61       	ori	r17, 0x10	; 16
     fea:	14 ff       	sbrs	r17, 4
     fec:	09 c0       	rjmp	.+18     	; 0x1000 <vfprintf+0x272>
     fee:	14 60       	ori	r17, 0x04	; 4
     ff0:	07 c0       	rjmp	.+14     	; 0x1000 <vfprintf+0x272>
     ff2:	14 ff       	sbrs	r17, 4
     ff4:	08 c0       	rjmp	.+16     	; 0x1006 <vfprintf+0x278>
     ff6:	16 60       	ori	r17, 0x06	; 6
     ff8:	06 c0       	rjmp	.+12     	; 0x1006 <vfprintf+0x278>
     ffa:	28 e0       	ldi	r18, 0x08	; 8
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	05 c0       	rjmp	.+10     	; 0x100a <vfprintf+0x27c>
    1000:	20 e1       	ldi	r18, 0x10	; 16
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	02 c0       	rjmp	.+4      	; 0x100a <vfprintf+0x27c>
    1006:	20 e1       	ldi	r18, 0x10	; 16
    1008:	32 e0       	ldi	r19, 0x02	; 2
    100a:	f5 01       	movw	r30, r10
    100c:	17 ff       	sbrs	r17, 7
    100e:	07 c0       	rjmp	.+14     	; 0x101e <vfprintf+0x290>
    1010:	60 81       	ld	r22, Z
    1012:	71 81       	ldd	r23, Z+1	; 0x01
    1014:	82 81       	ldd	r24, Z+2	; 0x02
    1016:	93 81       	ldd	r25, Z+3	; 0x03
    1018:	44 e0       	ldi	r20, 0x04	; 4
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	06 c0       	rjmp	.+12     	; 0x102a <vfprintf+0x29c>
    101e:	60 81       	ld	r22, Z
    1020:	71 81       	ldd	r23, Z+1	; 0x01
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	42 e0       	ldi	r20, 0x02	; 2
    1028:	50 e0       	ldi	r21, 0x00	; 0
    102a:	a4 0e       	add	r10, r20
    102c:	b5 1e       	adc	r11, r21
    102e:	a2 01       	movw	r20, r4
    1030:	0e 94 e7 08 	call	0x11ce	; 0x11ce <__ultoa_invert>
    1034:	d8 2e       	mov	r13, r24
    1036:	d4 18       	sub	r13, r4
    1038:	01 2f       	mov	r16, r17
    103a:	0f 77       	andi	r16, 0x7F	; 127
    103c:	06 ff       	sbrs	r16, 6
    103e:	09 c0       	rjmp	.+18     	; 0x1052 <vfprintf+0x2c4>
    1040:	0e 7f       	andi	r16, 0xFE	; 254
    1042:	df 14       	cp	r13, r15
    1044:	30 f4       	brcc	.+12     	; 0x1052 <vfprintf+0x2c4>
    1046:	04 ff       	sbrs	r16, 4
    1048:	06 c0       	rjmp	.+12     	; 0x1056 <vfprintf+0x2c8>
    104a:	02 fd       	sbrc	r16, 2
    104c:	04 c0       	rjmp	.+8      	; 0x1056 <vfprintf+0x2c8>
    104e:	0f 7e       	andi	r16, 0xEF	; 239
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <vfprintf+0x2c8>
    1052:	1d 2d       	mov	r17, r13
    1054:	01 c0       	rjmp	.+2      	; 0x1058 <vfprintf+0x2ca>
    1056:	1f 2d       	mov	r17, r15
    1058:	80 2f       	mov	r24, r16
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	04 ff       	sbrs	r16, 4
    105e:	0c c0       	rjmp	.+24     	; 0x1078 <vfprintf+0x2ea>
    1060:	fe 01       	movw	r30, r28
    1062:	ed 0d       	add	r30, r13
    1064:	f1 1d       	adc	r31, r1
    1066:	20 81       	ld	r18, Z
    1068:	20 33       	cpi	r18, 0x30	; 48
    106a:	11 f4       	brne	.+4      	; 0x1070 <vfprintf+0x2e2>
    106c:	09 7e       	andi	r16, 0xE9	; 233
    106e:	09 c0       	rjmp	.+18     	; 0x1082 <vfprintf+0x2f4>
    1070:	02 ff       	sbrs	r16, 2
    1072:	06 c0       	rjmp	.+12     	; 0x1080 <vfprintf+0x2f2>
    1074:	1e 5f       	subi	r17, 0xFE	; 254
    1076:	05 c0       	rjmp	.+10     	; 0x1082 <vfprintf+0x2f4>
    1078:	86 78       	andi	r24, 0x86	; 134
    107a:	90 70       	andi	r25, 0x00	; 0
    107c:	00 97       	sbiw	r24, 0x00	; 0
    107e:	09 f0       	breq	.+2      	; 0x1082 <vfprintf+0x2f4>
    1080:	1f 5f       	subi	r17, 0xFF	; 255
    1082:	80 2e       	mov	r8, r16
    1084:	99 24       	eor	r9, r9
    1086:	03 fd       	sbrc	r16, 3
    1088:	12 c0       	rjmp	.+36     	; 0x10ae <vfprintf+0x320>
    108a:	00 ff       	sbrs	r16, 0
    108c:	0d c0       	rjmp	.+26     	; 0x10a8 <vfprintf+0x31a>
    108e:	fd 2c       	mov	r15, r13
    1090:	1e 15       	cp	r17, r14
    1092:	50 f4       	brcc	.+20     	; 0x10a8 <vfprintf+0x31a>
    1094:	fe 0c       	add	r15, r14
    1096:	f1 1a       	sub	r15, r17
    1098:	1e 2d       	mov	r17, r14
    109a:	06 c0       	rjmp	.+12     	; 0x10a8 <vfprintf+0x31a>
    109c:	80 e2       	ldi	r24, 0x20	; 32
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	b3 01       	movw	r22, r6
    10a2:	0e 94 bb 08 	call	0x1176	; 0x1176 <fputc>
    10a6:	1f 5f       	subi	r17, 0xFF	; 255
    10a8:	1e 15       	cp	r17, r14
    10aa:	c0 f3       	brcs	.-16     	; 0x109c <vfprintf+0x30e>
    10ac:	04 c0       	rjmp	.+8      	; 0x10b6 <vfprintf+0x328>
    10ae:	1e 15       	cp	r17, r14
    10b0:	10 f4       	brcc	.+4      	; 0x10b6 <vfprintf+0x328>
    10b2:	e1 1a       	sub	r14, r17
    10b4:	01 c0       	rjmp	.+2      	; 0x10b8 <vfprintf+0x32a>
    10b6:	ee 24       	eor	r14, r14
    10b8:	84 fe       	sbrs	r8, 4
    10ba:	0f c0       	rjmp	.+30     	; 0x10da <vfprintf+0x34c>
    10bc:	80 e3       	ldi	r24, 0x30	; 48
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	b3 01       	movw	r22, r6
    10c2:	0e 94 bb 08 	call	0x1176	; 0x1176 <fputc>
    10c6:	82 fe       	sbrs	r8, 2
    10c8:	1f c0       	rjmp	.+62     	; 0x1108 <vfprintf+0x37a>
    10ca:	81 fe       	sbrs	r8, 1
    10cc:	03 c0       	rjmp	.+6      	; 0x10d4 <vfprintf+0x346>
    10ce:	88 e5       	ldi	r24, 0x58	; 88
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	10 c0       	rjmp	.+32     	; 0x10f4 <vfprintf+0x366>
    10d4:	88 e7       	ldi	r24, 0x78	; 120
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0d c0       	rjmp	.+26     	; 0x10f4 <vfprintf+0x366>
    10da:	c4 01       	movw	r24, r8
    10dc:	86 78       	andi	r24, 0x86	; 134
    10de:	90 70       	andi	r25, 0x00	; 0
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	91 f0       	breq	.+36     	; 0x1108 <vfprintf+0x37a>
    10e4:	81 fc       	sbrc	r8, 1
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <vfprintf+0x35e>
    10e8:	80 e2       	ldi	r24, 0x20	; 32
    10ea:	01 c0       	rjmp	.+2      	; 0x10ee <vfprintf+0x360>
    10ec:	8b e2       	ldi	r24, 0x2B	; 43
    10ee:	07 fd       	sbrc	r16, 7
    10f0:	8d e2       	ldi	r24, 0x2D	; 45
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	b3 01       	movw	r22, r6
    10f6:	0e 94 bb 08 	call	0x1176	; 0x1176 <fputc>
    10fa:	06 c0       	rjmp	.+12     	; 0x1108 <vfprintf+0x37a>
    10fc:	80 e3       	ldi	r24, 0x30	; 48
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	b3 01       	movw	r22, r6
    1102:	0e 94 bb 08 	call	0x1176	; 0x1176 <fputc>
    1106:	fa 94       	dec	r15
    1108:	df 14       	cp	r13, r15
    110a:	c0 f3       	brcs	.-16     	; 0x10fc <vfprintf+0x36e>
    110c:	da 94       	dec	r13
    110e:	f2 01       	movw	r30, r4
    1110:	ed 0d       	add	r30, r13
    1112:	f1 1d       	adc	r31, r1
    1114:	80 81       	ld	r24, Z
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	b3 01       	movw	r22, r6
    111a:	0e 94 bb 08 	call	0x1176	; 0x1176 <fputc>
    111e:	dd 20       	and	r13, r13
    1120:	a9 f7       	brne	.-22     	; 0x110c <vfprintf+0x37e>
    1122:	06 c0       	rjmp	.+12     	; 0x1130 <vfprintf+0x3a2>
    1124:	80 e2       	ldi	r24, 0x20	; 32
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	b3 01       	movw	r22, r6
    112a:	0e 94 bb 08 	call	0x1176	; 0x1176 <fputc>
    112e:	ea 94       	dec	r14
    1130:	ee 20       	and	r14, r14
    1132:	c1 f7       	brne	.-16     	; 0x1124 <vfprintf+0x396>
    1134:	40 ce       	rjmp	.-896    	; 0xdb6 <vfprintf+0x28>
    1136:	f3 01       	movw	r30, r6
    1138:	86 81       	ldd	r24, Z+6	; 0x06
    113a:	97 81       	ldd	r25, Z+7	; 0x07
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <vfprintf+0x3b4>
    113e:	8f ef       	ldi	r24, 0xFF	; 255
    1140:	9f ef       	ldi	r25, 0xFF	; 255
    1142:	2d 96       	adiw	r28, 0x0d	; 13
    1144:	e2 e1       	ldi	r30, 0x12	; 18
    1146:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <__epilogue_restores__>

0000114a <strnlen_P>:
    114a:	fc 01       	movw	r30, r24
    114c:	05 90       	lpm	r0, Z+
    114e:	61 50       	subi	r22, 0x01	; 1
    1150:	70 40       	sbci	r23, 0x00	; 0
    1152:	01 10       	cpse	r0, r1
    1154:	d8 f7       	brcc	.-10     	; 0x114c <strnlen_P+0x2>
    1156:	80 95       	com	r24
    1158:	90 95       	com	r25
    115a:	8e 0f       	add	r24, r30
    115c:	9f 1f       	adc	r25, r31
    115e:	08 95       	ret

00001160 <strnlen>:
    1160:	fc 01       	movw	r30, r24
    1162:	61 50       	subi	r22, 0x01	; 1
    1164:	70 40       	sbci	r23, 0x00	; 0
    1166:	01 90       	ld	r0, Z+
    1168:	01 10       	cpse	r0, r1
    116a:	d8 f7       	brcc	.-10     	; 0x1162 <strnlen+0x2>
    116c:	80 95       	com	r24
    116e:	90 95       	com	r25
    1170:	8e 0f       	add	r24, r30
    1172:	9f 1f       	adc	r25, r31
    1174:	08 95       	ret

00001176 <fputc>:
    1176:	0f 93       	push	r16
    1178:	1f 93       	push	r17
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    117e:	8c 01       	movw	r16, r24
    1180:	eb 01       	movw	r28, r22
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	81 ff       	sbrs	r24, 1
    1186:	1b c0       	rjmp	.+54     	; 0x11be <fputc+0x48>
    1188:	82 ff       	sbrs	r24, 2
    118a:	0d c0       	rjmp	.+26     	; 0x11a6 <fputc+0x30>
    118c:	2e 81       	ldd	r18, Y+6	; 0x06
    118e:	3f 81       	ldd	r19, Y+7	; 0x07
    1190:	8c 81       	ldd	r24, Y+4	; 0x04
    1192:	9d 81       	ldd	r25, Y+5	; 0x05
    1194:	28 17       	cp	r18, r24
    1196:	39 07       	cpc	r19, r25
    1198:	64 f4       	brge	.+24     	; 0x11b2 <fputc+0x3c>
    119a:	e8 81       	ld	r30, Y
    119c:	f9 81       	ldd	r31, Y+1	; 0x01
    119e:	01 93       	st	Z+, r16
    11a0:	f9 83       	std	Y+1, r31	; 0x01
    11a2:	e8 83       	st	Y, r30
    11a4:	06 c0       	rjmp	.+12     	; 0x11b2 <fputc+0x3c>
    11a6:	e8 85       	ldd	r30, Y+8	; 0x08
    11a8:	f9 85       	ldd	r31, Y+9	; 0x09
    11aa:	80 2f       	mov	r24, r16
    11ac:	09 95       	icall
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	31 f4       	brne	.+12     	; 0x11be <fputc+0x48>
    11b2:	8e 81       	ldd	r24, Y+6	; 0x06
    11b4:	9f 81       	ldd	r25, Y+7	; 0x07
    11b6:	01 96       	adiw	r24, 0x01	; 1
    11b8:	9f 83       	std	Y+7, r25	; 0x07
    11ba:	8e 83       	std	Y+6, r24	; 0x06
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <fputc+0x4c>
    11be:	0f ef       	ldi	r16, 0xFF	; 255
    11c0:	1f ef       	ldi	r17, 0xFF	; 255
    11c2:	c8 01       	movw	r24, r16
    11c4:	df 91       	pop	r29
    11c6:	cf 91       	pop	r28
    11c8:	1f 91       	pop	r17
    11ca:	0f 91       	pop	r16
    11cc:	08 95       	ret

000011ce <__ultoa_invert>:
    11ce:	fa 01       	movw	r30, r20
    11d0:	aa 27       	eor	r26, r26
    11d2:	28 30       	cpi	r18, 0x08	; 8
    11d4:	51 f1       	breq	.+84     	; 0x122a <__ultoa_invert+0x5c>
    11d6:	20 31       	cpi	r18, 0x10	; 16
    11d8:	81 f1       	breq	.+96     	; 0x123a <__ultoa_invert+0x6c>
    11da:	e8 94       	clt
    11dc:	6f 93       	push	r22
    11de:	6e 7f       	andi	r22, 0xFE	; 254
    11e0:	6e 5f       	subi	r22, 0xFE	; 254
    11e2:	7f 4f       	sbci	r23, 0xFF	; 255
    11e4:	8f 4f       	sbci	r24, 0xFF	; 255
    11e6:	9f 4f       	sbci	r25, 0xFF	; 255
    11e8:	af 4f       	sbci	r26, 0xFF	; 255
    11ea:	b1 e0       	ldi	r27, 0x01	; 1
    11ec:	3e d0       	rcall	.+124    	; 0x126a <__ultoa_invert+0x9c>
    11ee:	b4 e0       	ldi	r27, 0x04	; 4
    11f0:	3c d0       	rcall	.+120    	; 0x126a <__ultoa_invert+0x9c>
    11f2:	67 0f       	add	r22, r23
    11f4:	78 1f       	adc	r23, r24
    11f6:	89 1f       	adc	r24, r25
    11f8:	9a 1f       	adc	r25, r26
    11fa:	a1 1d       	adc	r26, r1
    11fc:	68 0f       	add	r22, r24
    11fe:	79 1f       	adc	r23, r25
    1200:	8a 1f       	adc	r24, r26
    1202:	91 1d       	adc	r25, r1
    1204:	a1 1d       	adc	r26, r1
    1206:	6a 0f       	add	r22, r26
    1208:	71 1d       	adc	r23, r1
    120a:	81 1d       	adc	r24, r1
    120c:	91 1d       	adc	r25, r1
    120e:	a1 1d       	adc	r26, r1
    1210:	20 d0       	rcall	.+64     	; 0x1252 <__ultoa_invert+0x84>
    1212:	09 f4       	brne	.+2      	; 0x1216 <__ultoa_invert+0x48>
    1214:	68 94       	set
    1216:	3f 91       	pop	r19
    1218:	2a e0       	ldi	r18, 0x0A	; 10
    121a:	26 9f       	mul	r18, r22
    121c:	11 24       	eor	r1, r1
    121e:	30 19       	sub	r19, r0
    1220:	30 5d       	subi	r19, 0xD0	; 208
    1222:	31 93       	st	Z+, r19
    1224:	de f6       	brtc	.-74     	; 0x11dc <__ultoa_invert+0xe>
    1226:	cf 01       	movw	r24, r30
    1228:	08 95       	ret
    122a:	46 2f       	mov	r20, r22
    122c:	47 70       	andi	r20, 0x07	; 7
    122e:	40 5d       	subi	r20, 0xD0	; 208
    1230:	41 93       	st	Z+, r20
    1232:	b3 e0       	ldi	r27, 0x03	; 3
    1234:	0f d0       	rcall	.+30     	; 0x1254 <__ultoa_invert+0x86>
    1236:	c9 f7       	brne	.-14     	; 0x122a <__ultoa_invert+0x5c>
    1238:	f6 cf       	rjmp	.-20     	; 0x1226 <__ultoa_invert+0x58>
    123a:	46 2f       	mov	r20, r22
    123c:	4f 70       	andi	r20, 0x0F	; 15
    123e:	40 5d       	subi	r20, 0xD0	; 208
    1240:	4a 33       	cpi	r20, 0x3A	; 58
    1242:	18 f0       	brcs	.+6      	; 0x124a <__ultoa_invert+0x7c>
    1244:	49 5d       	subi	r20, 0xD9	; 217
    1246:	31 fd       	sbrc	r19, 1
    1248:	40 52       	subi	r20, 0x20	; 32
    124a:	41 93       	st	Z+, r20
    124c:	02 d0       	rcall	.+4      	; 0x1252 <__ultoa_invert+0x84>
    124e:	a9 f7       	brne	.-22     	; 0x123a <__ultoa_invert+0x6c>
    1250:	ea cf       	rjmp	.-44     	; 0x1226 <__ultoa_invert+0x58>
    1252:	b4 e0       	ldi	r27, 0x04	; 4
    1254:	a6 95       	lsr	r26
    1256:	97 95       	ror	r25
    1258:	87 95       	ror	r24
    125a:	77 95       	ror	r23
    125c:	67 95       	ror	r22
    125e:	ba 95       	dec	r27
    1260:	c9 f7       	brne	.-14     	; 0x1254 <__ultoa_invert+0x86>
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	61 05       	cpc	r22, r1
    1266:	71 05       	cpc	r23, r1
    1268:	08 95       	ret
    126a:	9b 01       	movw	r18, r22
    126c:	ac 01       	movw	r20, r24
    126e:	0a 2e       	mov	r0, r26
    1270:	06 94       	lsr	r0
    1272:	57 95       	ror	r21
    1274:	47 95       	ror	r20
    1276:	37 95       	ror	r19
    1278:	27 95       	ror	r18
    127a:	ba 95       	dec	r27
    127c:	c9 f7       	brne	.-14     	; 0x1270 <__ultoa_invert+0xa2>
    127e:	62 0f       	add	r22, r18
    1280:	73 1f       	adc	r23, r19
    1282:	84 1f       	adc	r24, r20
    1284:	95 1f       	adc	r25, r21
    1286:	a0 1d       	adc	r26, r0
    1288:	08 95       	ret

0000128a <__prologue_saves__>:
    128a:	2f 92       	push	r2
    128c:	3f 92       	push	r3
    128e:	4f 92       	push	r4
    1290:	5f 92       	push	r5
    1292:	6f 92       	push	r6
    1294:	7f 92       	push	r7
    1296:	8f 92       	push	r8
    1298:	9f 92       	push	r9
    129a:	af 92       	push	r10
    129c:	bf 92       	push	r11
    129e:	cf 92       	push	r12
    12a0:	df 92       	push	r13
    12a2:	ef 92       	push	r14
    12a4:	ff 92       	push	r15
    12a6:	0f 93       	push	r16
    12a8:	1f 93       	push	r17
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	ca 1b       	sub	r28, r26
    12b4:	db 0b       	sbc	r29, r27
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	cd bf       	out	0x3d, r28	; 61
    12c0:	09 94       	ijmp

000012c2 <__epilogue_restores__>:
    12c2:	2a 88       	ldd	r2, Y+18	; 0x12
    12c4:	39 88       	ldd	r3, Y+17	; 0x11
    12c6:	48 88       	ldd	r4, Y+16	; 0x10
    12c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    12ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    12cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    12ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    12d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    12d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    12d4:	b9 84       	ldd	r11, Y+9	; 0x09
    12d6:	c8 84       	ldd	r12, Y+8	; 0x08
    12d8:	df 80       	ldd	r13, Y+7	; 0x07
    12da:	ee 80       	ldd	r14, Y+6	; 0x06
    12dc:	fd 80       	ldd	r15, Y+5	; 0x05
    12de:	0c 81       	ldd	r16, Y+4	; 0x04
    12e0:	1b 81       	ldd	r17, Y+3	; 0x03
    12e2:	aa 81       	ldd	r26, Y+2	; 0x02
    12e4:	b9 81       	ldd	r27, Y+1	; 0x01
    12e6:	ce 0f       	add	r28, r30
    12e8:	d1 1d       	adc	r29, r1
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	ed 01       	movw	r28, r26
    12f6:	08 95       	ret

000012f8 <_exit>:
    12f8:	f8 94       	cli

000012fa <__stop_program>:
    12fa:	ff cf       	rjmp	.-2      	; 0x12fa <__stop_program>
